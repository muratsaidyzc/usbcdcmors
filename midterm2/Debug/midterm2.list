
midterm2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007614  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800779c  0800779c  0001779c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007844  08007844  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  08007844  08007844  00017844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800784c  0800784c  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800784c  0800784c  0001784c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007850  08007850  00017850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000144  20000000  08007854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020144  2**0
                  CONTENTS
 10 .bss          00001c7c  20000144  20000144  00020144  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001dc0  20001dc0  00020144  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001387d  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f03  00000000  00000000  000339f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b0  00000000  00000000  000368f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f58  00000000  00000000  000379a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023ab8  00000000  00000000  00038900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014283  00000000  00000000  0005c3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc6f3  00000000  00000000  0007063b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013cd2e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004584  00000000  00000000  0013cd80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000144 	.word	0x20000144
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007784 	.word	0x08007784

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000148 	.word	0x20000148
 80001c4:	08007784 	.word	0x08007784

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <name>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void name(){ // matches the short and long pushes with letters
 80004f0:	b590      	push	{r4, r7, lr}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
	int i=0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	607b      	str	r3, [r7, #4]
	while (i < 9) {
 80004fa:	e02c      	b.n	8000556 <name+0x66>
	  if (strcmp(iteretor, morsecode[i]) == 0) {
 80004fc:	4a1a      	ldr	r2, [pc, #104]	; (8000568 <name+0x78>)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000504:	4619      	mov	r1, r3
 8000506:	4819      	ldr	r0, [pc, #100]	; (800056c <name+0x7c>)
 8000508:	f7ff fe5e 	bl	80001c8 <strcmp>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d11e      	bne.n	8000550 <name+0x60>
	    CDC_Transmit_FS(name_surname[i], strlen(name_surname[i]));
 8000512:	4a17      	ldr	r2, [pc, #92]	; (8000570 <name+0x80>)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800051a:	4a15      	ldr	r2, [pc, #84]	; (8000570 <name+0x80>)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000522:	4618      	mov	r0, r3
 8000524:	f7ff fe5a 	bl	80001dc <strlen>
 8000528:	4603      	mov	r3, r0
 800052a:	b29b      	uxth	r3, r3
 800052c:	4619      	mov	r1, r3
 800052e:	4620      	mov	r0, r4
 8000530:	f006 fca0 	bl	8006e74 <CDC_Transmit_FS>
	    for (int y = 0; y < 6; y++) {
 8000534:	2300      	movs	r3, #0
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	e007      	b.n	800054a <name+0x5a>
	      iteretor[y] = '\0';
 800053a:	4a0c      	ldr	r2, [pc, #48]	; (800056c <name+0x7c>)
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	4413      	add	r3, r2
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
	    for (int y = 0; y < 6; y++) {
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	3301      	adds	r3, #1
 8000548:	603b      	str	r3, [r7, #0]
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	2b05      	cmp	r3, #5
 800054e:	ddf4      	ble.n	800053a <name+0x4a>
	    }
	  }
	  i++;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	3301      	adds	r3, #1
 8000554:	607b      	str	r3, [r7, #4]
	while (i < 9) {
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2b08      	cmp	r3, #8
 800055a:	ddcf      	ble.n	80004fc <name+0xc>
			}
}
 800055c:	bf00      	nop
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	bd90      	pop	{r4, r7, pc}
 8000566:	bf00      	nop
 8000568:	20000000 	.word	0x20000000
 800056c:	200001a8 	.word	0x200001a8
 8000570:	20000024 	.word	0x20000024

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fa72 	bl	8000a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f808 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 f8a6 	bl	80006d0 <MX_GPIO_Init>
  MX_TIM6_Init();
 8000584:	f000 f86e 	bl	8000664 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 8000588:	f006 fbb6 	bl	8006cf8 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800058c:	e7fe      	b.n	800058c <main+0x18>
	...

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	; 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2230      	movs	r2, #48	; 0x30
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f007 f8e8 	bl	8007774 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	4b28      	ldr	r3, [pc, #160]	; (800065c <SystemClock_Config+0xcc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	4a27      	ldr	r2, [pc, #156]	; (800065c <SystemClock_Config+0xcc>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40
 80005c4:	4b25      	ldr	r3, [pc, #148]	; (800065c <SystemClock_Config+0xcc>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b22      	ldr	r3, [pc, #136]	; (8000660 <SystemClock_Config+0xd0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a21      	ldr	r2, [pc, #132]	; (8000660 <SystemClock_Config+0xd0>)
 80005da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <SystemClock_Config+0xd0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ec:	2301      	movs	r3, #1
 80005ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	2302      	movs	r3, #2
 80005f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000600:	2308      	movs	r3, #8
 8000602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000604:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000608:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060a:	2302      	movs	r3, #2
 800060c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800060e:	2307      	movs	r3, #7
 8000610:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	4618      	mov	r0, r3
 8000618:	f002 f82e 	bl	8002678 <HAL_RCC_OscConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000622:	f000 f93f 	bl	80008a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000626:	230f      	movs	r3, #15
 8000628:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	2302      	movs	r3, #2
 800062c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000632:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000636:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	2105      	movs	r1, #5
 8000644:	4618      	mov	r0, r3
 8000646:	f002 fa8f 	bl	8002b68 <HAL_RCC_ClockConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000650:	f000 f928 	bl	80008a4 <Error_Handler>
  }
}
 8000654:	bf00      	nop
 8000656:	3750      	adds	r7, #80	; 0x50
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800066a:	463b      	mov	r3, r7
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000672:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <MX_TIM6_Init+0x64>)
 8000674:	4a15      	ldr	r2, [pc, #84]	; (80006cc <MX_TIM6_Init+0x68>)
 8000676:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000678:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <MX_TIM6_Init+0x64>)
 800067a:	2200      	movs	r2, #0
 800067c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800067e:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_TIM6_Init+0x64>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000684:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <MX_TIM6_Init+0x64>)
 8000686:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800068a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800068c:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_TIM6_Init+0x64>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000692:	480d      	ldr	r0, [pc, #52]	; (80006c8 <MX_TIM6_Init+0x64>)
 8000694:	f002 fc60 	bl	8002f58 <HAL_TIM_Base_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800069e:	f000 f901 	bl	80008a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a2:	2300      	movs	r3, #0
 80006a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a6:	2300      	movs	r3, #0
 80006a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80006aa:	463b      	mov	r3, r7
 80006ac:	4619      	mov	r1, r3
 80006ae:	4806      	ldr	r0, [pc, #24]	; (80006c8 <MX_TIM6_Init+0x64>)
 80006b0:	f002 fe7c 	bl	80033ac <HAL_TIMEx_MasterConfigSynchronization>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80006ba:	f000 f8f3 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000160 	.word	0x20000160
 80006cc:	40001000 	.word	0x40001000

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	4b36      	ldr	r3, [pc, #216]	; (80007c4 <MX_GPIO_Init+0xf4>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a35      	ldr	r2, [pc, #212]	; (80007c4 <MX_GPIO_Init+0xf4>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b33      	ldr	r3, [pc, #204]	; (80007c4 <MX_GPIO_Init+0xf4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	4b2f      	ldr	r3, [pc, #188]	; (80007c4 <MX_GPIO_Init+0xf4>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a2e      	ldr	r2, [pc, #184]	; (80007c4 <MX_GPIO_Init+0xf4>)
 800070c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b2c      	ldr	r3, [pc, #176]	; (80007c4 <MX_GPIO_Init+0xf4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b28      	ldr	r3, [pc, #160]	; (80007c4 <MX_GPIO_Init+0xf4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a27      	ldr	r2, [pc, #156]	; (80007c4 <MX_GPIO_Init+0xf4>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b25      	ldr	r3, [pc, #148]	; (80007c4 <MX_GPIO_Init+0xf4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <MX_GPIO_Init+0xf4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a20      	ldr	r2, [pc, #128]	; (80007c4 <MX_GPIO_Init+0xf4>)
 8000744:	f043 0308 	orr.w	r3, r3, #8
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <MX_GPIO_Init+0xf4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0308 	and.w	r3, r3, #8
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(red_GPIO_Port, red_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800075c:	481a      	ldr	r0, [pc, #104]	; (80007c8 <MX_GPIO_Init+0xf8>)
 800075e:	f000 fcdb 	bl	8001118 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : button_Pin printer_Pin */
  GPIO_InitStruct.Pin = button_Pin|printer_Pin;
 8000762:	2303      	movs	r3, #3
 8000764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000766:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800076a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	4619      	mov	r1, r3
 8000776:	4815      	ldr	r0, [pc, #84]	; (80007cc <MX_GPIO_Init+0xfc>)
 8000778:	f000 fb1a 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : red_Pin */
  GPIO_InitStruct.Pin = red_Pin;
 800077c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	2301      	movs	r3, #1
 8000784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(red_GPIO_Port, &GPIO_InitStruct);
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	4619      	mov	r1, r3
 8000794:	480c      	ldr	r0, [pc, #48]	; (80007c8 <MX_GPIO_Init+0xf8>)
 8000796:	f000 fb0b 	bl	8000db0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	2006      	movs	r0, #6
 80007a0:	f000 facf 	bl	8000d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007a4:	2006      	movs	r0, #6
 80007a6:	f000 fae8 	bl	8000d7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	2007      	movs	r0, #7
 80007b0:	f000 fac7 	bl	8000d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80007b4:	2007      	movs	r0, #7
 80007b6:	f000 fae0 	bl	8000d7a <HAL_NVIC_EnableIRQ>

}
 80007ba:	bf00      	nop
 80007bc:	3728      	adds	r7, #40	; 0x28
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40020c00 	.word	0x40020c00
 80007cc:	40020000 	.word	0x40020000

080007d0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	80fb      	strh	r3, [r7, #6]
	int i=0;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
	uint32_t pressTime;
	int pressCounter;
	if(GPIO_Pin==button_Pin){
 80007de:	88fb      	ldrh	r3, [r7, #6]
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d143      	bne.n	800086c <HAL_GPIO_EXTI_Callback+0x9c>
		if(HAL_GPIO_ReadPin(button_GPIO_Port, button_Pin)){
 80007e4:	2101      	movs	r1, #1
 80007e6:	482b      	ldr	r0, [pc, #172]	; (8000894 <HAL_GPIO_EXTI_Callback+0xc4>)
 80007e8:	f000 fc7e 	bl	80010e8 <HAL_GPIO_ReadPin>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d00b      	beq.n	800080a <HAL_GPIO_EXTI_Callback+0x3a>
			(TIM6->CNT)=0;
 80007f2:	4b29      	ldr	r3, [pc, #164]	; (8000898 <HAL_GPIO_EXTI_Callback+0xc8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	625a      	str	r2, [r3, #36]	; 0x24
			pressCounter=0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_WritePin(red_GPIO_Port, red_Pin, 1);
 80007fc:	2201      	movs	r2, #1
 80007fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000802:	4826      	ldr	r0, [pc, #152]	; (800089c <HAL_GPIO_EXTI_Callback+0xcc>)
 8000804:	f000 fc88 	bl	8001118 <HAL_GPIO_WritePin>
 8000808:	e030      	b.n	800086c <HAL_GPIO_EXTI_Callback+0x9c>
		}
		else{
			pressTime=(TIM6->CNT);
 800080a:	4b23      	ldr	r3, [pc, #140]	; (8000898 <HAL_GPIO_EXTI_Callback+0xc8>)
 800080c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800080e:	613b      	str	r3, [r7, #16]
			HAL_GPIO_WritePin(red_GPIO_Port, red_Pin, 0);
 8000810:	2200      	movs	r2, #0
 8000812:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000816:	4821      	ldr	r0, [pc, #132]	; (800089c <HAL_GPIO_EXTI_Callback+0xcc>)
 8000818:	f000 fc7e 	bl	8001118 <HAL_GPIO_WritePin>
			(TIM6->CNT)=0;
 800081c:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <HAL_GPIO_EXTI_Callback+0xc8>)
 800081e:	2200      	movs	r2, #0
 8000820:	625a      	str	r2, [r3, #36]	; 0x24

		if(pressTime>60 && pressTime<400){
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	2b3c      	cmp	r3, #60	; 0x3c
 8000826:	d90b      	bls.n	8000840 <HAL_GPIO_EXTI_Callback+0x70>
 8000828:	693b      	ldr	r3, [r7, #16]
 800082a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800082e:	d207      	bcs.n	8000840 <HAL_GPIO_EXTI_Callback+0x70>
			iteretor[i]=dot;
 8000830:	4a1b      	ldr	r2, [pc, #108]	; (80008a0 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	4413      	add	r3, r2
 8000836:	222e      	movs	r2, #46	; 0x2e
 8000838:	701a      	strb	r2, [r3, #0]
			i++;
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	3301      	adds	r3, #1
 800083e:	617b      	str	r3, [r7, #20]
			}
		if(pressTime>399){
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000846:	d307      	bcc.n	8000858 <HAL_GPIO_EXTI_Callback+0x88>
			iteretor[i]=dash;
 8000848:	4a15      	ldr	r2, [pc, #84]	; (80008a0 <HAL_GPIO_EXTI_Callback+0xd0>)
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	4413      	add	r3, r2
 800084e:	222d      	movs	r2, #45	; 0x2d
 8000850:	701a      	strb	r2, [r3, #0]
			i++;
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	3301      	adds	r3, #1
 8000856:	617b      	str	r3, [r7, #20]
				  }
		if(i==4 || pressCounter){
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	2b04      	cmp	r3, #4
 800085c:	d002      	beq.n	8000864 <HAL_GPIO_EXTI_Callback+0x94>
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d003      	beq.n	800086c <HAL_GPIO_EXTI_Callback+0x9c>
			name();
 8000864:	f7ff fe44 	bl	80004f0 <name>
	  		i=0;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
		}
		}
	}
	if(GPIO_Pin==printer_Pin){ //to transmit the letter if input(short/long pushes) are less then 4 ticks
 800086c:	88fb      	ldrh	r3, [r7, #6]
 800086e:	2b02      	cmp	r3, #2
 8000870:	d10b      	bne.n	800088a <HAL_GPIO_EXTI_Callback+0xba>
		pressCounter=1;
 8000872:	2301      	movs	r3, #1
 8000874:	60fb      	str	r3, [r7, #12]
		if(i==4 || pressCounter){
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	2b04      	cmp	r3, #4
 800087a:	d002      	beq.n	8000882 <HAL_GPIO_EXTI_Callback+0xb2>
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d003      	beq.n	800088a <HAL_GPIO_EXTI_Callback+0xba>
			name(); //transmits the letter
 8000882:	f7ff fe35 	bl	80004f0 <name>
			i=0;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
	 }
	}
}
 800088a:	bf00      	nop
 800088c:	3718      	adds	r7, #24
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40020000 	.word	0x40020000
 8000898:	40001000 	.word	0x40001000
 800089c:	40020c00 	.word	0x40020c00
 80008a0:	200001a8 	.word	0x200001a8

080008a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
}
 80008aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ac:	e7fe      	b.n	80008ac <Error_Handler+0x8>
	...

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <HAL_MspInit+0x4c>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <HAL_MspInit+0x4c>)
 80008c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <HAL_MspInit+0x4c>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <HAL_MspInit+0x4c>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	4a08      	ldr	r2, [pc, #32]	; (80008fc <HAL_MspInit+0x4c>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e0:	6413      	str	r3, [r2, #64]	; 0x40
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_MspInit+0x4c>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008ee:	2007      	movs	r0, #7
 80008f0:	f000 fa1c 	bl	8000d2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40023800 	.word	0x40023800

08000900 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a0e      	ldr	r2, [pc, #56]	; (8000948 <HAL_TIM_Base_MspInit+0x48>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d115      	bne.n	800093e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <HAL_TIM_Base_MspInit+0x4c>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	4a0c      	ldr	r2, [pc, #48]	; (800094c <HAL_TIM_Base_MspInit+0x4c>)
 800091c:	f043 0310 	orr.w	r3, r3, #16
 8000920:	6413      	str	r3, [r2, #64]	; 0x40
 8000922:	4b0a      	ldr	r3, [pc, #40]	; (800094c <HAL_TIM_Base_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	f003 0310 	and.w	r3, r3, #16
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2100      	movs	r1, #0
 8000932:	2036      	movs	r0, #54	; 0x36
 8000934:	f000 fa05 	bl	8000d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000938:	2036      	movs	r0, #54	; 0x36
 800093a:	f000 fa1e 	bl	8000d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800093e:	bf00      	nop
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40001000 	.word	0x40001000
 800094c:	40023800 	.word	0x40023800

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <NMI_Handler+0x4>

08000956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <HardFault_Handler+0x4>

0800095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <MemManage_Handler+0x4>

08000962 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <BusFault_Handler+0x4>

08000968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <UsageFault_Handler+0x4>

0800096e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800099c:	f000 f8b2 	bl	8000b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 80009a8:	2001      	movs	r0, #1
 80009aa:	f000 fbcf 	bl	800114c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(printer_Pin);
 80009b6:	2002      	movs	r0, #2
 80009b8:	f000 fbc8 	bl	800114c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}

080009c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009c4:	4802      	ldr	r0, [pc, #8]	; (80009d0 <TIM6_DAC_IRQHandler+0x10>)
 80009c6:	f002 fb16 	bl	8002ff6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000160 	.word	0x20000160

080009d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009d8:	4802      	ldr	r0, [pc, #8]	; (80009e4 <OTG_FS_IRQHandler+0x10>)
 80009da:	f000 fd1f 	bl	800141c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20001694 	.word	0x20001694

080009e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <SystemInit+0x20>)
 80009ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f2:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <SystemInit+0x20>)
 80009f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a10:	480d      	ldr	r0, [pc, #52]	; (8000a48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a12:	490e      	ldr	r1, [pc, #56]	; (8000a4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a14:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a18:	e002      	b.n	8000a20 <LoopCopyDataInit>

08000a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1e:	3304      	adds	r3, #4

08000a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a24:	d3f9      	bcc.n	8000a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a26:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a28:	4c0b      	ldr	r4, [pc, #44]	; (8000a58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a2c:	e001      	b.n	8000a32 <LoopFillZerobss>

08000a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a30:	3204      	adds	r2, #4

08000a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a34:	d3fb      	bcc.n	8000a2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a36:	f7ff ffd7 	bl	80009e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a3a:	f006 fe77 	bl	800772c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a3e:	f7ff fd99 	bl	8000574 <main>
  bx  lr    
 8000a42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a4c:	20000144 	.word	0x20000144
  ldr r2, =_sidata
 8000a50:	08007854 	.word	0x08007854
  ldr r2, =_sbss
 8000a54:	20000144 	.word	0x20000144
  ldr r4, =_ebss
 8000a58:	20001dc0 	.word	0x20001dc0

08000a5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a5c:	e7fe      	b.n	8000a5c <ADC_IRQHandler>
	...

08000a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <HAL_Init+0x40>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0d      	ldr	r2, [pc, #52]	; (8000aa0 <HAL_Init+0x40>)
 8000a6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <HAL_Init+0x40>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <HAL_Init+0x40>)
 8000a76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <HAL_Init+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <HAL_Init+0x40>)
 8000a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a88:	2003      	movs	r0, #3
 8000a8a:	f000 f94f 	bl	8000d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 f808 	bl	8000aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a94:	f7ff ff0c 	bl	80008b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023c00 	.word	0x40023c00

08000aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_InitTick+0x54>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <HAL_InitTick+0x58>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f967 	bl	8000d96 <HAL_SYSTICK_Config>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e00e      	b.n	8000af0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b0f      	cmp	r3, #15
 8000ad6:	d80a      	bhi.n	8000aee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	6879      	ldr	r1, [r7, #4]
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	f000 f92f 	bl	8000d42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae4:	4a06      	ldr	r2, [pc, #24]	; (8000b00 <HAL_InitTick+0x5c>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aea:	2300      	movs	r3, #0
 8000aec:	e000      	b.n	8000af0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000048 	.word	0x20000048
 8000afc:	20000050 	.word	0x20000050
 8000b00:	2000004c 	.word	0x2000004c

08000b04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_IncTick+0x20>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_IncTick+0x24>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4413      	add	r3, r2
 8000b14:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <HAL_IncTick+0x24>)
 8000b16:	6013      	str	r3, [r2, #0]
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000050 	.word	0x20000050
 8000b28:	200001b0 	.word	0x200001b0

08000b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <HAL_GetTick+0x14>)
 8000b32:	681b      	ldr	r3, [r3, #0]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	200001b0 	.word	0x200001b0

08000b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b4c:	f7ff ffee 	bl	8000b2c <HAL_GetTick>
 8000b50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b5c:	d005      	beq.n	8000b6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <HAL_Delay+0x44>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	4413      	add	r3, r2
 8000b68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b6a:	bf00      	nop
 8000b6c:	f7ff ffde 	bl	8000b2c <HAL_GetTick>
 8000b70:	4602      	mov	r2, r0
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d8f7      	bhi.n	8000b6c <HAL_Delay+0x28>
  {
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	bf00      	nop
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000050 	.word	0x20000050

08000b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bbe:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	60d3      	str	r3, [r2, #12]
}
 8000bc4:	bf00      	nop
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd8:	4b04      	ldr	r3, [pc, #16]	; (8000bec <__NVIC_GetPriorityGrouping+0x18>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	0a1b      	lsrs	r3, r3, #8
 8000bde:	f003 0307 	and.w	r3, r3, #7
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	db0b      	blt.n	8000c1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	f003 021f 	and.w	r2, r3, #31
 8000c08:	4907      	ldr	r1, [pc, #28]	; (8000c28 <__NVIC_EnableIRQ+0x38>)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	095b      	lsrs	r3, r3, #5
 8000c10:	2001      	movs	r0, #1
 8000c12:	fa00 f202 	lsl.w	r2, r0, r2
 8000c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000e100 	.word	0xe000e100

08000c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	6039      	str	r1, [r7, #0]
 8000c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	db0a      	blt.n	8000c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	490c      	ldr	r1, [pc, #48]	; (8000c78 <__NVIC_SetPriority+0x4c>)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	0112      	lsls	r2, r2, #4
 8000c4c:	b2d2      	uxtb	r2, r2
 8000c4e:	440b      	add	r3, r1
 8000c50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c54:	e00a      	b.n	8000c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	4908      	ldr	r1, [pc, #32]	; (8000c7c <__NVIC_SetPriority+0x50>)
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	f003 030f 	and.w	r3, r3, #15
 8000c62:	3b04      	subs	r3, #4
 8000c64:	0112      	lsls	r2, r2, #4
 8000c66:	b2d2      	uxtb	r2, r2
 8000c68:	440b      	add	r3, r1
 8000c6a:	761a      	strb	r2, [r3, #24]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000e100 	.word	0xe000e100
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b089      	sub	sp, #36	; 0x24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	f1c3 0307 	rsb	r3, r3, #7
 8000c9a:	2b04      	cmp	r3, #4
 8000c9c:	bf28      	it	cs
 8000c9e:	2304      	movcs	r3, #4
 8000ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	3304      	adds	r3, #4
 8000ca6:	2b06      	cmp	r3, #6
 8000ca8:	d902      	bls.n	8000cb0 <NVIC_EncodePriority+0x30>
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	3b03      	subs	r3, #3
 8000cae:	e000      	b.n	8000cb2 <NVIC_EncodePriority+0x32>
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43da      	mvns	r2, r3
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	401a      	ands	r2, r3
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd2:	43d9      	mvns	r1, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	4313      	orrs	r3, r2
         );
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3724      	adds	r7, #36	; 0x24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
	...

08000ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cf8:	d301      	bcc.n	8000cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e00f      	b.n	8000d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <SysTick_Config+0x40>)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d06:	210f      	movs	r1, #15
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	f7ff ff8e 	bl	8000c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <SysTick_Config+0x40>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d16:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <SysTick_Config+0x40>)
 8000d18:	2207      	movs	r2, #7
 8000d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	e000e010 	.word	0xe000e010

08000d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff ff29 	bl	8000b8c <__NVIC_SetPriorityGrouping>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b086      	sub	sp, #24
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	4603      	mov	r3, r0
 8000d4a:	60b9      	str	r1, [r7, #8]
 8000d4c:	607a      	str	r2, [r7, #4]
 8000d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d54:	f7ff ff3e 	bl	8000bd4 <__NVIC_GetPriorityGrouping>
 8000d58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	68b9      	ldr	r1, [r7, #8]
 8000d5e:	6978      	ldr	r0, [r7, #20]
 8000d60:	f7ff ff8e 	bl	8000c80 <NVIC_EncodePriority>
 8000d64:	4602      	mov	r2, r0
 8000d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ff5d 	bl	8000c2c <__NVIC_SetPriority>
}
 8000d72:	bf00      	nop
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	4603      	mov	r3, r0
 8000d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ff31 	bl	8000bf0 <__NVIC_EnableIRQ>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff ffa2 	bl	8000ce8 <SysTick_Config>
 8000da4:	4603      	mov	r3, r0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b089      	sub	sp, #36	; 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
 8000dca:	e16b      	b.n	80010a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dcc:	2201      	movs	r2, #1
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	697a      	ldr	r2, [r7, #20]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	f040 815a 	bne.w	800109e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f003 0303 	and.w	r3, r3, #3
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d005      	beq.n	8000e02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d130      	bne.n	8000e64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4013      	ands	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	68da      	ldr	r2, [r3, #12]
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e38:	2201      	movs	r2, #1
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	091b      	lsrs	r3, r3, #4
 8000e4e:	f003 0201 	and.w	r2, r3, #1
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	2b03      	cmp	r3, #3
 8000e6e:	d017      	beq.n	8000ea0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d123      	bne.n	8000ef4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	08da      	lsrs	r2, r3, #3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3208      	adds	r2, #8
 8000eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	f003 0307 	and.w	r3, r3, #7
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	220f      	movs	r2, #15
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	691a      	ldr	r2, [r3, #16]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	08da      	lsrs	r2, r3, #3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3208      	adds	r2, #8
 8000eee:	69b9      	ldr	r1, [r7, #24]
 8000ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	2203      	movs	r2, #3
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0203 	and.w	r2, r3, #3
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	f000 80b4 	beq.w	800109e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b60      	ldr	r3, [pc, #384]	; (80010bc <HAL_GPIO_Init+0x30c>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	4a5f      	ldr	r2, [pc, #380]	; (80010bc <HAL_GPIO_Init+0x30c>)
 8000f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f44:	6453      	str	r3, [r2, #68]	; 0x44
 8000f46:	4b5d      	ldr	r3, [pc, #372]	; (80010bc <HAL_GPIO_Init+0x30c>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f52:	4a5b      	ldr	r2, [pc, #364]	; (80010c0 <HAL_GPIO_Init+0x310>)
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	089b      	lsrs	r3, r3, #2
 8000f58:	3302      	adds	r3, #2
 8000f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f003 0303 	and.w	r3, r3, #3
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	220f      	movs	r2, #15
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a52      	ldr	r2, [pc, #328]	; (80010c4 <HAL_GPIO_Init+0x314>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d02b      	beq.n	8000fd6 <HAL_GPIO_Init+0x226>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a51      	ldr	r2, [pc, #324]	; (80010c8 <HAL_GPIO_Init+0x318>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d025      	beq.n	8000fd2 <HAL_GPIO_Init+0x222>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a50      	ldr	r2, [pc, #320]	; (80010cc <HAL_GPIO_Init+0x31c>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d01f      	beq.n	8000fce <HAL_GPIO_Init+0x21e>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a4f      	ldr	r2, [pc, #316]	; (80010d0 <HAL_GPIO_Init+0x320>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d019      	beq.n	8000fca <HAL_GPIO_Init+0x21a>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a4e      	ldr	r2, [pc, #312]	; (80010d4 <HAL_GPIO_Init+0x324>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d013      	beq.n	8000fc6 <HAL_GPIO_Init+0x216>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a4d      	ldr	r2, [pc, #308]	; (80010d8 <HAL_GPIO_Init+0x328>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d00d      	beq.n	8000fc2 <HAL_GPIO_Init+0x212>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a4c      	ldr	r2, [pc, #304]	; (80010dc <HAL_GPIO_Init+0x32c>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d007      	beq.n	8000fbe <HAL_GPIO_Init+0x20e>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a4b      	ldr	r2, [pc, #300]	; (80010e0 <HAL_GPIO_Init+0x330>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d101      	bne.n	8000fba <HAL_GPIO_Init+0x20a>
 8000fb6:	2307      	movs	r3, #7
 8000fb8:	e00e      	b.n	8000fd8 <HAL_GPIO_Init+0x228>
 8000fba:	2308      	movs	r3, #8
 8000fbc:	e00c      	b.n	8000fd8 <HAL_GPIO_Init+0x228>
 8000fbe:	2306      	movs	r3, #6
 8000fc0:	e00a      	b.n	8000fd8 <HAL_GPIO_Init+0x228>
 8000fc2:	2305      	movs	r3, #5
 8000fc4:	e008      	b.n	8000fd8 <HAL_GPIO_Init+0x228>
 8000fc6:	2304      	movs	r3, #4
 8000fc8:	e006      	b.n	8000fd8 <HAL_GPIO_Init+0x228>
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e004      	b.n	8000fd8 <HAL_GPIO_Init+0x228>
 8000fce:	2302      	movs	r3, #2
 8000fd0:	e002      	b.n	8000fd8 <HAL_GPIO_Init+0x228>
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e000      	b.n	8000fd8 <HAL_GPIO_Init+0x228>
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	69fa      	ldr	r2, [r7, #28]
 8000fda:	f002 0203 	and.w	r2, r2, #3
 8000fde:	0092      	lsls	r2, r2, #2
 8000fe0:	4093      	lsls	r3, r2
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fe8:	4935      	ldr	r1, [pc, #212]	; (80010c0 <HAL_GPIO_Init+0x310>)
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	089b      	lsrs	r3, r3, #2
 8000fee:	3302      	adds	r3, #2
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ff6:	4b3b      	ldr	r3, [pc, #236]	; (80010e4 <HAL_GPIO_Init+0x334>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800101a:	4a32      	ldr	r2, [pc, #200]	; (80010e4 <HAL_GPIO_Init+0x334>)
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001020:	4b30      	ldr	r3, [pc, #192]	; (80010e4 <HAL_GPIO_Init+0x334>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001044:	4a27      	ldr	r2, [pc, #156]	; (80010e4 <HAL_GPIO_Init+0x334>)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800104a:	4b26      	ldr	r3, [pc, #152]	; (80010e4 <HAL_GPIO_Init+0x334>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	43db      	mvns	r3, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4013      	ands	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800106e:	4a1d      	ldr	r2, [pc, #116]	; (80010e4 <HAL_GPIO_Init+0x334>)
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001074:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <HAL_GPIO_Init+0x334>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001098:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <HAL_GPIO_Init+0x334>)
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3301      	adds	r3, #1
 80010a2:	61fb      	str	r3, [r7, #28]
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	2b0f      	cmp	r3, #15
 80010a8:	f67f ae90 	bls.w	8000dcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	3724      	adds	r7, #36	; 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40013800 	.word	0x40013800
 80010c4:	40020000 	.word	0x40020000
 80010c8:	40020400 	.word	0x40020400
 80010cc:	40020800 	.word	0x40020800
 80010d0:	40020c00 	.word	0x40020c00
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40021400 	.word	0x40021400
 80010dc:	40021800 	.word	0x40021800
 80010e0:	40021c00 	.word	0x40021c00
 80010e4:	40013c00 	.word	0x40013c00

080010e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	691a      	ldr	r2, [r3, #16]
 80010f8:	887b      	ldrh	r3, [r7, #2]
 80010fa:	4013      	ands	r3, r2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d002      	beq.n	8001106 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001100:	2301      	movs	r3, #1
 8001102:	73fb      	strb	r3, [r7, #15]
 8001104:	e001      	b.n	800110a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001106:	2300      	movs	r3, #0
 8001108:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800110a:	7bfb      	ldrb	r3, [r7, #15]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	807b      	strh	r3, [r7, #2]
 8001124:	4613      	mov	r3, r2
 8001126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001128:	787b      	ldrb	r3, [r7, #1]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800112e:	887a      	ldrh	r2, [r7, #2]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001134:	e003      	b.n	800113e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001136:	887b      	ldrh	r3, [r7, #2]
 8001138:	041a      	lsls	r2, r3, #16
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	619a      	str	r2, [r3, #24]
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001158:	695a      	ldr	r2, [r3, #20]
 800115a:	88fb      	ldrh	r3, [r7, #6]
 800115c:	4013      	ands	r3, r2
 800115e:	2b00      	cmp	r3, #0
 8001160:	d006      	beq.n	8001170 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001162:	4a05      	ldr	r2, [pc, #20]	; (8001178 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001164:	88fb      	ldrh	r3, [r7, #6]
 8001166:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fb30 	bl	80007d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40013c00 	.word	0x40013c00

0800117c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800117c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800117e:	b08f      	sub	sp, #60	; 0x3c
 8001180:	af0a      	add	r7, sp, #40	; 0x28
 8001182:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d101      	bne.n	800118e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e10f      	b.n	80013ae <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b00      	cmp	r3, #0
 800119e:	d106      	bne.n	80011ae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f005 ffab 	bl	8007104 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2203      	movs	r2, #3
 80011b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d102      	bne.n	80011c8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f002 fa92 	bl	80036f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	687e      	ldr	r6, [r7, #4]
 80011da:	466d      	mov	r5, sp
 80011dc:	f106 0410 	add.w	r4, r6, #16
 80011e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80011f0:	1d33      	adds	r3, r6, #4
 80011f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011f4:	6838      	ldr	r0, [r7, #0]
 80011f6:	f002 f969 	bl	80034cc <USB_CoreInit>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d005      	beq.n	800120c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2202      	movs	r2, #2
 8001204:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e0d0      	b.n	80013ae <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f002 fa80 	bl	8003718 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001218:	2300      	movs	r3, #0
 800121a:	73fb      	strb	r3, [r7, #15]
 800121c:	e04a      	b.n	80012b4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800121e:	7bfa      	ldrb	r2, [r7, #15]
 8001220:	6879      	ldr	r1, [r7, #4]
 8001222:	4613      	mov	r3, r2
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	4413      	add	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	440b      	add	r3, r1
 800122c:	333d      	adds	r3, #61	; 0x3d
 800122e:	2201      	movs	r2, #1
 8001230:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001232:	7bfa      	ldrb	r2, [r7, #15]
 8001234:	6879      	ldr	r1, [r7, #4]
 8001236:	4613      	mov	r3, r2
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	4413      	add	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	440b      	add	r3, r1
 8001240:	333c      	adds	r3, #60	; 0x3c
 8001242:	7bfa      	ldrb	r2, [r7, #15]
 8001244:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001246:	7bfa      	ldrb	r2, [r7, #15]
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	b298      	uxth	r0, r3
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	4613      	mov	r3, r2
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	4413      	add	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	440b      	add	r3, r1
 8001258:	3344      	adds	r3, #68	; 0x44
 800125a:	4602      	mov	r2, r0
 800125c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800125e:	7bfa      	ldrb	r2, [r7, #15]
 8001260:	6879      	ldr	r1, [r7, #4]
 8001262:	4613      	mov	r3, r2
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	4413      	add	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	440b      	add	r3, r1
 800126c:	3340      	adds	r3, #64	; 0x40
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001272:	7bfa      	ldrb	r2, [r7, #15]
 8001274:	6879      	ldr	r1, [r7, #4]
 8001276:	4613      	mov	r3, r2
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	4413      	add	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	440b      	add	r3, r1
 8001280:	3348      	adds	r3, #72	; 0x48
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001286:	7bfa      	ldrb	r2, [r7, #15]
 8001288:	6879      	ldr	r1, [r7, #4]
 800128a:	4613      	mov	r3, r2
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	4413      	add	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	440b      	add	r3, r1
 8001294:	334c      	adds	r3, #76	; 0x4c
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800129a:	7bfa      	ldrb	r2, [r7, #15]
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	4613      	mov	r3, r2
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	4413      	add	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	440b      	add	r3, r1
 80012a8:	3354      	adds	r3, #84	; 0x54
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	3301      	adds	r3, #1
 80012b2:	73fb      	strb	r3, [r7, #15]
 80012b4:	7bfa      	ldrb	r2, [r7, #15]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d3af      	bcc.n	800121e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012be:	2300      	movs	r3, #0
 80012c0:	73fb      	strb	r3, [r7, #15]
 80012c2:	e044      	b.n	800134e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012c4:	7bfa      	ldrb	r2, [r7, #15]
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	4613      	mov	r3, r2
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	4413      	add	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	440b      	add	r3, r1
 80012d2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012da:	7bfa      	ldrb	r2, [r7, #15]
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	4613      	mov	r3, r2
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	4413      	add	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	440b      	add	r3, r1
 80012e8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80012ec:	7bfa      	ldrb	r2, [r7, #15]
 80012ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012f0:	7bfa      	ldrb	r2, [r7, #15]
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	4613      	mov	r3, r2
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	4413      	add	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	440b      	add	r3, r1
 80012fe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001306:	7bfa      	ldrb	r2, [r7, #15]
 8001308:	6879      	ldr	r1, [r7, #4]
 800130a:	4613      	mov	r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	4413      	add	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	440b      	add	r3, r1
 8001314:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800131c:	7bfa      	ldrb	r2, [r7, #15]
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	4613      	mov	r3, r2
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	4413      	add	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001332:	7bfa      	ldrb	r2, [r7, #15]
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	4613      	mov	r3, r2
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	4413      	add	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	440b      	add	r3, r1
 8001340:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	3301      	adds	r3, #1
 800134c:	73fb      	strb	r3, [r7, #15]
 800134e:	7bfa      	ldrb	r2, [r7, #15]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	429a      	cmp	r2, r3
 8001356:	d3b5      	bcc.n	80012c4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	603b      	str	r3, [r7, #0]
 800135e:	687e      	ldr	r6, [r7, #4]
 8001360:	466d      	mov	r5, sp
 8001362:	f106 0410 	add.w	r4, r6, #16
 8001366:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001368:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800136a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800136c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800136e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001372:	e885 0003 	stmia.w	r5, {r0, r1}
 8001376:	1d33      	adds	r3, r6, #4
 8001378:	cb0e      	ldmia	r3, {r1, r2, r3}
 800137a:	6838      	ldr	r0, [r7, #0]
 800137c:	f002 fa18 	bl	80037b0 <USB_DevInit>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d005      	beq.n	8001392 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2202      	movs	r2, #2
 800138a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e00d      	b.n	80013ae <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f003 fb67 	bl	8004a7a <USB_DevDisconnect>

  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013b6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b084      	sub	sp, #16
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d101      	bne.n	80013d2 <HAL_PCD_Start+0x1c>
 80013ce:	2302      	movs	r3, #2
 80013d0:	e020      	b.n	8001414 <HAL_PCD_Start+0x5e>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2201      	movs	r2, #1
 80013d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d109      	bne.n	80013f6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d005      	beq.n	80013f6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f002 f96a 	bl	80036d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f003 fb17 	bl	8004a38 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b08d      	sub	sp, #52	; 0x34
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800142a:	6a3b      	ldr	r3, [r7, #32]
 800142c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f003 fbd5 	bl	8004be2 <USB_GetMode>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	f040 848a 	bne.w	8001d54 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f003 fb39 	bl	8004abc <USB_ReadInterrupts>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 8480 	beq.w	8001d52 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	0a1b      	lsrs	r3, r3, #8
 800145c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f003 fb26 	bl	8004abc <USB_ReadInterrupts>
 8001470:	4603      	mov	r3, r0
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b02      	cmp	r3, #2
 8001478:	d107      	bne.n	800148a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	695a      	ldr	r2, [r3, #20]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f002 0202 	and.w	r2, r2, #2
 8001488:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f003 fb14 	bl	8004abc <USB_ReadInterrupts>
 8001494:	4603      	mov	r3, r0
 8001496:	f003 0310 	and.w	r3, r3, #16
 800149a:	2b10      	cmp	r3, #16
 800149c:	d161      	bne.n	8001562 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	699a      	ldr	r2, [r3, #24]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 0210 	bic.w	r2, r2, #16
 80014ac:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80014ae:	6a3b      	ldr	r3, [r7, #32]
 80014b0:	6a1b      	ldr	r3, [r3, #32]
 80014b2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	f003 020f 	and.w	r2, r3, #15
 80014ba:	4613      	mov	r3, r2
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	4413      	add	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	3304      	adds	r3, #4
 80014cc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	0c5b      	lsrs	r3, r3, #17
 80014d2:	f003 030f 	and.w	r3, r3, #15
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d124      	bne.n	8001524 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80014e0:	4013      	ands	r3, r2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d035      	beq.n	8001552 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	091b      	lsrs	r3, r3, #4
 80014ee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	461a      	mov	r2, r3
 80014f8:	6a38      	ldr	r0, [r7, #32]
 80014fa:	f003 f94b 	bl	8004794 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	691a      	ldr	r2, [r3, #16]
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	091b      	lsrs	r3, r3, #4
 8001506:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800150a:	441a      	add	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	6a1a      	ldr	r2, [r3, #32]
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	091b      	lsrs	r3, r3, #4
 8001518:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800151c:	441a      	add	r2, r3
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	621a      	str	r2, [r3, #32]
 8001522:	e016      	b.n	8001552 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	0c5b      	lsrs	r3, r3, #17
 8001528:	f003 030f 	and.w	r3, r3, #15
 800152c:	2b06      	cmp	r3, #6
 800152e:	d110      	bne.n	8001552 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001536:	2208      	movs	r2, #8
 8001538:	4619      	mov	r1, r3
 800153a:	6a38      	ldr	r0, [r7, #32]
 800153c:	f003 f92a 	bl	8004794 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	6a1a      	ldr	r2, [r3, #32]
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	091b      	lsrs	r3, r3, #4
 8001548:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800154c:	441a      	add	r2, r3
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	699a      	ldr	r2, [r3, #24]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f042 0210 	orr.w	r2, r2, #16
 8001560:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f003 faa8 	bl	8004abc <USB_ReadInterrupts>
 800156c:	4603      	mov	r3, r0
 800156e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001572:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001576:	f040 80a7 	bne.w	80016c8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800157a:	2300      	movs	r3, #0
 800157c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f003 faad 	bl	8004ae2 <USB_ReadDevAllOutEpInterrupt>
 8001588:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800158a:	e099      	b.n	80016c0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800158c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b00      	cmp	r3, #0
 8001594:	f000 808e 	beq.w	80016b4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	4611      	mov	r1, r2
 80015a2:	4618      	mov	r0, r3
 80015a4:	f003 fad1 	bl	8004b4a <USB_ReadDevOutEPInterrupt>
 80015a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d00c      	beq.n	80015ce <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	015a      	lsls	r2, r3, #5
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	4413      	add	r3, r2
 80015bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015c0:	461a      	mov	r2, r3
 80015c2:	2301      	movs	r3, #1
 80015c4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80015c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f000 fec3 	bl	8002354 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	f003 0308 	and.w	r3, r3, #8
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d00c      	beq.n	80015f2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	015a      	lsls	r2, r3, #5
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	4413      	add	r3, r2
 80015e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015e4:	461a      	mov	r2, r3
 80015e6:	2308      	movs	r3, #8
 80015e8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80015ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 ff99 	bl	8002524 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	f003 0310 	and.w	r3, r3, #16
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d008      	beq.n	800160e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80015fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fe:	015a      	lsls	r2, r3, #5
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	4413      	add	r3, r2
 8001604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001608:	461a      	mov	r2, r3
 800160a:	2310      	movs	r3, #16
 800160c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d030      	beq.n	800167a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001618:	6a3b      	ldr	r3, [r7, #32]
 800161a:	695b      	ldr	r3, [r3, #20]
 800161c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001620:	2b80      	cmp	r3, #128	; 0x80
 8001622:	d109      	bne.n	8001638 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	69fa      	ldr	r2, [r7, #28]
 800162e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001632:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001636:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800163a:	4613      	mov	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	4413      	add	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	3304      	adds	r3, #4
 800164c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	78db      	ldrb	r3, [r3, #3]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d108      	bne.n	8001668 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	2200      	movs	r2, #0
 800165a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	b2db      	uxtb	r3, r3
 8001660:	4619      	mov	r1, r3
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f005 fe54 	bl	8007310 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	015a      	lsls	r2, r3, #5
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	4413      	add	r3, r2
 8001670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001674:	461a      	mov	r2, r3
 8001676:	2302      	movs	r3, #2
 8001678:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	f003 0320 	and.w	r3, r3, #32
 8001680:	2b00      	cmp	r3, #0
 8001682:	d008      	beq.n	8001696 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	015a      	lsls	r2, r3, #5
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	4413      	add	r3, r2
 800168c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001690:	461a      	mov	r2, r3
 8001692:	2320      	movs	r3, #32
 8001694:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d009      	beq.n	80016b4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80016a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a2:	015a      	lsls	r2, r3, #5
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	4413      	add	r3, r2
 80016a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016ac:	461a      	mov	r2, r3
 80016ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016b2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	3301      	adds	r3, #1
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016bc:	085b      	lsrs	r3, r3, #1
 80016be:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f47f af62 	bne.w	800158c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f003 f9f5 	bl	8004abc <USB_ReadInterrupts>
 80016d2:	4603      	mov	r3, r0
 80016d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80016dc:	f040 80db 	bne.w	8001896 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f003 fa16 	bl	8004b16 <USB_ReadDevAllInEpInterrupt>
 80016ea:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80016f0:	e0cd      	b.n	800188e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80016f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 80c2 	beq.w	8001882 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	4611      	mov	r1, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f003 fa3c 	bl	8004b86 <USB_ReadDevInEPInterrupt>
 800170e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d057      	beq.n	80017ca <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	f003 030f 	and.w	r3, r3, #15
 8001720:	2201      	movs	r2, #1
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800172e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	43db      	mvns	r3, r3
 8001734:	69f9      	ldr	r1, [r7, #28]
 8001736:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800173a:	4013      	ands	r3, r2
 800173c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	015a      	lsls	r2, r3, #5
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	4413      	add	r3, r2
 8001746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800174a:	461a      	mov	r2, r3
 800174c:	2301      	movs	r3, #1
 800174e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d132      	bne.n	80017be <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800175c:	4613      	mov	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	4413      	add	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	334c      	adds	r3, #76	; 0x4c
 8001768:	6819      	ldr	r1, [r3, #0]
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800176e:	4613      	mov	r3, r2
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	4413      	add	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4403      	add	r3, r0
 8001778:	3348      	adds	r3, #72	; 0x48
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4419      	add	r1, r3
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001782:	4613      	mov	r3, r2
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	4413      	add	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4403      	add	r3, r0
 800178c:	334c      	adds	r3, #76	; 0x4c
 800178e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	2b00      	cmp	r3, #0
 8001794:	d113      	bne.n	80017be <HAL_PCD_IRQHandler+0x3a2>
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800179a:	4613      	mov	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	4413      	add	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	440b      	add	r3, r1
 80017a4:	3354      	adds	r3, #84	; 0x54
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d108      	bne.n	80017be <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6818      	ldr	r0, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80017b6:	461a      	mov	r2, r3
 80017b8:	2101      	movs	r1, #1
 80017ba:	f003 fa43 	bl	8004c44 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	4619      	mov	r1, r3
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f005 fd1e 	bl	8007206 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d008      	beq.n	80017e6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d6:	015a      	lsls	r2, r3, #5
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	4413      	add	r3, r2
 80017dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017e0:	461a      	mov	r2, r3
 80017e2:	2308      	movs	r3, #8
 80017e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	f003 0310 	and.w	r3, r3, #16
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d008      	beq.n	8001802 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	015a      	lsls	r2, r3, #5
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	4413      	add	r3, r2
 80017f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017fc:	461a      	mov	r2, r3
 80017fe:	2310      	movs	r3, #16
 8001800:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001808:	2b00      	cmp	r3, #0
 800180a:	d008      	beq.n	800181e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	015a      	lsls	r2, r3, #5
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	4413      	add	r3, r2
 8001814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001818:	461a      	mov	r2, r3
 800181a:	2340      	movs	r3, #64	; 0x40
 800181c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d023      	beq.n	8001870 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001828:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800182a:	6a38      	ldr	r0, [r7, #32]
 800182c:	f002 f924 	bl	8003a78 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001832:	4613      	mov	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	4413      	add	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	3338      	adds	r3, #56	; 0x38
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	4413      	add	r3, r2
 8001840:	3304      	adds	r3, #4
 8001842:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	78db      	ldrb	r3, [r3, #3]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d108      	bne.n	800185e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	2200      	movs	r2, #0
 8001850:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	b2db      	uxtb	r3, r3
 8001856:	4619      	mov	r1, r3
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f005 fd6b 	bl	8007334 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	015a      	lsls	r2, r3, #5
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	4413      	add	r3, r2
 8001866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800186a:	461a      	mov	r2, r3
 800186c:	2302      	movs	r3, #2
 800186e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800187a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 fcdb 	bl	8002238 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	3301      	adds	r3, #1
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800188a:	085b      	lsrs	r3, r3, #1
 800188c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800188e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001890:	2b00      	cmp	r3, #0
 8001892:	f47f af2e 	bne.w	80016f2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f003 f90e 	bl	8004abc <USB_ReadInterrupts>
 80018a0:	4603      	mov	r3, r0
 80018a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80018a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80018aa:	d122      	bne.n	80018f2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	69fa      	ldr	r2, [r7, #28]
 80018b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018ba:	f023 0301 	bic.w	r3, r3, #1
 80018be:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d108      	bne.n	80018dc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80018d2:	2100      	movs	r1, #0
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 fec3 	bl	8002660 <HAL_PCDEx_LPM_Callback>
 80018da:	e002      	b.n	80018e2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f005 fd09 	bl	80072f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	695a      	ldr	r2, [r3, #20]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80018f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f003 f8e0 	bl	8004abc <USB_ReadInterrupts>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001902:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001906:	d112      	bne.n	800192e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b01      	cmp	r3, #1
 8001916:	d102      	bne.n	800191e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f005 fcc5 	bl	80072a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	695a      	ldr	r2, [r3, #20]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800192c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f003 f8c2 	bl	8004abc <USB_ReadInterrupts>
 8001938:	4603      	mov	r3, r0
 800193a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800193e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001942:	f040 80b7 	bne.w	8001ab4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001954:	f023 0301 	bic.w	r3, r3, #1
 8001958:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2110      	movs	r1, #16
 8001960:	4618      	mov	r0, r3
 8001962:	f002 f889 	bl	8003a78 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001966:	2300      	movs	r3, #0
 8001968:	62fb      	str	r3, [r7, #44]	; 0x2c
 800196a:	e046      	b.n	80019fa <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800196c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800196e:	015a      	lsls	r2, r3, #5
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	4413      	add	r3, r2
 8001974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001978:	461a      	mov	r2, r3
 800197a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800197e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001982:	015a      	lsls	r2, r3, #5
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	4413      	add	r3, r2
 8001988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001990:	0151      	lsls	r1, r2, #5
 8001992:	69fa      	ldr	r2, [r7, #28]
 8001994:	440a      	add	r2, r1
 8001996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800199a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800199e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80019a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a2:	015a      	lsls	r2, r3, #5
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	4413      	add	r3, r2
 80019a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019ac:	461a      	mov	r2, r3
 80019ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80019b2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80019b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b6:	015a      	lsls	r2, r3, #5
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	4413      	add	r3, r2
 80019bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019c4:	0151      	lsls	r1, r2, #5
 80019c6:	69fa      	ldr	r2, [r7, #28]
 80019c8:	440a      	add	r2, r1
 80019ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80019ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019d2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80019d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d6:	015a      	lsls	r2, r3, #5
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	4413      	add	r3, r2
 80019dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019e4:	0151      	lsls	r1, r2, #5
 80019e6:	69fa      	ldr	r2, [r7, #28]
 80019e8:	440a      	add	r2, r1
 80019ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80019ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80019f2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f6:	3301      	adds	r3, #1
 80019f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d3b3      	bcc.n	800196c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	69fa      	ldr	r2, [r7, #28]
 8001a0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a12:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001a16:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d016      	beq.n	8001a4e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a2a:	69fa      	ldr	r2, [r7, #28]
 8001a2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a30:	f043 030b 	orr.w	r3, r3, #11
 8001a34:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a46:	f043 030b 	orr.w	r3, r3, #11
 8001a4a:	6453      	str	r3, [r2, #68]	; 0x44
 8001a4c:	e015      	b.n	8001a7a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	69fa      	ldr	r2, [r7, #28]
 8001a58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a60:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001a64:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	69fa      	ldr	r2, [r7, #28]
 8001a70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a74:	f043 030b 	orr.w	r3, r3, #11
 8001a78:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	69fa      	ldr	r2, [r7, #28]
 8001a84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a88:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001a8c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6818      	ldr	r0, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	f003 f8d0 	bl	8004c44 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	695a      	ldr	r2, [r3, #20]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001ab2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f002 ffff 	bl	8004abc <USB_ReadInterrupts>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ac8:	d124      	bne.n	8001b14 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 f895 	bl	8004bfe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f002 f84a 	bl	8003b72 <USB_GetDevSpeed>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681c      	ldr	r4, [r3, #0]
 8001aea:	f001 fa29 	bl	8002f40 <HAL_RCC_GetHCLKFreq>
 8001aee:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	461a      	mov	r2, r3
 8001af8:	4620      	mov	r0, r4
 8001afa:	f001 fd49 	bl	8003590 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f005 fba9 	bl	8007256 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	695a      	ldr	r2, [r3, #20]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001b12:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f002 ffcf 	bl	8004abc <USB_ReadInterrupts>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	d10a      	bne.n	8001b3e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f005 fb86 	bl	800723a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	695a      	ldr	r2, [r3, #20]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f002 0208 	and.w	r2, r2, #8
 8001b3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f002 ffba 	bl	8004abc <USB_ReadInterrupts>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b4e:	2b80      	cmp	r3, #128	; 0x80
 8001b50:	d122      	bne.n	8001b98 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001b52:	6a3b      	ldr	r3, [r7, #32]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b5e:	2301      	movs	r3, #1
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
 8001b62:	e014      	b.n	8001b8e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b68:	4613      	mov	r3, r2
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	4413      	add	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d105      	bne.n	8001b88 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	4619      	mov	r1, r3
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 fb27 	bl	80021d6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d3e5      	bcc.n	8001b64 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f002 ff8d 	bl	8004abc <USB_ReadInterrupts>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ba8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001bac:	d13b      	bne.n	8001c26 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bae:	2301      	movs	r3, #1
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb2:	e02b      	b.n	8001c0c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	015a      	lsls	r2, r3, #5
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	4413      	add	r3, r2
 8001bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bc4:	6879      	ldr	r1, [r7, #4]
 8001bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc8:	4613      	mov	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4413      	add	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	3340      	adds	r3, #64	; 0x40
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d115      	bne.n	8001c06 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001bda:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	da12      	bge.n	8001c06 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001be4:	4613      	mov	r3, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4413      	add	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	333f      	adds	r3, #63	; 0x3f
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	4619      	mov	r1, r3
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 fae8 	bl	80021d6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	3301      	adds	r3, #1
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d3ce      	bcc.n	8001bb4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	695a      	ldr	r2, [r3, #20]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001c24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f002 ff46 	bl	8004abc <USB_ReadInterrupts>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c3a:	d155      	bne.n	8001ce8 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c40:	e045      	b.n	8001cce <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	015a      	lsls	r2, r3, #5
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	4413      	add	r3, r2
 8001c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c56:	4613      	mov	r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	4413      	add	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	440b      	add	r3, r1
 8001c60:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d12e      	bne.n	8001cc8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c6a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	da2b      	bge.n	8001cc8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001c7c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d121      	bne.n	8001cc8 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c88:	4613      	mov	r3, r2
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	4413      	add	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	440b      	add	r3, r1
 8001c92:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001c96:	2201      	movs	r2, #1
 8001c98:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001c9a:	6a3b      	ldr	r3, [r7, #32]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001ca2:	6a3b      	ldr	r3, [r7, #32]
 8001ca4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10a      	bne.n	8001cc8 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	69fa      	ldr	r2, [r7, #28]
 8001cbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cc4:	6053      	str	r3, [r2, #4]
            break;
 8001cc6:	e007      	b.n	8001cd8 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cca:	3301      	adds	r3, #1
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d3b4      	bcc.n	8001c42 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	695a      	ldr	r2, [r3, #20]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001ce6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f002 fee5 	bl	8004abc <USB_ReadInterrupts>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cfc:	d10a      	bne.n	8001d14 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f005 fb2a 	bl	8007358 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	695a      	ldr	r2, [r3, #20]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001d12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f002 fecf 	bl	8004abc <USB_ReadInterrupts>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d115      	bne.n	8001d54 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	f003 0304 	and.w	r3, r3, #4
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d002      	beq.n	8001d40 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f005 fb1a 	bl	8007374 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6859      	ldr	r1, [r3, #4]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	e000      	b.n	8001d54 <HAL_PCD_IRQHandler+0x938>
      return;
 8001d52:	bf00      	nop
    }
  }
}
 8001d54:	3734      	adds	r7, #52	; 0x34
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd90      	pop	{r4, r7, pc}

08001d5a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	460b      	mov	r3, r1
 8001d64:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d101      	bne.n	8001d74 <HAL_PCD_SetAddress+0x1a>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e013      	b.n	8001d9c <HAL_PCD_SetAddress+0x42>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	78fa      	ldrb	r2, [r7, #3]
 8001d80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	78fa      	ldrb	r2, [r7, #3]
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f002 fe2d 	bl	80049ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	4608      	mov	r0, r1
 8001dae:	4611      	mov	r1, r2
 8001db0:	461a      	mov	r2, r3
 8001db2:	4603      	mov	r3, r0
 8001db4:	70fb      	strb	r3, [r7, #3]
 8001db6:	460b      	mov	r3, r1
 8001db8:	803b      	strh	r3, [r7, #0]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	da0f      	bge.n	8001dea <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dca:	78fb      	ldrb	r3, [r7, #3]
 8001dcc:	f003 020f 	and.w	r2, r3, #15
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	3338      	adds	r3, #56	; 0x38
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	3304      	adds	r3, #4
 8001de0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2201      	movs	r2, #1
 8001de6:	705a      	strb	r2, [r3, #1]
 8001de8:	e00f      	b.n	8001e0a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dea:	78fb      	ldrb	r3, [r7, #3]
 8001dec:	f003 020f 	and.w	r2, r3, #15
 8001df0:	4613      	mov	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4413      	add	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	4413      	add	r3, r2
 8001e00:	3304      	adds	r3, #4
 8001e02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	f003 030f 	and.w	r3, r3, #15
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e16:	883a      	ldrh	r2, [r7, #0]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	78ba      	ldrb	r2, [r7, #2]
 8001e20:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	785b      	ldrb	r3, [r3, #1]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d004      	beq.n	8001e34 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e34:	78bb      	ldrb	r3, [r7, #2]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d102      	bne.n	8001e40 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <HAL_PCD_EP_Open+0xaa>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e00e      	b.n	8001e6c <HAL_PCD_EP_Open+0xc8>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68f9      	ldr	r1, [r7, #12]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f001 fead 	bl	8003bbc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001e6a:	7afb      	ldrb	r3, [r7, #11]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	da0f      	bge.n	8001ea8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e88:	78fb      	ldrb	r3, [r7, #3]
 8001e8a:	f003 020f 	and.w	r2, r3, #15
 8001e8e:	4613      	mov	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	4413      	add	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	3338      	adds	r3, #56	; 0x38
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	705a      	strb	r2, [r3, #1]
 8001ea6:	e00f      	b.n	8001ec8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ea8:	78fb      	ldrb	r3, [r7, #3]
 8001eaa:	f003 020f 	and.w	r2, r3, #15
 8001eae:	4613      	mov	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	3304      	adds	r3, #4
 8001ec0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d101      	bne.n	8001ee2 <HAL_PCD_EP_Close+0x6e>
 8001ede:	2302      	movs	r3, #2
 8001ee0:	e00e      	b.n	8001f00 <HAL_PCD_EP_Close+0x8c>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68f9      	ldr	r1, [r7, #12]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f001 feeb 	bl	8003ccc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	603b      	str	r3, [r7, #0]
 8001f14:	460b      	mov	r3, r1
 8001f16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f18:	7afb      	ldrb	r3, [r7, #11]
 8001f1a:	f003 020f 	and.w	r2, r3, #15
 8001f1e:	4613      	mov	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	4413      	add	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3304      	adds	r3, #4
 8001f30:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	2200      	movs	r2, #0
 8001f42:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	2200      	movs	r2, #0
 8001f48:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f4a:	7afb      	ldrb	r3, [r7, #11]
 8001f4c:	f003 030f 	and.w	r3, r3, #15
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d102      	bne.n	8001f64 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f64:	7afb      	ldrb	r3, [r7, #11]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d109      	bne.n	8001f82 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6818      	ldr	r0, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	6979      	ldr	r1, [r7, #20]
 8001f7c:	f002 f9ca 	bl	8004314 <USB_EP0StartXfer>
 8001f80:	e008      	b.n	8001f94 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6818      	ldr	r0, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	6979      	ldr	r1, [r7, #20]
 8001f90:	f001 ff78 	bl	8003e84 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001faa:	78fb      	ldrb	r3, [r7, #3]
 8001fac:	f003 020f 	and.w	r2, r3, #15
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	440b      	add	r3, r1
 8001fbc:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001fc0:	681b      	ldr	r3, [r3, #0]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b086      	sub	sp, #24
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	607a      	str	r2, [r7, #4]
 8001fd8:	603b      	str	r3, [r7, #0]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fde:	7afb      	ldrb	r3, [r7, #11]
 8001fe0:	f003 020f 	and.w	r2, r3, #15
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4413      	add	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	3338      	adds	r3, #56	; 0x38
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	2200      	movs	r2, #0
 8002006:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2201      	movs	r2, #1
 800200c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800200e:	7afb      	ldrb	r3, [r7, #11]
 8002010:	f003 030f 	and.w	r3, r3, #15
 8002014:	b2da      	uxtb	r2, r3
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d102      	bne.n	8002028 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002028:	7afb      	ldrb	r3, [r7, #11]
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	2b00      	cmp	r3, #0
 8002030:	d109      	bne.n	8002046 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6818      	ldr	r0, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	b2db      	uxtb	r3, r3
 800203c:	461a      	mov	r2, r3
 800203e:	6979      	ldr	r1, [r7, #20]
 8002040:	f002 f968 	bl	8004314 <USB_EP0StartXfer>
 8002044:	e008      	b.n	8002058 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6818      	ldr	r0, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	b2db      	uxtb	r3, r3
 8002050:	461a      	mov	r2, r3
 8002052:	6979      	ldr	r1, [r7, #20]
 8002054:	f001 ff16 	bl	8003e84 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b084      	sub	sp, #16
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	460b      	mov	r3, r1
 800206c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	f003 020f 	and.w	r2, r3, #15
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	429a      	cmp	r2, r3
 800207a:	d901      	bls.n	8002080 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e050      	b.n	8002122 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002080:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002084:	2b00      	cmp	r3, #0
 8002086:	da0f      	bge.n	80020a8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002088:	78fb      	ldrb	r3, [r7, #3]
 800208a:	f003 020f 	and.w	r2, r3, #15
 800208e:	4613      	mov	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	4413      	add	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	3338      	adds	r3, #56	; 0x38
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	4413      	add	r3, r2
 800209c:	3304      	adds	r3, #4
 800209e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2201      	movs	r2, #1
 80020a4:	705a      	strb	r2, [r3, #1]
 80020a6:	e00d      	b.n	80020c4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020a8:	78fa      	ldrb	r2, [r7, #3]
 80020aa:	4613      	mov	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4413      	add	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	3304      	adds	r3, #4
 80020bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2201      	movs	r2, #1
 80020c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020ca:	78fb      	ldrb	r3, [r7, #3]
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <HAL_PCD_EP_SetStall+0x82>
 80020e0:	2302      	movs	r3, #2
 80020e2:	e01e      	b.n	8002122 <HAL_PCD_EP_SetStall+0xc0>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68f9      	ldr	r1, [r7, #12]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f002 fba6 	bl	8004844 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10a      	bne.n	8002118 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6818      	ldr	r0, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	b2d9      	uxtb	r1, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002112:	461a      	mov	r2, r3
 8002114:	f002 fd96 	bl	8004c44 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b084      	sub	sp, #16
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	460b      	mov	r3, r1
 8002134:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002136:	78fb      	ldrb	r3, [r7, #3]
 8002138:	f003 020f 	and.w	r2, r3, #15
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	429a      	cmp	r2, r3
 8002142:	d901      	bls.n	8002148 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e042      	b.n	80021ce <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002148:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800214c:	2b00      	cmp	r3, #0
 800214e:	da0f      	bge.n	8002170 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002150:	78fb      	ldrb	r3, [r7, #3]
 8002152:	f003 020f 	and.w	r2, r3, #15
 8002156:	4613      	mov	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	4413      	add	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	3338      	adds	r3, #56	; 0x38
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	4413      	add	r3, r2
 8002164:	3304      	adds	r3, #4
 8002166:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2201      	movs	r2, #1
 800216c:	705a      	strb	r2, [r3, #1]
 800216e:	e00f      	b.n	8002190 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002170:	78fb      	ldrb	r3, [r7, #3]
 8002172:	f003 020f 	and.w	r2, r3, #15
 8002176:	4613      	mov	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	4413      	add	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	4413      	add	r3, r2
 8002186:	3304      	adds	r3, #4
 8002188:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002196:	78fb      	ldrb	r3, [r7, #3]
 8002198:	f003 030f 	and.w	r3, r3, #15
 800219c:	b2da      	uxtb	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <HAL_PCD_EP_ClrStall+0x86>
 80021ac:	2302      	movs	r3, #2
 80021ae:	e00e      	b.n	80021ce <HAL_PCD_EP_ClrStall+0xa4>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68f9      	ldr	r1, [r7, #12]
 80021be:	4618      	mov	r0, r3
 80021c0:	f002 fbae 	bl	8004920 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b084      	sub	sp, #16
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	460b      	mov	r3, r1
 80021e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80021e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	da0c      	bge.n	8002204 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021ea:	78fb      	ldrb	r3, [r7, #3]
 80021ec:	f003 020f 	and.w	r2, r3, #15
 80021f0:	4613      	mov	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	3338      	adds	r3, #56	; 0x38
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	4413      	add	r3, r2
 80021fe:	3304      	adds	r3, #4
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	e00c      	b.n	800221e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002204:	78fb      	ldrb	r3, [r7, #3]
 8002206:	f003 020f 	and.w	r2, r3, #15
 800220a:	4613      	mov	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	4413      	add	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	4413      	add	r3, r2
 800221a:	3304      	adds	r3, #4
 800221c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68f9      	ldr	r1, [r7, #12]
 8002224:	4618      	mov	r0, r3
 8002226:	f002 f9cd 	bl	80045c4 <USB_EPStopXfer>
 800222a:	4603      	mov	r3, r0
 800222c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800222e:	7afb      	ldrb	r3, [r7, #11]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08a      	sub	sp, #40	; 0x28
 800223c:	af02      	add	r7, sp, #8
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	4613      	mov	r3, r2
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	4413      	add	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	3338      	adds	r3, #56	; 0x38
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	4413      	add	r3, r2
 800225c:	3304      	adds	r3, #4
 800225e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6a1a      	ldr	r2, [r3, #32]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	429a      	cmp	r2, r3
 800226a:	d901      	bls.n	8002270 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e06c      	b.n	800234a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	699a      	ldr	r2, [r3, #24]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	69fa      	ldr	r2, [r7, #28]
 8002282:	429a      	cmp	r2, r3
 8002284:	d902      	bls.n	800228c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	3303      	adds	r3, #3
 8002290:	089b      	lsrs	r3, r3, #2
 8002292:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002294:	e02b      	b.n	80022ee <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	699a      	ldr	r2, [r3, #24]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	69fa      	ldr	r2, [r7, #28]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d902      	bls.n	80022b2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3303      	adds	r3, #3
 80022b6:	089b      	lsrs	r3, r3, #2
 80022b8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6919      	ldr	r1, [r3, #16]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	4603      	mov	r3, r0
 80022d0:	6978      	ldr	r0, [r7, #20]
 80022d2:	f002 fa21 	bl	8004718 <USB_WritePacket>

    ep->xfer_buff  += len;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	691a      	ldr	r2, [r3, #16]
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	441a      	add	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6a1a      	ldr	r2, [r3, #32]
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	441a      	add	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	015a      	lsls	r2, r3, #5
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	429a      	cmp	r2, r3
 8002302:	d809      	bhi.n	8002318 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6a1a      	ldr	r2, [r3, #32]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800230c:	429a      	cmp	r2, r3
 800230e:	d203      	bcs.n	8002318 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1be      	bne.n	8002296 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	699a      	ldr	r2, [r3, #24]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	429a      	cmp	r2, r3
 8002322:	d811      	bhi.n	8002348 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	2201      	movs	r2, #1
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	43db      	mvns	r3, r3
 800233e:	6939      	ldr	r1, [r7, #16]
 8002340:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002344:	4013      	ands	r3, r2
 8002346:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3720      	adds	r7, #32
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b088      	sub	sp, #32
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	333c      	adds	r3, #60	; 0x3c
 800236c:	3304      	adds	r3, #4
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	015a      	lsls	r2, r3, #5
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	4413      	add	r3, r2
 800237a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d17b      	bne.n	8002482 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	f003 0308 	and.w	r3, r3, #8
 8002390:	2b00      	cmp	r3, #0
 8002392:	d015      	beq.n	80023c0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	4a61      	ldr	r2, [pc, #388]	; (800251c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	f240 80b9 	bls.w	8002510 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 80b3 	beq.w	8002510 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	015a      	lsls	r2, r3, #5
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b6:	461a      	mov	r2, r3
 80023b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023bc:	6093      	str	r3, [r2, #8]
 80023be:	e0a7      	b.n	8002510 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	f003 0320 	and.w	r3, r3, #32
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d009      	beq.n	80023de <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	015a      	lsls	r2, r3, #5
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	4413      	add	r3, r2
 80023d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d6:	461a      	mov	r2, r3
 80023d8:	2320      	movs	r3, #32
 80023da:	6093      	str	r3, [r2, #8]
 80023dc:	e098      	b.n	8002510 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f040 8093 	bne.w	8002510 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	4a4b      	ldr	r2, [pc, #300]	; (800251c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d90f      	bls.n	8002412 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00a      	beq.n	8002412 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	015a      	lsls	r2, r3, #5
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	4413      	add	r3, r2
 8002404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002408:	461a      	mov	r2, r3
 800240a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800240e:	6093      	str	r3, [r2, #8]
 8002410:	e07e      	b.n	8002510 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	4613      	mov	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	4413      	add	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	4413      	add	r3, r2
 8002424:	3304      	adds	r3, #4
 8002426:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	69da      	ldr	r2, [r3, #28]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	0159      	lsls	r1, r3, #5
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	440b      	add	r3, r1
 8002434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800243e:	1ad2      	subs	r2, r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d114      	bne.n	8002474 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d109      	bne.n	8002466 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6818      	ldr	r0, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800245c:	461a      	mov	r2, r3
 800245e:	2101      	movs	r1, #1
 8002460:	f002 fbf0 	bl	8004c44 <USB_EP0_OutStart>
 8002464:	e006      	b.n	8002474 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	691a      	ldr	r2, [r3, #16]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	441a      	add	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	b2db      	uxtb	r3, r3
 8002478:	4619      	mov	r1, r3
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f004 fea8 	bl	80071d0 <HAL_PCD_DataOutStageCallback>
 8002480:	e046      	b.n	8002510 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	4a26      	ldr	r2, [pc, #152]	; (8002520 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d124      	bne.n	80024d4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00a      	beq.n	80024aa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	015a      	lsls	r2, r3, #5
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	4413      	add	r3, r2
 800249c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024a0:	461a      	mov	r2, r3
 80024a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024a6:	6093      	str	r3, [r2, #8]
 80024a8:	e032      	b.n	8002510 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	f003 0320 	and.w	r3, r3, #32
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d008      	beq.n	80024c6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	015a      	lsls	r2, r3, #5
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	4413      	add	r3, r2
 80024bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024c0:	461a      	mov	r2, r3
 80024c2:	2320      	movs	r3, #32
 80024c4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	4619      	mov	r1, r3
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f004 fe7f 	bl	80071d0 <HAL_PCD_DataOutStageCallback>
 80024d2:	e01d      	b.n	8002510 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d114      	bne.n	8002504 <PCD_EP_OutXfrComplete_int+0x1b0>
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	4613      	mov	r3, r2
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4413      	add	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	440b      	add	r3, r1
 80024e8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d108      	bne.n	8002504 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6818      	ldr	r0, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024fc:	461a      	mov	r2, r3
 80024fe:	2100      	movs	r1, #0
 8002500:	f002 fba0 	bl	8004c44 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	b2db      	uxtb	r3, r3
 8002508:	4619      	mov	r1, r3
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f004 fe60 	bl	80071d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3720      	adds	r7, #32
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	4f54300a 	.word	0x4f54300a
 8002520:	4f54310a 	.word	0x4f54310a

08002524 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	333c      	adds	r3, #60	; 0x3c
 800253c:	3304      	adds	r3, #4
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	015a      	lsls	r2, r3, #5
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4413      	add	r3, r2
 800254a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4a15      	ldr	r2, [pc, #84]	; (80025ac <PCD_EP_OutSetupPacket_int+0x88>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d90e      	bls.n	8002578 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002560:	2b00      	cmp	r3, #0
 8002562:	d009      	beq.n	8002578 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	015a      	lsls	r2, r3, #5
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	4413      	add	r3, r2
 800256c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002570:	461a      	mov	r2, r3
 8002572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002576:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f004 fe17 	bl	80071ac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	4a0a      	ldr	r2, [pc, #40]	; (80025ac <PCD_EP_OutSetupPacket_int+0x88>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d90c      	bls.n	80025a0 <PCD_EP_OutSetupPacket_int+0x7c>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d108      	bne.n	80025a0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002598:	461a      	mov	r2, r3
 800259a:	2101      	movs	r1, #1
 800259c:	f002 fb52 	bl	8004c44 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	4f54300a 	.word	0x4f54300a

080025b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	70fb      	strb	r3, [r7, #3]
 80025bc:	4613      	mov	r3, r2
 80025be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d107      	bne.n	80025de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80025ce:	883b      	ldrh	r3, [r7, #0]
 80025d0:	0419      	lsls	r1, r3, #16
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	430a      	orrs	r2, r1
 80025da:	629a      	str	r2, [r3, #40]	; 0x28
 80025dc:	e028      	b.n	8002630 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e4:	0c1b      	lsrs	r3, r3, #16
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	4413      	add	r3, r2
 80025ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025ec:	2300      	movs	r3, #0
 80025ee:	73fb      	strb	r3, [r7, #15]
 80025f0:	e00d      	b.n	800260e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
 80025f8:	3340      	adds	r3, #64	; 0x40
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	0c1b      	lsrs	r3, r3, #16
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	4413      	add	r3, r2
 8002606:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	3301      	adds	r3, #1
 800260c:	73fb      	strb	r3, [r7, #15]
 800260e:	7bfa      	ldrb	r2, [r7, #15]
 8002610:	78fb      	ldrb	r3, [r7, #3]
 8002612:	3b01      	subs	r3, #1
 8002614:	429a      	cmp	r2, r3
 8002616:	d3ec      	bcc.n	80025f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002618:	883b      	ldrh	r3, [r7, #0]
 800261a:	0418      	lsls	r0, r3, #16
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6819      	ldr	r1, [r3, #0]
 8002620:	78fb      	ldrb	r3, [r7, #3]
 8002622:	3b01      	subs	r3, #1
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	4302      	orrs	r2, r0
 8002628:	3340      	adds	r3, #64	; 0x40
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
 8002646:	460b      	mov	r3, r1
 8002648:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	887a      	ldrh	r2, [r7, #2]
 8002650:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e267      	b.n	8002b5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d075      	beq.n	8002782 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002696:	4b88      	ldr	r3, [pc, #544]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 030c 	and.w	r3, r3, #12
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d00c      	beq.n	80026bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026a2:	4b85      	ldr	r3, [pc, #532]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d112      	bne.n	80026d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ae:	4b82      	ldr	r3, [pc, #520]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ba:	d10b      	bne.n	80026d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026bc:	4b7e      	ldr	r3, [pc, #504]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d05b      	beq.n	8002780 <HAL_RCC_OscConfig+0x108>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d157      	bne.n	8002780 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e242      	b.n	8002b5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026dc:	d106      	bne.n	80026ec <HAL_RCC_OscConfig+0x74>
 80026de:	4b76      	ldr	r3, [pc, #472]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a75      	ldr	r2, [pc, #468]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 80026e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	e01d      	b.n	8002728 <HAL_RCC_OscConfig+0xb0>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026f4:	d10c      	bne.n	8002710 <HAL_RCC_OscConfig+0x98>
 80026f6:	4b70      	ldr	r3, [pc, #448]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a6f      	ldr	r2, [pc, #444]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 80026fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	4b6d      	ldr	r3, [pc, #436]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a6c      	ldr	r2, [pc, #432]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 8002708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	e00b      	b.n	8002728 <HAL_RCC_OscConfig+0xb0>
 8002710:	4b69      	ldr	r3, [pc, #420]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a68      	ldr	r2, [pc, #416]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 8002716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	4b66      	ldr	r3, [pc, #408]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a65      	ldr	r2, [pc, #404]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 8002722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002726:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d013      	beq.n	8002758 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002730:	f7fe f9fc 	bl	8000b2c <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002738:	f7fe f9f8 	bl	8000b2c <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b64      	cmp	r3, #100	; 0x64
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e207      	b.n	8002b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274a:	4b5b      	ldr	r3, [pc, #364]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0xc0>
 8002756:	e014      	b.n	8002782 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002758:	f7fe f9e8 	bl	8000b2c <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002760:	f7fe f9e4 	bl	8000b2c <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b64      	cmp	r3, #100	; 0x64
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e1f3      	b.n	8002b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002772:	4b51      	ldr	r3, [pc, #324]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f0      	bne.n	8002760 <HAL_RCC_OscConfig+0xe8>
 800277e:	e000      	b.n	8002782 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d063      	beq.n	8002856 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800278e:	4b4a      	ldr	r3, [pc, #296]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 030c 	and.w	r3, r3, #12
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00b      	beq.n	80027b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800279a:	4b47      	ldr	r3, [pc, #284]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d11c      	bne.n	80027e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027a6:	4b44      	ldr	r3, [pc, #272]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d116      	bne.n	80027e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b2:	4b41      	ldr	r3, [pc, #260]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d005      	beq.n	80027ca <HAL_RCC_OscConfig+0x152>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d001      	beq.n	80027ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e1c7      	b.n	8002b5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ca:	4b3b      	ldr	r3, [pc, #236]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	4937      	ldr	r1, [pc, #220]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027de:	e03a      	b.n	8002856 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d020      	beq.n	800282a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027e8:	4b34      	ldr	r3, [pc, #208]	; (80028bc <HAL_RCC_OscConfig+0x244>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ee:	f7fe f99d 	bl	8000b2c <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027f6:	f7fe f999 	bl	8000b2c <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e1a8      	b.n	8002b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002808:	4b2b      	ldr	r3, [pc, #172]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0f0      	beq.n	80027f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002814:	4b28      	ldr	r3, [pc, #160]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4925      	ldr	r1, [pc, #148]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 8002824:	4313      	orrs	r3, r2
 8002826:	600b      	str	r3, [r1, #0]
 8002828:	e015      	b.n	8002856 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800282a:	4b24      	ldr	r3, [pc, #144]	; (80028bc <HAL_RCC_OscConfig+0x244>)
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002830:	f7fe f97c 	bl	8000b2c <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002838:	f7fe f978 	bl	8000b2c <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e187      	b.n	8002b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800284a:	4b1b      	ldr	r3, [pc, #108]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1f0      	bne.n	8002838 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0308 	and.w	r3, r3, #8
 800285e:	2b00      	cmp	r3, #0
 8002860:	d036      	beq.n	80028d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d016      	beq.n	8002898 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800286a:	4b15      	ldr	r3, [pc, #84]	; (80028c0 <HAL_RCC_OscConfig+0x248>)
 800286c:	2201      	movs	r2, #1
 800286e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002870:	f7fe f95c 	bl	8000b2c <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002878:	f7fe f958 	bl	8000b2c <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e167      	b.n	8002b5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800288a:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <HAL_RCC_OscConfig+0x240>)
 800288c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCC_OscConfig+0x200>
 8002896:	e01b      	b.n	80028d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002898:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <HAL_RCC_OscConfig+0x248>)
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800289e:	f7fe f945 	bl	8000b2c <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a4:	e00e      	b.n	80028c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028a6:	f7fe f941 	bl	8000b2c <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d907      	bls.n	80028c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e150      	b.n	8002b5a <HAL_RCC_OscConfig+0x4e2>
 80028b8:	40023800 	.word	0x40023800
 80028bc:	42470000 	.word	0x42470000
 80028c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c4:	4b88      	ldr	r3, [pc, #544]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 80028c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1ea      	bne.n	80028a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 8097 	beq.w	8002a0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028de:	2300      	movs	r3, #0
 80028e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e2:	4b81      	ldr	r3, [pc, #516]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10f      	bne.n	800290e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	4b7d      	ldr	r3, [pc, #500]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	4a7c      	ldr	r2, [pc, #496]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 80028f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028fc:	6413      	str	r3, [r2, #64]	; 0x40
 80028fe:	4b7a      	ldr	r3, [pc, #488]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800290a:	2301      	movs	r3, #1
 800290c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290e:	4b77      	ldr	r3, [pc, #476]	; (8002aec <HAL_RCC_OscConfig+0x474>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002916:	2b00      	cmp	r3, #0
 8002918:	d118      	bne.n	800294c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800291a:	4b74      	ldr	r3, [pc, #464]	; (8002aec <HAL_RCC_OscConfig+0x474>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a73      	ldr	r2, [pc, #460]	; (8002aec <HAL_RCC_OscConfig+0x474>)
 8002920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002924:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002926:	f7fe f901 	bl	8000b2c <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800292c:	e008      	b.n	8002940 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292e:	f7fe f8fd 	bl	8000b2c <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e10c      	b.n	8002b5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002940:	4b6a      	ldr	r3, [pc, #424]	; (8002aec <HAL_RCC_OscConfig+0x474>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0f0      	beq.n	800292e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d106      	bne.n	8002962 <HAL_RCC_OscConfig+0x2ea>
 8002954:	4b64      	ldr	r3, [pc, #400]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 8002956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002958:	4a63      	ldr	r2, [pc, #396]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	6713      	str	r3, [r2, #112]	; 0x70
 8002960:	e01c      	b.n	800299c <HAL_RCC_OscConfig+0x324>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	2b05      	cmp	r3, #5
 8002968:	d10c      	bne.n	8002984 <HAL_RCC_OscConfig+0x30c>
 800296a:	4b5f      	ldr	r3, [pc, #380]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 800296c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296e:	4a5e      	ldr	r2, [pc, #376]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 8002970:	f043 0304 	orr.w	r3, r3, #4
 8002974:	6713      	str	r3, [r2, #112]	; 0x70
 8002976:	4b5c      	ldr	r3, [pc, #368]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297a:	4a5b      	ldr	r2, [pc, #364]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	6713      	str	r3, [r2, #112]	; 0x70
 8002982:	e00b      	b.n	800299c <HAL_RCC_OscConfig+0x324>
 8002984:	4b58      	ldr	r3, [pc, #352]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 8002986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002988:	4a57      	ldr	r2, [pc, #348]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 800298a:	f023 0301 	bic.w	r3, r3, #1
 800298e:	6713      	str	r3, [r2, #112]	; 0x70
 8002990:	4b55      	ldr	r3, [pc, #340]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 8002992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002994:	4a54      	ldr	r2, [pc, #336]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 8002996:	f023 0304 	bic.w	r3, r3, #4
 800299a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d015      	beq.n	80029d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a4:	f7fe f8c2 	bl	8000b2c <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029aa:	e00a      	b.n	80029c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ac:	f7fe f8be 	bl	8000b2c <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e0cb      	b.n	8002b5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c2:	4b49      	ldr	r3, [pc, #292]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 80029c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0ee      	beq.n	80029ac <HAL_RCC_OscConfig+0x334>
 80029ce:	e014      	b.n	80029fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d0:	f7fe f8ac 	bl	8000b2c <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d6:	e00a      	b.n	80029ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d8:	f7fe f8a8 	bl	8000b2c <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e0b5      	b.n	8002b5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ee:	4b3e      	ldr	r3, [pc, #248]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 80029f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1ee      	bne.n	80029d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029fa:	7dfb      	ldrb	r3, [r7, #23]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d105      	bne.n	8002a0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a00:	4b39      	ldr	r3, [pc, #228]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	4a38      	ldr	r2, [pc, #224]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 8002a06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 80a1 	beq.w	8002b58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a16:	4b34      	ldr	r3, [pc, #208]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 030c 	and.w	r3, r3, #12
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d05c      	beq.n	8002adc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d141      	bne.n	8002aae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2a:	4b31      	ldr	r3, [pc, #196]	; (8002af0 <HAL_RCC_OscConfig+0x478>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f7fe f87c 	bl	8000b2c <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a38:	f7fe f878 	bl	8000b2c <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e087      	b.n	8002b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4a:	4b27      	ldr	r3, [pc, #156]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	69da      	ldr	r2, [r3, #28]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	019b      	lsls	r3, r3, #6
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6c:	085b      	lsrs	r3, r3, #1
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	041b      	lsls	r3, r3, #16
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a78:	061b      	lsls	r3, r3, #24
 8002a7a:	491b      	ldr	r1, [pc, #108]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a80:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <HAL_RCC_OscConfig+0x478>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a86:	f7fe f851 	bl	8000b2c <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a8e:	f7fe f84d 	bl	8000b2c <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e05c      	b.n	8002b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa0:	4b11      	ldr	r3, [pc, #68]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0f0      	beq.n	8002a8e <HAL_RCC_OscConfig+0x416>
 8002aac:	e054      	b.n	8002b58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aae:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <HAL_RCC_OscConfig+0x478>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab4:	f7fe f83a 	bl	8000b2c <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002abc:	f7fe f836 	bl	8000b2c <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e045      	b.n	8002b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ace:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <HAL_RCC_OscConfig+0x470>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f0      	bne.n	8002abc <HAL_RCC_OscConfig+0x444>
 8002ada:	e03d      	b.n	8002b58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d107      	bne.n	8002af4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e038      	b.n	8002b5a <HAL_RCC_OscConfig+0x4e2>
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	40007000 	.word	0x40007000
 8002af0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002af4:	4b1b      	ldr	r3, [pc, #108]	; (8002b64 <HAL_RCC_OscConfig+0x4ec>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d028      	beq.n	8002b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d121      	bne.n	8002b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d11a      	bne.n	8002b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b24:	4013      	ands	r3, r2
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d111      	bne.n	8002b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3a:	085b      	lsrs	r3, r3, #1
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d107      	bne.n	8002b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d001      	beq.n	8002b58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e000      	b.n	8002b5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3718      	adds	r7, #24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40023800 	.word	0x40023800

08002b68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e0cc      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b7c:	4b68      	ldr	r3, [pc, #416]	; (8002d20 <HAL_RCC_ClockConfig+0x1b8>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d90c      	bls.n	8002ba4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8a:	4b65      	ldr	r3, [pc, #404]	; (8002d20 <HAL_RCC_ClockConfig+0x1b8>)
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b92:	4b63      	ldr	r3, [pc, #396]	; (8002d20 <HAL_RCC_ClockConfig+0x1b8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d001      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0b8      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d020      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bbc:	4b59      	ldr	r3, [pc, #356]	; (8002d24 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	4a58      	ldr	r2, [pc, #352]	; (8002d24 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0308 	and.w	r3, r3, #8
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bd4:	4b53      	ldr	r3, [pc, #332]	; (8002d24 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	4a52      	ldr	r2, [pc, #328]	; (8002d24 <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002be0:	4b50      	ldr	r3, [pc, #320]	; (8002d24 <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	494d      	ldr	r1, [pc, #308]	; (8002d24 <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d044      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d107      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c06:	4b47      	ldr	r3, [pc, #284]	; (8002d24 <HAL_RCC_ClockConfig+0x1bc>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d119      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e07f      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d003      	beq.n	8002c26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	d107      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c26:	4b3f      	ldr	r3, [pc, #252]	; (8002d24 <HAL_RCC_ClockConfig+0x1bc>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d109      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e06f      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c36:	4b3b      	ldr	r3, [pc, #236]	; (8002d24 <HAL_RCC_ClockConfig+0x1bc>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e067      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c46:	4b37      	ldr	r3, [pc, #220]	; (8002d24 <HAL_RCC_ClockConfig+0x1bc>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f023 0203 	bic.w	r2, r3, #3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	4934      	ldr	r1, [pc, #208]	; (8002d24 <HAL_RCC_ClockConfig+0x1bc>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c58:	f7fd ff68 	bl	8000b2c <HAL_GetTick>
 8002c5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5e:	e00a      	b.n	8002c76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c60:	f7fd ff64 	bl	8000b2c <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e04f      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c76:	4b2b      	ldr	r3, [pc, #172]	; (8002d24 <HAL_RCC_ClockConfig+0x1bc>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 020c 	and.w	r2, r3, #12
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d1eb      	bne.n	8002c60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c88:	4b25      	ldr	r3, [pc, #148]	; (8002d20 <HAL_RCC_ClockConfig+0x1b8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d20c      	bcs.n	8002cb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c96:	4b22      	ldr	r3, [pc, #136]	; (8002d20 <HAL_RCC_ClockConfig+0x1b8>)
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9e:	4b20      	ldr	r3, [pc, #128]	; (8002d20 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d001      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e032      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d008      	beq.n	8002cce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cbc:	4b19      	ldr	r3, [pc, #100]	; (8002d24 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	4916      	ldr	r1, [pc, #88]	; (8002d24 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d009      	beq.n	8002cee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cda:	4b12      	ldr	r3, [pc, #72]	; (8002d24 <HAL_RCC_ClockConfig+0x1bc>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	490e      	ldr	r1, [pc, #56]	; (8002d24 <HAL_RCC_ClockConfig+0x1bc>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cee:	f000 f821 	bl	8002d34 <HAL_RCC_GetSysClockFreq>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	091b      	lsrs	r3, r3, #4
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	490a      	ldr	r1, [pc, #40]	; (8002d28 <HAL_RCC_ClockConfig+0x1c0>)
 8002d00:	5ccb      	ldrb	r3, [r1, r3]
 8002d02:	fa22 f303 	lsr.w	r3, r2, r3
 8002d06:	4a09      	ldr	r2, [pc, #36]	; (8002d2c <HAL_RCC_ClockConfig+0x1c4>)
 8002d08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d0a:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <HAL_RCC_ClockConfig+0x1c8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fd fec8 	bl	8000aa4 <HAL_InitTick>

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40023c00 	.word	0x40023c00
 8002d24:	40023800 	.word	0x40023800
 8002d28:	08007834 	.word	0x08007834
 8002d2c:	20000048 	.word	0x20000048
 8002d30:	2000004c 	.word	0x2000004c

08002d34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d38:	b094      	sub	sp, #80	; 0x50
 8002d3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d40:	2300      	movs	r3, #0
 8002d42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d44:	2300      	movs	r3, #0
 8002d46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d4c:	4b79      	ldr	r3, [pc, #484]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 030c 	and.w	r3, r3, #12
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d00d      	beq.n	8002d74 <HAL_RCC_GetSysClockFreq+0x40>
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	f200 80e1 	bhi.w	8002f20 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d002      	beq.n	8002d68 <HAL_RCC_GetSysClockFreq+0x34>
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d003      	beq.n	8002d6e <HAL_RCC_GetSysClockFreq+0x3a>
 8002d66:	e0db      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d68:	4b73      	ldr	r3, [pc, #460]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d6a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d6c:	e0db      	b.n	8002f26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d6e:	4b73      	ldr	r3, [pc, #460]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x208>)
 8002d70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d72:	e0d8      	b.n	8002f26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d74:	4b6f      	ldr	r3, [pc, #444]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d7c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d7e:	4b6d      	ldr	r3, [pc, #436]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d063      	beq.n	8002e52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d8a:	4b6a      	ldr	r3, [pc, #424]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	099b      	lsrs	r3, r3, #6
 8002d90:	2200      	movs	r2, #0
 8002d92:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d9c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d9e:	2300      	movs	r3, #0
 8002da0:	637b      	str	r3, [r7, #52]	; 0x34
 8002da2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002da6:	4622      	mov	r2, r4
 8002da8:	462b      	mov	r3, r5
 8002daa:	f04f 0000 	mov.w	r0, #0
 8002dae:	f04f 0100 	mov.w	r1, #0
 8002db2:	0159      	lsls	r1, r3, #5
 8002db4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002db8:	0150      	lsls	r0, r2, #5
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	1a51      	subs	r1, r2, r1
 8002dc2:	6139      	str	r1, [r7, #16]
 8002dc4:	4629      	mov	r1, r5
 8002dc6:	eb63 0301 	sbc.w	r3, r3, r1
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	f04f 0200 	mov.w	r2, #0
 8002dd0:	f04f 0300 	mov.w	r3, #0
 8002dd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dd8:	4659      	mov	r1, fp
 8002dda:	018b      	lsls	r3, r1, #6
 8002ddc:	4651      	mov	r1, sl
 8002dde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002de2:	4651      	mov	r1, sl
 8002de4:	018a      	lsls	r2, r1, #6
 8002de6:	4651      	mov	r1, sl
 8002de8:	ebb2 0801 	subs.w	r8, r2, r1
 8002dec:	4659      	mov	r1, fp
 8002dee:	eb63 0901 	sbc.w	r9, r3, r1
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e06:	4690      	mov	r8, r2
 8002e08:	4699      	mov	r9, r3
 8002e0a:	4623      	mov	r3, r4
 8002e0c:	eb18 0303 	adds.w	r3, r8, r3
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	462b      	mov	r3, r5
 8002e14:	eb49 0303 	adc.w	r3, r9, r3
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e26:	4629      	mov	r1, r5
 8002e28:	024b      	lsls	r3, r1, #9
 8002e2a:	4621      	mov	r1, r4
 8002e2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e30:	4621      	mov	r1, r4
 8002e32:	024a      	lsls	r2, r1, #9
 8002e34:	4610      	mov	r0, r2
 8002e36:	4619      	mov	r1, r3
 8002e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e44:	f7fd f9d2 	bl	80001ec <__aeabi_uldivmod>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e50:	e058      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e52:	4b38      	ldr	r3, [pc, #224]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	099b      	lsrs	r3, r3, #6
 8002e58:	2200      	movs	r2, #0
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e62:	623b      	str	r3, [r7, #32]
 8002e64:	2300      	movs	r3, #0
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24
 8002e68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e6c:	4642      	mov	r2, r8
 8002e6e:	464b      	mov	r3, r9
 8002e70:	f04f 0000 	mov.w	r0, #0
 8002e74:	f04f 0100 	mov.w	r1, #0
 8002e78:	0159      	lsls	r1, r3, #5
 8002e7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e7e:	0150      	lsls	r0, r2, #5
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4641      	mov	r1, r8
 8002e86:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e8a:	4649      	mov	r1, r9
 8002e8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	f04f 0300 	mov.w	r3, #0
 8002e98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ea0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ea4:	ebb2 040a 	subs.w	r4, r2, sl
 8002ea8:	eb63 050b 	sbc.w	r5, r3, fp
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	f04f 0300 	mov.w	r3, #0
 8002eb4:	00eb      	lsls	r3, r5, #3
 8002eb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002eba:	00e2      	lsls	r2, r4, #3
 8002ebc:	4614      	mov	r4, r2
 8002ebe:	461d      	mov	r5, r3
 8002ec0:	4643      	mov	r3, r8
 8002ec2:	18e3      	adds	r3, r4, r3
 8002ec4:	603b      	str	r3, [r7, #0]
 8002ec6:	464b      	mov	r3, r9
 8002ec8:	eb45 0303 	adc.w	r3, r5, r3
 8002ecc:	607b      	str	r3, [r7, #4]
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002eda:	4629      	mov	r1, r5
 8002edc:	028b      	lsls	r3, r1, #10
 8002ede:	4621      	mov	r1, r4
 8002ee0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ee4:	4621      	mov	r1, r4
 8002ee6:	028a      	lsls	r2, r1, #10
 8002ee8:	4610      	mov	r0, r2
 8002eea:	4619      	mov	r1, r3
 8002eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eee:	2200      	movs	r2, #0
 8002ef0:	61bb      	str	r3, [r7, #24]
 8002ef2:	61fa      	str	r2, [r7, #28]
 8002ef4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ef8:	f7fd f978 	bl	80001ec <__aeabi_uldivmod>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4613      	mov	r3, r2
 8002f02:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f04:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	0c1b      	lsrs	r3, r3, #16
 8002f0a:	f003 0303 	and.w	r3, r3, #3
 8002f0e:	3301      	adds	r3, #1
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002f14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f1e:	e002      	b.n	8002f26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f20:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3750      	adds	r7, #80	; 0x50
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f32:	bf00      	nop
 8002f34:	40023800 	.word	0x40023800
 8002f38:	00f42400 	.word	0x00f42400
 8002f3c:	007a1200 	.word	0x007a1200

08002f40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f44:	4b03      	ldr	r3, [pc, #12]	; (8002f54 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f46:	681b      	ldr	r3, [r3, #0]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	20000048 	.word	0x20000048

08002f58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e041      	b.n	8002fee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fd fcbe 	bl	8000900 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3304      	adds	r3, #4
 8002f94:	4619      	mov	r1, r3
 8002f96:	4610      	mov	r0, r2
 8002f98:	f000 f968 	bl	800326c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b082      	sub	sp, #8
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b02      	cmp	r3, #2
 800300a:	d122      	bne.n	8003052 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b02      	cmp	r3, #2
 8003018:	d11b      	bne.n	8003052 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f06f 0202 	mvn.w	r2, #2
 8003022:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	f003 0303 	and.w	r3, r3, #3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f8f8 	bl	800322e <HAL_TIM_IC_CaptureCallback>
 800303e:	e005      	b.n	800304c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f8ea 	bl	800321a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f8fb 	bl	8003242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b04      	cmp	r3, #4
 800305e:	d122      	bne.n	80030a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	2b04      	cmp	r3, #4
 800306c:	d11b      	bne.n	80030a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f06f 0204 	mvn.w	r2, #4
 8003076:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2202      	movs	r2, #2
 800307c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f8ce 	bl	800322e <HAL_TIM_IC_CaptureCallback>
 8003092:	e005      	b.n	80030a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f8c0 	bl	800321a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f8d1 	bl	8003242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d122      	bne.n	80030fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d11b      	bne.n	80030fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f06f 0208 	mvn.w	r2, #8
 80030ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2204      	movs	r2, #4
 80030d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	f003 0303 	and.w	r3, r3, #3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 f8a4 	bl	800322e <HAL_TIM_IC_CaptureCallback>
 80030e6:	e005      	b.n	80030f4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f896 	bl	800321a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f8a7 	bl	8003242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	f003 0310 	and.w	r3, r3, #16
 8003104:	2b10      	cmp	r3, #16
 8003106:	d122      	bne.n	800314e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f003 0310 	and.w	r3, r3, #16
 8003112:	2b10      	cmp	r3, #16
 8003114:	d11b      	bne.n	800314e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f06f 0210 	mvn.w	r2, #16
 800311e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2208      	movs	r2, #8
 8003124:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f87a 	bl	800322e <HAL_TIM_IC_CaptureCallback>
 800313a:	e005      	b.n	8003148 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f86c 	bl	800321a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f87d 	bl	8003242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b01      	cmp	r3, #1
 800315a:	d10e      	bne.n	800317a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b01      	cmp	r3, #1
 8003168:	d107      	bne.n	800317a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f06f 0201 	mvn.w	r2, #1
 8003172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f846 	bl	8003206 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003184:	2b80      	cmp	r3, #128	; 0x80
 8003186:	d10e      	bne.n	80031a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003192:	2b80      	cmp	r3, #128	; 0x80
 8003194:	d107      	bne.n	80031a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800319e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f989 	bl	80034b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b0:	2b40      	cmp	r3, #64	; 0x40
 80031b2:	d10e      	bne.n	80031d2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031be:	2b40      	cmp	r3, #64	; 0x40
 80031c0:	d107      	bne.n	80031d2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f842 	bl	8003256 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	f003 0320 	and.w	r3, r3, #32
 80031dc:	2b20      	cmp	r3, #32
 80031de:	d10e      	bne.n	80031fe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f003 0320 	and.w	r3, r3, #32
 80031ea:	2b20      	cmp	r3, #32
 80031ec:	d107      	bne.n	80031fe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f06f 0220 	mvn.w	r2, #32
 80031f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f953 	bl	80034a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031fe:	bf00      	nop
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003206:	b480      	push	{r7}
 8003208:	b083      	sub	sp, #12
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003242:	b480      	push	{r7}
 8003244:	b083      	sub	sp, #12
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
	...

0800326c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a40      	ldr	r2, [pc, #256]	; (8003380 <TIM_Base_SetConfig+0x114>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d013      	beq.n	80032ac <TIM_Base_SetConfig+0x40>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328a:	d00f      	beq.n	80032ac <TIM_Base_SetConfig+0x40>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a3d      	ldr	r2, [pc, #244]	; (8003384 <TIM_Base_SetConfig+0x118>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d00b      	beq.n	80032ac <TIM_Base_SetConfig+0x40>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a3c      	ldr	r2, [pc, #240]	; (8003388 <TIM_Base_SetConfig+0x11c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d007      	beq.n	80032ac <TIM_Base_SetConfig+0x40>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a3b      	ldr	r2, [pc, #236]	; (800338c <TIM_Base_SetConfig+0x120>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d003      	beq.n	80032ac <TIM_Base_SetConfig+0x40>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a3a      	ldr	r2, [pc, #232]	; (8003390 <TIM_Base_SetConfig+0x124>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d108      	bne.n	80032be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a2f      	ldr	r2, [pc, #188]	; (8003380 <TIM_Base_SetConfig+0x114>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d02b      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032cc:	d027      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a2c      	ldr	r2, [pc, #176]	; (8003384 <TIM_Base_SetConfig+0x118>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d023      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a2b      	ldr	r2, [pc, #172]	; (8003388 <TIM_Base_SetConfig+0x11c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d01f      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a2a      	ldr	r2, [pc, #168]	; (800338c <TIM_Base_SetConfig+0x120>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d01b      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a29      	ldr	r2, [pc, #164]	; (8003390 <TIM_Base_SetConfig+0x124>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d017      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a28      	ldr	r2, [pc, #160]	; (8003394 <TIM_Base_SetConfig+0x128>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d013      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a27      	ldr	r2, [pc, #156]	; (8003398 <TIM_Base_SetConfig+0x12c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00f      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a26      	ldr	r2, [pc, #152]	; (800339c <TIM_Base_SetConfig+0x130>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d00b      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a25      	ldr	r2, [pc, #148]	; (80033a0 <TIM_Base_SetConfig+0x134>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d007      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a24      	ldr	r2, [pc, #144]	; (80033a4 <TIM_Base_SetConfig+0x138>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d003      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a23      	ldr	r2, [pc, #140]	; (80033a8 <TIM_Base_SetConfig+0x13c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d108      	bne.n	8003330 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003324:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4313      	orrs	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a0a      	ldr	r2, [pc, #40]	; (8003380 <TIM_Base_SetConfig+0x114>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d003      	beq.n	8003364 <TIM_Base_SetConfig+0xf8>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a0c      	ldr	r2, [pc, #48]	; (8003390 <TIM_Base_SetConfig+0x124>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d103      	bne.n	800336c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	615a      	str	r2, [r3, #20]
}
 8003372:	bf00      	nop
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	40010000 	.word	0x40010000
 8003384:	40000400 	.word	0x40000400
 8003388:	40000800 	.word	0x40000800
 800338c:	40000c00 	.word	0x40000c00
 8003390:	40010400 	.word	0x40010400
 8003394:	40014000 	.word	0x40014000
 8003398:	40014400 	.word	0x40014400
 800339c:	40014800 	.word	0x40014800
 80033a0:	40001800 	.word	0x40001800
 80033a4:	40001c00 	.word	0x40001c00
 80033a8:	40002000 	.word	0x40002000

080033ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033c0:	2302      	movs	r3, #2
 80033c2:	e05a      	b.n	800347a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a21      	ldr	r2, [pc, #132]	; (8003488 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d022      	beq.n	800344e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003410:	d01d      	beq.n	800344e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a1d      	ldr	r2, [pc, #116]	; (800348c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d018      	beq.n	800344e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a1b      	ldr	r2, [pc, #108]	; (8003490 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d013      	beq.n	800344e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a1a      	ldr	r2, [pc, #104]	; (8003494 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d00e      	beq.n	800344e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a18      	ldr	r2, [pc, #96]	; (8003498 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d009      	beq.n	800344e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a17      	ldr	r2, [pc, #92]	; (800349c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d004      	beq.n	800344e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a15      	ldr	r2, [pc, #84]	; (80034a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d10c      	bne.n	8003468 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003454:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	4313      	orrs	r3, r2
 800345e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40010000 	.word	0x40010000
 800348c:	40000400 	.word	0x40000400
 8003490:	40000800 	.word	0x40000800
 8003494:	40000c00 	.word	0x40000c00
 8003498:	40010400 	.word	0x40010400
 800349c:	40014000 	.word	0x40014000
 80034a0:	40001800 	.word	0x40001800

080034a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80034cc:	b084      	sub	sp, #16
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b084      	sub	sp, #16
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
 80034d6:	f107 001c 	add.w	r0, r7, #28
 80034da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d122      	bne.n	800352a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80034f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800350c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800350e:	2b01      	cmp	r3, #1
 8003510:	d105      	bne.n	800351e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f001 fbee 	bl	8004d00 <USB_CoreReset>
 8003524:	4603      	mov	r3, r0
 8003526:	73fb      	strb	r3, [r7, #15]
 8003528:	e01a      	b.n	8003560 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f001 fbe2 	bl	8004d00 <USB_CoreReset>
 800353c:	4603      	mov	r3, r0
 800353e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003542:	2b00      	cmp	r3, #0
 8003544:	d106      	bne.n	8003554 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	639a      	str	r2, [r3, #56]	; 0x38
 8003552:	e005      	b.n	8003560 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003558:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003562:	2b01      	cmp	r3, #1
 8003564:	d10b      	bne.n	800357e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f043 0206 	orr.w	r2, r3, #6
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f043 0220 	orr.w	r2, r3, #32
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800357e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800358a:	b004      	add	sp, #16
 800358c:	4770      	bx	lr
	...

08003590 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003590:	b480      	push	{r7}
 8003592:	b087      	sub	sp, #28
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	4613      	mov	r3, r2
 800359c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d165      	bne.n	8003670 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	4a41      	ldr	r2, [pc, #260]	; (80036ac <USB_SetTurnaroundTime+0x11c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d906      	bls.n	80035ba <USB_SetTurnaroundTime+0x2a>
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	4a40      	ldr	r2, [pc, #256]	; (80036b0 <USB_SetTurnaroundTime+0x120>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d202      	bcs.n	80035ba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80035b4:	230f      	movs	r3, #15
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	e062      	b.n	8003680 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	4a3c      	ldr	r2, [pc, #240]	; (80036b0 <USB_SetTurnaroundTime+0x120>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d306      	bcc.n	80035d0 <USB_SetTurnaroundTime+0x40>
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	4a3b      	ldr	r2, [pc, #236]	; (80036b4 <USB_SetTurnaroundTime+0x124>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d202      	bcs.n	80035d0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80035ca:	230e      	movs	r3, #14
 80035cc:	617b      	str	r3, [r7, #20]
 80035ce:	e057      	b.n	8003680 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	4a38      	ldr	r2, [pc, #224]	; (80036b4 <USB_SetTurnaroundTime+0x124>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d306      	bcc.n	80035e6 <USB_SetTurnaroundTime+0x56>
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	4a37      	ldr	r2, [pc, #220]	; (80036b8 <USB_SetTurnaroundTime+0x128>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d202      	bcs.n	80035e6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80035e0:	230d      	movs	r3, #13
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	e04c      	b.n	8003680 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	4a33      	ldr	r2, [pc, #204]	; (80036b8 <USB_SetTurnaroundTime+0x128>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d306      	bcc.n	80035fc <USB_SetTurnaroundTime+0x6c>
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	4a32      	ldr	r2, [pc, #200]	; (80036bc <USB_SetTurnaroundTime+0x12c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d802      	bhi.n	80035fc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80035f6:	230c      	movs	r3, #12
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	e041      	b.n	8003680 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	4a2f      	ldr	r2, [pc, #188]	; (80036bc <USB_SetTurnaroundTime+0x12c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d906      	bls.n	8003612 <USB_SetTurnaroundTime+0x82>
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	4a2e      	ldr	r2, [pc, #184]	; (80036c0 <USB_SetTurnaroundTime+0x130>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d802      	bhi.n	8003612 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800360c:	230b      	movs	r3, #11
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	e036      	b.n	8003680 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	4a2a      	ldr	r2, [pc, #168]	; (80036c0 <USB_SetTurnaroundTime+0x130>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d906      	bls.n	8003628 <USB_SetTurnaroundTime+0x98>
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	4a29      	ldr	r2, [pc, #164]	; (80036c4 <USB_SetTurnaroundTime+0x134>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d802      	bhi.n	8003628 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003622:	230a      	movs	r3, #10
 8003624:	617b      	str	r3, [r7, #20]
 8003626:	e02b      	b.n	8003680 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	4a26      	ldr	r2, [pc, #152]	; (80036c4 <USB_SetTurnaroundTime+0x134>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d906      	bls.n	800363e <USB_SetTurnaroundTime+0xae>
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	4a25      	ldr	r2, [pc, #148]	; (80036c8 <USB_SetTurnaroundTime+0x138>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d202      	bcs.n	800363e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003638:	2309      	movs	r3, #9
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	e020      	b.n	8003680 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	4a21      	ldr	r2, [pc, #132]	; (80036c8 <USB_SetTurnaroundTime+0x138>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d306      	bcc.n	8003654 <USB_SetTurnaroundTime+0xc4>
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	4a20      	ldr	r2, [pc, #128]	; (80036cc <USB_SetTurnaroundTime+0x13c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d802      	bhi.n	8003654 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800364e:	2308      	movs	r3, #8
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	e015      	b.n	8003680 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4a1d      	ldr	r2, [pc, #116]	; (80036cc <USB_SetTurnaroundTime+0x13c>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d906      	bls.n	800366a <USB_SetTurnaroundTime+0xda>
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	4a1c      	ldr	r2, [pc, #112]	; (80036d0 <USB_SetTurnaroundTime+0x140>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d202      	bcs.n	800366a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003664:	2307      	movs	r3, #7
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	e00a      	b.n	8003680 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800366a:	2306      	movs	r3, #6
 800366c:	617b      	str	r3, [r7, #20]
 800366e:	e007      	b.n	8003680 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003670:	79fb      	ldrb	r3, [r7, #7]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d102      	bne.n	800367c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003676:	2309      	movs	r3, #9
 8003678:	617b      	str	r3, [r7, #20]
 800367a:	e001      	b.n	8003680 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800367c:	2309      	movs	r3, #9
 800367e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	029b      	lsls	r3, r3, #10
 8003694:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003698:	431a      	orrs	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	371c      	adds	r7, #28
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	00d8acbf 	.word	0x00d8acbf
 80036b0:	00e4e1c0 	.word	0x00e4e1c0
 80036b4:	00f42400 	.word	0x00f42400
 80036b8:	01067380 	.word	0x01067380
 80036bc:	011a499f 	.word	0x011a499f
 80036c0:	01312cff 	.word	0x01312cff
 80036c4:	014ca43f 	.word	0x014ca43f
 80036c8:	016e3600 	.word	0x016e3600
 80036cc:	01a6ab1f 	.word	0x01a6ab1f
 80036d0:	01e84800 	.word	0x01e84800

080036d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f043 0201 	orr.w	r2, r3, #1
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f023 0201 	bic.w	r2, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	460b      	mov	r3, r1
 8003722:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003724:	2300      	movs	r3, #0
 8003726:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003734:	78fb      	ldrb	r3, [r7, #3]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d115      	bne.n	8003766 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003746:	2001      	movs	r0, #1
 8003748:	f7fd f9fc 	bl	8000b44 <HAL_Delay>
      ms++;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	3301      	adds	r3, #1
 8003750:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f001 fa45 	bl	8004be2 <USB_GetMode>
 8003758:	4603      	mov	r3, r0
 800375a:	2b01      	cmp	r3, #1
 800375c:	d01e      	beq.n	800379c <USB_SetCurrentMode+0x84>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2b31      	cmp	r3, #49	; 0x31
 8003762:	d9f0      	bls.n	8003746 <USB_SetCurrentMode+0x2e>
 8003764:	e01a      	b.n	800379c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003766:	78fb      	ldrb	r3, [r7, #3]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d115      	bne.n	8003798 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003778:	2001      	movs	r0, #1
 800377a:	f7fd f9e3 	bl	8000b44 <HAL_Delay>
      ms++;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	3301      	adds	r3, #1
 8003782:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f001 fa2c 	bl	8004be2 <USB_GetMode>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d005      	beq.n	800379c <USB_SetCurrentMode+0x84>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2b31      	cmp	r3, #49	; 0x31
 8003794:	d9f0      	bls.n	8003778 <USB_SetCurrentMode+0x60>
 8003796:	e001      	b.n	800379c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e005      	b.n	80037a8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b32      	cmp	r3, #50	; 0x32
 80037a0:	d101      	bne.n	80037a6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e000      	b.n	80037a8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037b0:	b084      	sub	sp, #16
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b086      	sub	sp, #24
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
 80037ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80037be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80037ca:	2300      	movs	r3, #0
 80037cc:	613b      	str	r3, [r7, #16]
 80037ce:	e009      	b.n	80037e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	3340      	adds	r3, #64	; 0x40
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	2200      	movs	r2, #0
 80037dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	3301      	adds	r3, #1
 80037e2:	613b      	str	r3, [r7, #16]
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	2b0e      	cmp	r3, #14
 80037e8:	d9f2      	bls.n	80037d0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80037ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d11c      	bne.n	800382a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037fe:	f043 0302 	orr.w	r3, r3, #2
 8003802:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	639a      	str	r2, [r3, #56]	; 0x38
 8003828:	e00b      	b.n	8003842 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003848:	461a      	mov	r2, r3
 800384a:	2300      	movs	r3, #0
 800384c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003854:	4619      	mov	r1, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800385c:	461a      	mov	r2, r3
 800385e:	680b      	ldr	r3, [r1, #0]
 8003860:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003864:	2b01      	cmp	r3, #1
 8003866:	d10c      	bne.n	8003882 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386a:	2b00      	cmp	r3, #0
 800386c:	d104      	bne.n	8003878 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800386e:	2100      	movs	r1, #0
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f965 	bl	8003b40 <USB_SetDevSpeed>
 8003876:	e008      	b.n	800388a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003878:	2101      	movs	r1, #1
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f960 	bl	8003b40 <USB_SetDevSpeed>
 8003880:	e003      	b.n	800388a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003882:	2103      	movs	r1, #3
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f95b 	bl	8003b40 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800388a:	2110      	movs	r1, #16
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 f8f3 	bl	8003a78 <USB_FlushTxFifo>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f91f 	bl	8003ae0 <USB_FlushRxFifo>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038b2:	461a      	mov	r2, r3
 80038b4:	2300      	movs	r3, #0
 80038b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038be:	461a      	mov	r2, r3
 80038c0:	2300      	movs	r3, #0
 80038c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ca:	461a      	mov	r2, r3
 80038cc:	2300      	movs	r3, #0
 80038ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038d0:	2300      	movs	r3, #0
 80038d2:	613b      	str	r3, [r7, #16]
 80038d4:	e043      	b.n	800395e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038ec:	d118      	bne.n	8003920 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10a      	bne.n	800390a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003900:	461a      	mov	r2, r3
 8003902:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	e013      	b.n	8003932 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	015a      	lsls	r2, r3, #5
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	4413      	add	r3, r2
 8003912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003916:	461a      	mov	r2, r3
 8003918:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	e008      	b.n	8003932 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4413      	add	r3, r2
 8003928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800392c:	461a      	mov	r2, r3
 800392e:	2300      	movs	r3, #0
 8003930:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	015a      	lsls	r2, r3, #5
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	4413      	add	r3, r2
 800393a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800393e:	461a      	mov	r2, r3
 8003940:	2300      	movs	r3, #0
 8003942:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	015a      	lsls	r2, r3, #5
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4413      	add	r3, r2
 800394c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003950:	461a      	mov	r2, r3
 8003952:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003956:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	3301      	adds	r3, #1
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	429a      	cmp	r2, r3
 8003964:	d3b7      	bcc.n	80038d6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003966:	2300      	movs	r3, #0
 8003968:	613b      	str	r3, [r7, #16]
 800396a:	e043      	b.n	80039f4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4413      	add	r3, r2
 8003974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800397e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003982:	d118      	bne.n	80039b6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10a      	bne.n	80039a0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	015a      	lsls	r2, r3, #5
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4413      	add	r3, r2
 8003992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003996:	461a      	mov	r2, r3
 8003998:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	e013      	b.n	80039c8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ac:	461a      	mov	r2, r3
 80039ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80039b2:	6013      	str	r3, [r2, #0]
 80039b4:	e008      	b.n	80039c8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c2:	461a      	mov	r2, r3
 80039c4:	2300      	movs	r3, #0
 80039c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d4:	461a      	mov	r2, r3
 80039d6:	2300      	movs	r3, #0
 80039d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e6:	461a      	mov	r2, r3
 80039e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	3301      	adds	r3, #1
 80039f2:	613b      	str	r3, [r7, #16]
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d3b7      	bcc.n	800396c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a0e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003a1c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d105      	bne.n	8003a30 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	f043 0210 	orr.w	r2, r3, #16
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	699a      	ldr	r2, [r3, #24]
 8003a34:	4b0f      	ldr	r3, [pc, #60]	; (8003a74 <USB_DevInit+0x2c4>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d005      	beq.n	8003a4e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	f043 0208 	orr.w	r2, r3, #8
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d107      	bne.n	8003a64 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a5c:	f043 0304 	orr.w	r3, r3, #4
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a70:	b004      	add	sp, #16
 8003a72:	4770      	bx	lr
 8003a74:	803c3800 	.word	0x803c3800

08003a78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4a13      	ldr	r2, [pc, #76]	; (8003adc <USB_FlushTxFifo+0x64>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d901      	bls.n	8003a98 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e01b      	b.n	8003ad0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	daf2      	bge.n	8003a86 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	019b      	lsls	r3, r3, #6
 8003aa8:	f043 0220 	orr.w	r2, r3, #32
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4a08      	ldr	r2, [pc, #32]	; (8003adc <USB_FlushTxFifo+0x64>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d901      	bls.n	8003ac2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e006      	b.n	8003ad0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f003 0320 	and.w	r3, r3, #32
 8003aca:	2b20      	cmp	r3, #32
 8003acc:	d0f0      	beq.n	8003ab0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	00030d40 	.word	0x00030d40

08003ae0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	3301      	adds	r3, #1
 8003af0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	4a11      	ldr	r2, [pc, #68]	; (8003b3c <USB_FlushRxFifo+0x5c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d901      	bls.n	8003afe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e018      	b.n	8003b30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	daf2      	bge.n	8003aec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2210      	movs	r2, #16
 8003b0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	3301      	adds	r3, #1
 8003b14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	4a08      	ldr	r2, [pc, #32]	; (8003b3c <USB_FlushRxFifo+0x5c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d901      	bls.n	8003b22 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e006      	b.n	8003b30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	f003 0310 	and.w	r3, r3, #16
 8003b2a:	2b10      	cmp	r3, #16
 8003b2c:	d0f0      	beq.n	8003b10 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	00030d40 	.word	0x00030d40

08003b40 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	78fb      	ldrb	r3, [r7, #3]
 8003b5a:	68f9      	ldr	r1, [r7, #12]
 8003b5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b60:	4313      	orrs	r3, r2
 8003b62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b087      	sub	sp, #28
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 0306 	and.w	r3, r3, #6
 8003b8a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d102      	bne.n	8003b98 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003b92:	2300      	movs	r3, #0
 8003b94:	75fb      	strb	r3, [r7, #23]
 8003b96:	e00a      	b.n	8003bae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d002      	beq.n	8003ba4 <USB_GetDevSpeed+0x32>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2b06      	cmp	r3, #6
 8003ba2:	d102      	bne.n	8003baa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	75fb      	strb	r3, [r7, #23]
 8003ba8:	e001      	b.n	8003bae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003baa:	230f      	movs	r3, #15
 8003bac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	371c      	adds	r7, #28
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	785b      	ldrb	r3, [r3, #1]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d13a      	bne.n	8003c4e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bde:	69da      	ldr	r2, [r3, #28]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	f003 030f 	and.w	r3, r3, #15
 8003be8:	2101      	movs	r1, #1
 8003bea:	fa01 f303 	lsl.w	r3, r1, r3
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	68f9      	ldr	r1, [r7, #12]
 8003bf2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	015a      	lsls	r2, r3, #5
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4413      	add	r3, r2
 8003c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d155      	bne.n	8003cbc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	015a      	lsls	r2, r3, #5
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4413      	add	r3, r2
 8003c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	791b      	ldrb	r3, [r3, #4]
 8003c2a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c2c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	059b      	lsls	r3, r3, #22
 8003c32:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c34:	4313      	orrs	r3, r2
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	0151      	lsls	r1, r2, #5
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	440a      	add	r2, r1
 8003c3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c4a:	6013      	str	r3, [r2, #0]
 8003c4c:	e036      	b.n	8003cbc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c54:	69da      	ldr	r2, [r3, #28]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	2101      	movs	r1, #1
 8003c60:	fa01 f303 	lsl.w	r3, r1, r3
 8003c64:	041b      	lsls	r3, r3, #16
 8003c66:	68f9      	ldr	r1, [r7, #12]
 8003c68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d11a      	bne.n	8003cbc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	015a      	lsls	r2, r3, #5
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	791b      	ldrb	r3, [r3, #4]
 8003ca0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ca2:	430b      	orrs	r3, r1
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	0151      	lsls	r1, r2, #5
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	440a      	add	r2, r1
 8003cae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cba:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
	...

08003ccc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	785b      	ldrb	r3, [r3, #1]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d161      	bne.n	8003dac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cfe:	d11f      	bne.n	8003d40 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	015a      	lsls	r2, r3, #5
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4413      	add	r3, r2
 8003d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	0151      	lsls	r1, r2, #5
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	440a      	add	r2, r1
 8003d16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d1e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	015a      	lsls	r2, r3, #5
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	0151      	lsls	r1, r2, #5
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	440a      	add	r2, r1
 8003d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	f003 030f 	and.w	r3, r3, #15
 8003d50:	2101      	movs	r1, #1
 8003d52:	fa01 f303 	lsl.w	r3, r1, r3
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	68f9      	ldr	r1, [r7, #12]
 8003d5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d60:	4013      	ands	r3, r2
 8003d62:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d6a:	69da      	ldr	r2, [r3, #28]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	f003 030f 	and.w	r3, r3, #15
 8003d74:	2101      	movs	r1, #1
 8003d76:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	68f9      	ldr	r1, [r7, #12]
 8003d80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d84:	4013      	ands	r3, r2
 8003d86:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	0159      	lsls	r1, r3, #5
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	440b      	add	r3, r1
 8003d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da2:	4619      	mov	r1, r3
 8003da4:	4b35      	ldr	r3, [pc, #212]	; (8003e7c <USB_DeactivateEndpoint+0x1b0>)
 8003da6:	4013      	ands	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]
 8003daa:	e060      	b.n	8003e6e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	015a      	lsls	r2, r3, #5
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dc2:	d11f      	bne.n	8003e04 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	0151      	lsls	r1, r2, #5
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	440a      	add	r2, r1
 8003dda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dde:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003de2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	015a      	lsls	r2, r3, #5
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	0151      	lsls	r1, r2, #5
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	440a      	add	r2, r1
 8003dfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dfe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e02:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	f003 030f 	and.w	r3, r3, #15
 8003e14:	2101      	movs	r1, #1
 8003e16:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1a:	041b      	lsls	r3, r3, #16
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	68f9      	ldr	r1, [r7, #12]
 8003e20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e24:	4013      	ands	r3, r2
 8003e26:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e2e:	69da      	ldr	r2, [r3, #28]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	f003 030f 	and.w	r3, r3, #15
 8003e38:	2101      	movs	r1, #1
 8003e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3e:	041b      	lsls	r3, r3, #16
 8003e40:	43db      	mvns	r3, r3
 8003e42:	68f9      	ldr	r1, [r7, #12]
 8003e44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e48:	4013      	ands	r3, r2
 8003e4a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	0159      	lsls	r1, r3, #5
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	440b      	add	r3, r1
 8003e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e66:	4619      	mov	r1, r3
 8003e68:	4b05      	ldr	r3, [pc, #20]	; (8003e80 <USB_DeactivateEndpoint+0x1b4>)
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	ec337800 	.word	0xec337800
 8003e80:	eff37800 	.word	0xeff37800

08003e84 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b08a      	sub	sp, #40	; 0x28
 8003e88:	af02      	add	r7, sp, #8
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	785b      	ldrb	r3, [r3, #1]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	f040 815c 	bne.w	800415e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d132      	bne.n	8003f14 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	0151      	lsls	r1, r2, #5
 8003ec0:	69fa      	ldr	r2, [r7, #28]
 8003ec2:	440a      	add	r2, r1
 8003ec4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ec8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ecc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ed0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	0151      	lsls	r1, r2, #5
 8003ee4:	69fa      	ldr	r2, [r7, #28]
 8003ee6:	440a      	add	r2, r1
 8003ee8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ef0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	015a      	lsls	r2, r3, #5
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	4413      	add	r3, r2
 8003efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	0151      	lsls	r1, r2, #5
 8003f04:	69fa      	ldr	r2, [r7, #28]
 8003f06:	440a      	add	r2, r1
 8003f08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f0c:	0cdb      	lsrs	r3, r3, #19
 8003f0e:	04db      	lsls	r3, r3, #19
 8003f10:	6113      	str	r3, [r2, #16]
 8003f12:	e074      	b.n	8003ffe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	0151      	lsls	r1, r2, #5
 8003f26:	69fa      	ldr	r2, [r7, #28]
 8003f28:	440a      	add	r2, r1
 8003f2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f2e:	0cdb      	lsrs	r3, r3, #19
 8003f30:	04db      	lsls	r3, r3, #19
 8003f32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	0151      	lsls	r1, r2, #5
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	440a      	add	r2, r1
 8003f4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f4e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f52:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f64:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	6999      	ldr	r1, [r3, #24]
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	440b      	add	r3, r1
 8003f70:	1e59      	subs	r1, r3, #1
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f7a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003f7c:	4b9d      	ldr	r3, [pc, #628]	; (80041f4 <USB_EPStartXfer+0x370>)
 8003f7e:	400b      	ands	r3, r1
 8003f80:	69b9      	ldr	r1, [r7, #24]
 8003f82:	0148      	lsls	r0, r1, #5
 8003f84:	69f9      	ldr	r1, [r7, #28]
 8003f86:	4401      	add	r1, r0
 8003f88:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f9c:	691a      	ldr	r2, [r3, #16]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fa6:	69b9      	ldr	r1, [r7, #24]
 8003fa8:	0148      	lsls	r0, r1, #5
 8003faa:	69f9      	ldr	r1, [r7, #28]
 8003fac:	4401      	add	r1, r0
 8003fae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	791b      	ldrb	r3, [r3, #4]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d11f      	bne.n	8003ffe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	015a      	lsls	r2, r3, #5
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	0151      	lsls	r1, r2, #5
 8003fd0:	69fa      	ldr	r2, [r7, #28]
 8003fd2:	440a      	add	r2, r1
 8003fd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fd8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003fdc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	0151      	lsls	r1, r2, #5
 8003ff0:	69fa      	ldr	r2, [r7, #28]
 8003ff2:	440a      	add	r2, r1
 8003ff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ff8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ffc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003ffe:	79fb      	ldrb	r3, [r7, #7]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d14b      	bne.n	800409c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d009      	beq.n	8004020 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	015a      	lsls	r2, r3, #5
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	4413      	add	r3, r2
 8004014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004018:	461a      	mov	r2, r3
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	791b      	ldrb	r3, [r3, #4]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d128      	bne.n	800407a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004034:	2b00      	cmp	r3, #0
 8004036:	d110      	bne.n	800405a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	4413      	add	r3, r2
 8004040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	0151      	lsls	r1, r2, #5
 800404a:	69fa      	ldr	r2, [r7, #28]
 800404c:	440a      	add	r2, r1
 800404e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004052:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004056:	6013      	str	r3, [r2, #0]
 8004058:	e00f      	b.n	800407a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	015a      	lsls	r2, r3, #5
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	4413      	add	r3, r2
 8004062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	0151      	lsls	r1, r2, #5
 800406c:	69fa      	ldr	r2, [r7, #28]
 800406e:	440a      	add	r2, r1
 8004070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004078:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	015a      	lsls	r2, r3, #5
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	4413      	add	r3, r2
 8004082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	0151      	lsls	r1, r2, #5
 800408c:	69fa      	ldr	r2, [r7, #28]
 800408e:	440a      	add	r2, r1
 8004090:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004094:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004098:	6013      	str	r3, [r2, #0]
 800409a:	e133      	b.n	8004304 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	015a      	lsls	r2, r3, #5
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	4413      	add	r3, r2
 80040a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	0151      	lsls	r1, r2, #5
 80040ae:	69fa      	ldr	r2, [r7, #28]
 80040b0:	440a      	add	r2, r1
 80040b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040ba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	791b      	ldrb	r3, [r3, #4]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d015      	beq.n	80040f0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 811b 	beq.w	8004304 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	2101      	movs	r1, #1
 80040e0:	fa01 f303 	lsl.w	r3, r1, r3
 80040e4:	69f9      	ldr	r1, [r7, #28]
 80040e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040ea:	4313      	orrs	r3, r2
 80040ec:	634b      	str	r3, [r1, #52]	; 0x34
 80040ee:	e109      	b.n	8004304 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d110      	bne.n	8004122 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	4413      	add	r3, r2
 8004108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	0151      	lsls	r1, r2, #5
 8004112:	69fa      	ldr	r2, [r7, #28]
 8004114:	440a      	add	r2, r1
 8004116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800411a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	e00f      	b.n	8004142 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	4413      	add	r3, r2
 800412a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	0151      	lsls	r1, r2, #5
 8004134:	69fa      	ldr	r2, [r7, #28]
 8004136:	440a      	add	r2, r1
 8004138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800413c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004140:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	6919      	ldr	r1, [r3, #16]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	781a      	ldrb	r2, [r3, #0]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	b298      	uxth	r0, r3
 8004150:	79fb      	ldrb	r3, [r7, #7]
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	4603      	mov	r3, r0
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 fade 	bl	8004718 <USB_WritePacket>
 800415c:	e0d2      	b.n	8004304 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	4413      	add	r3, r2
 8004166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	0151      	lsls	r1, r2, #5
 8004170:	69fa      	ldr	r2, [r7, #28]
 8004172:	440a      	add	r2, r1
 8004174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004178:	0cdb      	lsrs	r3, r3, #19
 800417a:	04db      	lsls	r3, r3, #19
 800417c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	015a      	lsls	r2, r3, #5
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	4413      	add	r3, r2
 8004186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	0151      	lsls	r1, r2, #5
 8004190:	69fa      	ldr	r2, [r7, #28]
 8004192:	440a      	add	r2, r1
 8004194:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004198:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800419c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041a0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d126      	bne.n	80041f8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041c0:	69b9      	ldr	r1, [r7, #24]
 80041c2:	0148      	lsls	r0, r1, #5
 80041c4:	69f9      	ldr	r1, [r7, #28]
 80041c6:	4401      	add	r1, r0
 80041c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80041cc:	4313      	orrs	r3, r2
 80041ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	0151      	lsls	r1, r2, #5
 80041e2:	69fa      	ldr	r2, [r7, #28]
 80041e4:	440a      	add	r2, r1
 80041e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041ee:	6113      	str	r3, [r2, #16]
 80041f0:	e03a      	b.n	8004268 <USB_EPStartXfer+0x3e4>
 80041f2:	bf00      	nop
 80041f4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	699a      	ldr	r2, [r3, #24]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	4413      	add	r3, r2
 8004202:	1e5a      	subs	r2, r3, #1
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	fbb2 f3f3 	udiv	r3, r2, r3
 800420c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	8afa      	ldrh	r2, [r7, #22]
 8004214:	fb03 f202 	mul.w	r2, r3, r2
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	015a      	lsls	r2, r3, #5
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	4413      	add	r3, r2
 8004224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004228:	691a      	ldr	r2, [r3, #16]
 800422a:	8afb      	ldrh	r3, [r7, #22]
 800422c:	04d9      	lsls	r1, r3, #19
 800422e:	4b38      	ldr	r3, [pc, #224]	; (8004310 <USB_EPStartXfer+0x48c>)
 8004230:	400b      	ands	r3, r1
 8004232:	69b9      	ldr	r1, [r7, #24]
 8004234:	0148      	lsls	r0, r1, #5
 8004236:	69f9      	ldr	r1, [r7, #28]
 8004238:	4401      	add	r1, r0
 800423a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800423e:	4313      	orrs	r3, r2
 8004240:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	015a      	lsls	r2, r3, #5
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	4413      	add	r3, r2
 800424a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	69db      	ldr	r3, [r3, #28]
 8004254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004258:	69b9      	ldr	r1, [r7, #24]
 800425a:	0148      	lsls	r0, r1, #5
 800425c:	69f9      	ldr	r1, [r7, #28]
 800425e:	4401      	add	r1, r0
 8004260:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004264:	4313      	orrs	r3, r2
 8004266:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004268:	79fb      	ldrb	r3, [r7, #7]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d10d      	bne.n	800428a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d009      	beq.n	800428a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	6919      	ldr	r1, [r3, #16]
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	4413      	add	r3, r2
 8004282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004286:	460a      	mov	r2, r1
 8004288:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	791b      	ldrb	r3, [r3, #4]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d128      	bne.n	80042e4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d110      	bne.n	80042c4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	0151      	lsls	r1, r2, #5
 80042b4:	69fa      	ldr	r2, [r7, #28]
 80042b6:	440a      	add	r2, r1
 80042b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	e00f      	b.n	80042e4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	015a      	lsls	r2, r3, #5
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	0151      	lsls	r1, r2, #5
 80042d6:	69fa      	ldr	r2, [r7, #28]
 80042d8:	440a      	add	r2, r1
 80042da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042e2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	015a      	lsls	r2, r3, #5
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	4413      	add	r3, r2
 80042ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	0151      	lsls	r1, r2, #5
 80042f6:	69fa      	ldr	r2, [r7, #28]
 80042f8:	440a      	add	r2, r1
 80042fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004302:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3720      	adds	r7, #32
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	1ff80000 	.word	0x1ff80000

08004314 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004314:	b480      	push	{r7}
 8004316:	b087      	sub	sp, #28
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	4613      	mov	r3, r2
 8004320:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	785b      	ldrb	r3, [r3, #1]
 8004330:	2b01      	cmp	r3, #1
 8004332:	f040 80ce 	bne.w	80044d2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d132      	bne.n	80043a4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	0151      	lsls	r1, r2, #5
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	440a      	add	r2, r1
 8004354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004358:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800435c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004360:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	4413      	add	r3, r2
 800436a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	0151      	lsls	r1, r2, #5
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	440a      	add	r2, r1
 8004378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800437c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004380:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	015a      	lsls	r2, r3, #5
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	4413      	add	r3, r2
 800438a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	0151      	lsls	r1, r2, #5
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	440a      	add	r2, r1
 8004398:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800439c:	0cdb      	lsrs	r3, r3, #19
 800439e:	04db      	lsls	r3, r3, #19
 80043a0:	6113      	str	r3, [r2, #16]
 80043a2:	e04e      	b.n	8004442 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	0151      	lsls	r1, r2, #5
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	440a      	add	r2, r1
 80043ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043be:	0cdb      	lsrs	r3, r3, #19
 80043c0:	04db      	lsls	r3, r3, #19
 80043c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	0151      	lsls	r1, r2, #5
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	440a      	add	r2, r1
 80043da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043e6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	699a      	ldr	r2, [r3, #24]
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d903      	bls.n	80043fc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	68da      	ldr	r2, [r3, #12]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	4413      	add	r3, r2
 8004404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	0151      	lsls	r1, r2, #5
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	440a      	add	r2, r1
 8004412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004416:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800441a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	4413      	add	r3, r2
 8004424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004428:	691a      	ldr	r2, [r3, #16]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004432:	6939      	ldr	r1, [r7, #16]
 8004434:	0148      	lsls	r0, r1, #5
 8004436:	6979      	ldr	r1, [r7, #20]
 8004438:	4401      	add	r1, r0
 800443a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800443e:	4313      	orrs	r3, r2
 8004440:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004442:	79fb      	ldrb	r3, [r7, #7]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d11e      	bne.n	8004486 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d009      	beq.n	8004464 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	4413      	add	r3, r2
 8004458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800445c:	461a      	mov	r2, r3
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	4413      	add	r3, r2
 800446c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	0151      	lsls	r1, r2, #5
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	440a      	add	r2, r1
 800447a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800447e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	e097      	b.n	80045b6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	015a      	lsls	r2, r3, #5
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	4413      	add	r3, r2
 800448e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	0151      	lsls	r1, r2, #5
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	440a      	add	r2, r1
 800449c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80044a4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 8083 	beq.w	80045b6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	f003 030f 	and.w	r3, r3, #15
 80044c0:	2101      	movs	r1, #1
 80044c2:	fa01 f303 	lsl.w	r3, r1, r3
 80044c6:	6979      	ldr	r1, [r7, #20]
 80044c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044cc:	4313      	orrs	r3, r2
 80044ce:	634b      	str	r3, [r1, #52]	; 0x34
 80044d0:	e071      	b.n	80045b6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	015a      	lsls	r2, r3, #5
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	4413      	add	r3, r2
 80044da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	0151      	lsls	r1, r2, #5
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	440a      	add	r2, r1
 80044e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044ec:	0cdb      	lsrs	r3, r3, #19
 80044ee:	04db      	lsls	r3, r3, #19
 80044f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	015a      	lsls	r2, r3, #5
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	4413      	add	r3, r2
 80044fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	0151      	lsls	r1, r2, #5
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	440a      	add	r2, r1
 8004508:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800450c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004510:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004514:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	015a      	lsls	r2, r3, #5
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	4413      	add	r3, r2
 8004536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	0151      	lsls	r1, r2, #5
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	440a      	add	r2, r1
 8004544:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004548:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800454c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	4413      	add	r3, r2
 8004556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455a:	691a      	ldr	r2, [r3, #16]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004564:	6939      	ldr	r1, [r7, #16]
 8004566:	0148      	lsls	r0, r1, #5
 8004568:	6979      	ldr	r1, [r7, #20]
 800456a:	4401      	add	r1, r0
 800456c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004570:	4313      	orrs	r3, r2
 8004572:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004574:	79fb      	ldrb	r3, [r7, #7]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d10d      	bne.n	8004596 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d009      	beq.n	8004596 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	6919      	ldr	r1, [r3, #16]
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	015a      	lsls	r2, r3, #5
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	4413      	add	r3, r2
 800458e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004592:	460a      	mov	r2, r1
 8004594:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	015a      	lsls	r2, r3, #5
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	4413      	add	r3, r2
 800459e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	0151      	lsls	r1, r2, #5
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	440a      	add	r2, r1
 80045ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80045b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	371c      	adds	r7, #28
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b087      	sub	sp, #28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80045ce:	2300      	movs	r3, #0
 80045d0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80045d2:	2300      	movs	r3, #0
 80045d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	785b      	ldrb	r3, [r3, #1]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d14a      	bne.n	8004678 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045fa:	f040 8086 	bne.w	800470a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	7812      	ldrb	r2, [r2, #0]
 8004612:	0151      	lsls	r1, r2, #5
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	440a      	add	r2, r1
 8004618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800461c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004620:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	7812      	ldrb	r2, [r2, #0]
 8004636:	0151      	lsls	r1, r2, #5
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	440a      	add	r2, r1
 800463c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004640:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004644:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	3301      	adds	r3, #1
 800464a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004652:	4293      	cmp	r3, r2
 8004654:	d902      	bls.n	800465c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	75fb      	strb	r3, [r7, #23]
          break;
 800465a:	e056      	b.n	800470a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	4413      	add	r3, r2
 8004666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004670:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004674:	d0e7      	beq.n	8004646 <USB_EPStopXfer+0x82>
 8004676:	e048      	b.n	800470a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	4413      	add	r3, r2
 8004682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800468c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004690:	d13b      	bne.n	800470a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	4413      	add	r3, r2
 800469c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	7812      	ldrb	r2, [r2, #0]
 80046a6:	0151      	lsls	r1, r2, #5
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	440a      	add	r2, r1
 80046ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046b4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	015a      	lsls	r2, r3, #5
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	7812      	ldrb	r2, [r2, #0]
 80046ca:	0151      	lsls	r1, r2, #5
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	440a      	add	r2, r1
 80046d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	3301      	adds	r3, #1
 80046de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d902      	bls.n	80046f0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	75fb      	strb	r3, [r7, #23]
          break;
 80046ee:	e00c      	b.n	800470a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004704:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004708:	d0e7      	beq.n	80046da <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800470a:	7dfb      	ldrb	r3, [r7, #23]
}
 800470c:	4618      	mov	r0, r3
 800470e:	371c      	adds	r7, #28
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004718:	b480      	push	{r7}
 800471a:	b089      	sub	sp, #36	; 0x24
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	4611      	mov	r1, r2
 8004724:	461a      	mov	r2, r3
 8004726:	460b      	mov	r3, r1
 8004728:	71fb      	strb	r3, [r7, #7]
 800472a:	4613      	mov	r3, r2
 800472c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004736:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800473a:	2b00      	cmp	r3, #0
 800473c:	d123      	bne.n	8004786 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800473e:	88bb      	ldrh	r3, [r7, #4]
 8004740:	3303      	adds	r3, #3
 8004742:	089b      	lsrs	r3, r3, #2
 8004744:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004746:	2300      	movs	r3, #0
 8004748:	61bb      	str	r3, [r7, #24]
 800474a:	e018      	b.n	800477e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800474c:	79fb      	ldrb	r3, [r7, #7]
 800474e:	031a      	lsls	r2, r3, #12
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	4413      	add	r3, r2
 8004754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004758:	461a      	mov	r2, r3
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	3301      	adds	r3, #1
 8004764:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	3301      	adds	r3, #1
 800476a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	3301      	adds	r3, #1
 8004770:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	3301      	adds	r3, #1
 8004776:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	3301      	adds	r3, #1
 800477c:	61bb      	str	r3, [r7, #24]
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	429a      	cmp	r2, r3
 8004784:	d3e2      	bcc.n	800474c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3724      	adds	r7, #36	; 0x24
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004794:	b480      	push	{r7}
 8004796:	b08b      	sub	sp, #44	; 0x2c
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	4613      	mov	r3, r2
 80047a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80047aa:	88fb      	ldrh	r3, [r7, #6]
 80047ac:	089b      	lsrs	r3, r3, #2
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80047b2:	88fb      	ldrh	r3, [r7, #6]
 80047b4:	f003 0303 	and.w	r3, r3, #3
 80047b8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80047ba:	2300      	movs	r3, #0
 80047bc:	623b      	str	r3, [r7, #32]
 80047be:	e014      	b.n	80047ea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	601a      	str	r2, [r3, #0]
    pDest++;
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	3301      	adds	r3, #1
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	3301      	adds	r3, #1
 80047d6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	3301      	adds	r3, #1
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	3301      	adds	r3, #1
 80047e2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	3301      	adds	r3, #1
 80047e8:	623b      	str	r3, [r7, #32]
 80047ea:	6a3a      	ldr	r2, [r7, #32]
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d3e6      	bcc.n	80047c0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80047f2:	8bfb      	ldrh	r3, [r7, #30]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d01e      	beq.n	8004836 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004802:	461a      	mov	r2, r3
 8004804:	f107 0310 	add.w	r3, r7, #16
 8004808:	6812      	ldr	r2, [r2, #0]
 800480a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	b2db      	uxtb	r3, r3
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	fa22 f303 	lsr.w	r3, r2, r3
 8004818:	b2da      	uxtb	r2, r3
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	701a      	strb	r2, [r3, #0]
      i++;
 800481e:	6a3b      	ldr	r3, [r7, #32]
 8004820:	3301      	adds	r3, #1
 8004822:	623b      	str	r3, [r7, #32]
      pDest++;
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	3301      	adds	r3, #1
 8004828:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800482a:	8bfb      	ldrh	r3, [r7, #30]
 800482c:	3b01      	subs	r3, #1
 800482e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004830:	8bfb      	ldrh	r3, [r7, #30]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1ea      	bne.n	800480c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004838:	4618      	mov	r0, r3
 800483a:	372c      	adds	r7, #44	; 0x2c
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	785b      	ldrb	r3, [r3, #1]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d12c      	bne.n	80048ba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4413      	add	r3, r2
 8004868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	db12      	blt.n	8004898 <USB_EPSetStall+0x54>
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00f      	beq.n	8004898 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4413      	add	r3, r2
 8004880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	0151      	lsls	r1, r2, #5
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	440a      	add	r2, r1
 800488e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004892:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004896:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	0151      	lsls	r1, r2, #5
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	440a      	add	r2, r1
 80048ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048b6:	6013      	str	r3, [r2, #0]
 80048b8:	e02b      	b.n	8004912 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	015a      	lsls	r2, r3, #5
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	db12      	blt.n	80048f2 <USB_EPSetStall+0xae>
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00f      	beq.n	80048f2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	015a      	lsls	r2, r3, #5
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4413      	add	r3, r2
 80048da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	0151      	lsls	r1, r2, #5
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	440a      	add	r2, r1
 80048e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048f0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	0151      	lsls	r1, r2, #5
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	440a      	add	r2, r1
 8004908:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800490c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004910:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	785b      	ldrb	r3, [r3, #1]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d128      	bne.n	800498e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4413      	add	r3, r2
 8004944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	0151      	lsls	r1, r2, #5
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	440a      	add	r2, r1
 8004952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004956:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800495a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	791b      	ldrb	r3, [r3, #4]
 8004960:	2b03      	cmp	r3, #3
 8004962:	d003      	beq.n	800496c <USB_EPClearStall+0x4c>
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	791b      	ldrb	r3, [r3, #4]
 8004968:	2b02      	cmp	r3, #2
 800496a:	d138      	bne.n	80049de <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	015a      	lsls	r2, r3, #5
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4413      	add	r3, r2
 8004974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	0151      	lsls	r1, r2, #5
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	440a      	add	r2, r1
 8004982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800498a:	6013      	str	r3, [r2, #0]
 800498c:	e027      	b.n	80049de <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	015a      	lsls	r2, r3, #5
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	4413      	add	r3, r2
 8004996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	0151      	lsls	r1, r2, #5
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	440a      	add	r2, r1
 80049a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049ac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	791b      	ldrb	r3, [r3, #4]
 80049b2:	2b03      	cmp	r3, #3
 80049b4:	d003      	beq.n	80049be <USB_EPClearStall+0x9e>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	791b      	ldrb	r3, [r3, #4]
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d10f      	bne.n	80049de <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	0151      	lsls	r1, r2, #5
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	440a      	add	r2, r1
 80049d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049dc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	460b      	mov	r3, r1
 80049f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a0a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004a0e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	78fb      	ldrb	r3, [r7, #3]
 8004a1a:	011b      	lsls	r3, r3, #4
 8004a1c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004a20:	68f9      	ldr	r1, [r7, #12]
 8004a22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a26:	4313      	orrs	r3, r2
 8004a28:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004a52:	f023 0303 	bic.w	r3, r3, #3
 8004a56:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a66:	f023 0302 	bic.w	r3, r3, #2
 8004a6a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b085      	sub	sp, #20
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004a94:	f023 0303 	bic.w	r3, r3, #3
 8004a98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004aa8:	f043 0302 	orr.w	r3, r3, #2
 8004aac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b085      	sub	sp, #20
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	4013      	ands	r3, r2
 8004b04:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	0c1b      	lsrs	r3, r3, #16
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b085      	sub	sp, #20
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	4013      	ands	r3, r2
 8004b38:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	b29b      	uxth	r3, r3
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b085      	sub	sp, #20
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
 8004b52:	460b      	mov	r3, r1
 8004b54:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004b5a:	78fb      	ldrb	r3, [r7, #3]
 8004b5c:	015a      	lsls	r2, r3, #5
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	4013      	ands	r3, r2
 8004b76:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b78:	68bb      	ldr	r3, [r7, #8]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b087      	sub	sp, #28
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
 8004b8e:	460b      	mov	r3, r1
 8004b90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004baa:	78fb      	ldrb	r3, [r7, #3]
 8004bac:	f003 030f 	and.w	r3, r3, #15
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb6:	01db      	lsls	r3, r3, #7
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004bc0:	78fb      	ldrb	r3, [r7, #3]
 8004bc2:	015a      	lsls	r2, r3, #5
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004bd4:	68bb      	ldr	r3, [r7, #8]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	371c      	adds	r7, #28
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	f003 0301 	and.w	r3, r3, #1
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b085      	sub	sp, #20
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c18:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004c1c:	f023 0307 	bic.w	r3, r3, #7
 8004c20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3714      	adds	r7, #20
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b087      	sub	sp, #28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	607a      	str	r2, [r7, #4]
 8004c50:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	333c      	adds	r3, #60	; 0x3c
 8004c5a:	3304      	adds	r3, #4
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	4a26      	ldr	r2, [pc, #152]	; (8004cfc <USB_EP0_OutStart+0xb8>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d90a      	bls.n	8004c7e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c78:	d101      	bne.n	8004c7e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	e037      	b.n	8004cee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c84:	461a      	mov	r2, r3
 8004c86:	2300      	movs	r3, #0
 8004c88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cac:	f043 0318 	orr.w	r3, r3, #24
 8004cb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cc0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004cc4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004cc6:	7afb      	ldrb	r3, [r7, #11]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d10f      	bne.n	8004cec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ce6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004cea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	371c      	adds	r7, #28
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	4f54300a 	.word	0x4f54300a

08004d00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	4a13      	ldr	r2, [pc, #76]	; (8004d64 <USB_CoreReset+0x64>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d901      	bls.n	8004d1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e01b      	b.n	8004d56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	daf2      	bge.n	8004d0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	f043 0201 	orr.w	r2, r3, #1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4a09      	ldr	r2, [pc, #36]	; (8004d64 <USB_CoreReset+0x64>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d901      	bls.n	8004d48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e006      	b.n	8004d56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d0f0      	beq.n	8004d36 <USB_CoreReset+0x36>

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	00030d40 	.word	0x00030d40

08004d68 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	460b      	mov	r3, r1
 8004d72:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004d74:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004d78:	f002 fc94 	bl	80076a4 <USBD_static_malloc>
 8004d7c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d109      	bne.n	8004d98 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	32b0      	adds	r2, #176	; 0xb0
 8004d8e:	2100      	movs	r1, #0
 8004d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004d94:	2302      	movs	r3, #2
 8004d96:	e0d4      	b.n	8004f42 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004d98:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f002 fce8 	bl	8007774 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	32b0      	adds	r2, #176	; 0xb0
 8004dae:	68f9      	ldr	r1, [r7, #12]
 8004db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	32b0      	adds	r2, #176	; 0xb0
 8004dbe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	7c1b      	ldrb	r3, [r3, #16]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d138      	bne.n	8004e42 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004dd0:	4b5e      	ldr	r3, [pc, #376]	; (8004f4c <USBD_CDC_Init+0x1e4>)
 8004dd2:	7819      	ldrb	r1, [r3, #0]
 8004dd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dd8:	2202      	movs	r2, #2
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f002 fb3f 	bl	800745e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004de0:	4b5a      	ldr	r3, [pc, #360]	; (8004f4c <USBD_CDC_Init+0x1e4>)
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	f003 020f 	and.w	r2, r3, #15
 8004de8:	6879      	ldr	r1, [r7, #4]
 8004dea:	4613      	mov	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	440b      	add	r3, r1
 8004df4:	3324      	adds	r3, #36	; 0x24
 8004df6:	2201      	movs	r2, #1
 8004df8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004dfa:	4b55      	ldr	r3, [pc, #340]	; (8004f50 <USBD_CDC_Init+0x1e8>)
 8004dfc:	7819      	ldrb	r1, [r3, #0]
 8004dfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e02:	2202      	movs	r2, #2
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f002 fb2a 	bl	800745e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004e0a:	4b51      	ldr	r3, [pc, #324]	; (8004f50 <USBD_CDC_Init+0x1e8>)
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	f003 020f 	and.w	r2, r3, #15
 8004e12:	6879      	ldr	r1, [r7, #4]
 8004e14:	4613      	mov	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	440b      	add	r3, r1
 8004e1e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004e22:	2201      	movs	r2, #1
 8004e24:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004e26:	4b4b      	ldr	r3, [pc, #300]	; (8004f54 <USBD_CDC_Init+0x1ec>)
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	f003 020f 	and.w	r2, r3, #15
 8004e2e:	6879      	ldr	r1, [r7, #4]
 8004e30:	4613      	mov	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	440b      	add	r3, r1
 8004e3a:	3326      	adds	r3, #38	; 0x26
 8004e3c:	2210      	movs	r2, #16
 8004e3e:	801a      	strh	r2, [r3, #0]
 8004e40:	e035      	b.n	8004eae <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004e42:	4b42      	ldr	r3, [pc, #264]	; (8004f4c <USBD_CDC_Init+0x1e4>)
 8004e44:	7819      	ldrb	r1, [r3, #0]
 8004e46:	2340      	movs	r3, #64	; 0x40
 8004e48:	2202      	movs	r2, #2
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f002 fb07 	bl	800745e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004e50:	4b3e      	ldr	r3, [pc, #248]	; (8004f4c <USBD_CDC_Init+0x1e4>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	f003 020f 	and.w	r2, r3, #15
 8004e58:	6879      	ldr	r1, [r7, #4]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4413      	add	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	440b      	add	r3, r1
 8004e64:	3324      	adds	r3, #36	; 0x24
 8004e66:	2201      	movs	r2, #1
 8004e68:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004e6a:	4b39      	ldr	r3, [pc, #228]	; (8004f50 <USBD_CDC_Init+0x1e8>)
 8004e6c:	7819      	ldrb	r1, [r3, #0]
 8004e6e:	2340      	movs	r3, #64	; 0x40
 8004e70:	2202      	movs	r2, #2
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f002 faf3 	bl	800745e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004e78:	4b35      	ldr	r3, [pc, #212]	; (8004f50 <USBD_CDC_Init+0x1e8>)
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	f003 020f 	and.w	r2, r3, #15
 8004e80:	6879      	ldr	r1, [r7, #4]
 8004e82:	4613      	mov	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	440b      	add	r3, r1
 8004e8c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004e90:	2201      	movs	r2, #1
 8004e92:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004e94:	4b2f      	ldr	r3, [pc, #188]	; (8004f54 <USBD_CDC_Init+0x1ec>)
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	f003 020f 	and.w	r2, r3, #15
 8004e9c:	6879      	ldr	r1, [r7, #4]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	440b      	add	r3, r1
 8004ea8:	3326      	adds	r3, #38	; 0x26
 8004eaa:	2210      	movs	r2, #16
 8004eac:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004eae:	4b29      	ldr	r3, [pc, #164]	; (8004f54 <USBD_CDC_Init+0x1ec>)
 8004eb0:	7819      	ldrb	r1, [r3, #0]
 8004eb2:	2308      	movs	r3, #8
 8004eb4:	2203      	movs	r2, #3
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f002 fad1 	bl	800745e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004ebc:	4b25      	ldr	r3, [pc, #148]	; (8004f54 <USBD_CDC_Init+0x1ec>)
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	f003 020f 	and.w	r2, r3, #15
 8004ec4:	6879      	ldr	r1, [r7, #4]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	440b      	add	r3, r1
 8004ed0:	3324      	adds	r3, #36	; 0x24
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	33b0      	adds	r3, #176	; 0xb0
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4413      	add	r3, r2
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	e018      	b.n	8004f42 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	7c1b      	ldrb	r3, [r3, #16]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10a      	bne.n	8004f2e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004f18:	4b0d      	ldr	r3, [pc, #52]	; (8004f50 <USBD_CDC_Init+0x1e8>)
 8004f1a:	7819      	ldrb	r1, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f002 fb88 	bl	800763c <USBD_LL_PrepareReceive>
 8004f2c:	e008      	b.n	8004f40 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004f2e:	4b08      	ldr	r3, [pc, #32]	; (8004f50 <USBD_CDC_Init+0x1e8>)
 8004f30:	7819      	ldrb	r1, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f38:	2340      	movs	r3, #64	; 0x40
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f002 fb7e 	bl	800763c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	200000db 	.word	0x200000db
 8004f50:	200000dc 	.word	0x200000dc
 8004f54:	200000dd 	.word	0x200000dd

08004f58 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	460b      	mov	r3, r1
 8004f62:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004f64:	4b3a      	ldr	r3, [pc, #232]	; (8005050 <USBD_CDC_DeInit+0xf8>)
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	4619      	mov	r1, r3
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f002 fa9d 	bl	80074aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004f70:	4b37      	ldr	r3, [pc, #220]	; (8005050 <USBD_CDC_DeInit+0xf8>)
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	f003 020f 	and.w	r2, r3, #15
 8004f78:	6879      	ldr	r1, [r7, #4]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4413      	add	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	440b      	add	r3, r1
 8004f84:	3324      	adds	r3, #36	; 0x24
 8004f86:	2200      	movs	r2, #0
 8004f88:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004f8a:	4b32      	ldr	r3, [pc, #200]	; (8005054 <USBD_CDC_DeInit+0xfc>)
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	4619      	mov	r1, r3
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f002 fa8a 	bl	80074aa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004f96:	4b2f      	ldr	r3, [pc, #188]	; (8005054 <USBD_CDC_DeInit+0xfc>)
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	f003 020f 	and.w	r2, r3, #15
 8004f9e:	6879      	ldr	r1, [r7, #4]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	440b      	add	r3, r1
 8004faa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004fae:	2200      	movs	r2, #0
 8004fb0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004fb2:	4b29      	ldr	r3, [pc, #164]	; (8005058 <USBD_CDC_DeInit+0x100>)
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f002 fa76 	bl	80074aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004fbe:	4b26      	ldr	r3, [pc, #152]	; (8005058 <USBD_CDC_DeInit+0x100>)
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	f003 020f 	and.w	r2, r3, #15
 8004fc6:	6879      	ldr	r1, [r7, #4]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	3324      	adds	r3, #36	; 0x24
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004fd8:	4b1f      	ldr	r3, [pc, #124]	; (8005058 <USBD_CDC_DeInit+0x100>)
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	f003 020f 	and.w	r2, r3, #15
 8004fe0:	6879      	ldr	r1, [r7, #4]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	440b      	add	r3, r1
 8004fec:	3326      	adds	r3, #38	; 0x26
 8004fee:	2200      	movs	r2, #0
 8004ff0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	32b0      	adds	r2, #176	; 0xb0
 8004ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d01f      	beq.n	8005044 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	33b0      	adds	r3, #176	; 0xb0
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	32b0      	adds	r2, #176	; 0xb0
 8005022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005026:	4618      	mov	r0, r3
 8005028:	f002 fb4a 	bl	80076c0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	32b0      	adds	r2, #176	; 0xb0
 8005036:	2100      	movs	r1, #0
 8005038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	200000db 	.word	0x200000db
 8005054:	200000dc 	.word	0x200000dc
 8005058:	200000dd 	.word	0x200000dd

0800505c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	32b0      	adds	r2, #176	; 0xb0
 8005070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005074:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800507a:	2300      	movs	r3, #0
 800507c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800507e:	2300      	movs	r3, #0
 8005080:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005088:	2303      	movs	r3, #3
 800508a:	e0bf      	b.n	800520c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005094:	2b00      	cmp	r3, #0
 8005096:	d050      	beq.n	800513a <USBD_CDC_Setup+0xde>
 8005098:	2b20      	cmp	r3, #32
 800509a:	f040 80af 	bne.w	80051fc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	88db      	ldrh	r3, [r3, #6]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d03a      	beq.n	800511c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	b25b      	sxtb	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	da1b      	bge.n	80050e8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	33b0      	adds	r3, #176	; 0xb0
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80050c6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	88d2      	ldrh	r2, [r2, #6]
 80050cc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	88db      	ldrh	r3, [r3, #6]
 80050d2:	2b07      	cmp	r3, #7
 80050d4:	bf28      	it	cs
 80050d6:	2307      	movcs	r3, #7
 80050d8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	89fa      	ldrh	r2, [r7, #14]
 80050de:	4619      	mov	r1, r3
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f001 fd89 	bl	8006bf8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80050e6:	e090      	b.n	800520a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	785a      	ldrb	r2, [r3, #1]
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	88db      	ldrh	r3, [r3, #6]
 80050f6:	2b3f      	cmp	r3, #63	; 0x3f
 80050f8:	d803      	bhi.n	8005102 <USBD_CDC_Setup+0xa6>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	88db      	ldrh	r3, [r3, #6]
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	e000      	b.n	8005104 <USBD_CDC_Setup+0xa8>
 8005102:	2240      	movs	r2, #64	; 0x40
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800510a:	6939      	ldr	r1, [r7, #16]
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005112:	461a      	mov	r2, r3
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f001 fd9b 	bl	8006c50 <USBD_CtlPrepareRx>
      break;
 800511a:	e076      	b.n	800520a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	33b0      	adds	r3, #176	; 0xb0
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	7850      	ldrb	r0, [r2, #1]
 8005132:	2200      	movs	r2, #0
 8005134:	6839      	ldr	r1, [r7, #0]
 8005136:	4798      	blx	r3
      break;
 8005138:	e067      	b.n	800520a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	785b      	ldrb	r3, [r3, #1]
 800513e:	2b0b      	cmp	r3, #11
 8005140:	d851      	bhi.n	80051e6 <USBD_CDC_Setup+0x18a>
 8005142:	a201      	add	r2, pc, #4	; (adr r2, 8005148 <USBD_CDC_Setup+0xec>)
 8005144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005148:	08005179 	.word	0x08005179
 800514c:	080051f5 	.word	0x080051f5
 8005150:	080051e7 	.word	0x080051e7
 8005154:	080051e7 	.word	0x080051e7
 8005158:	080051e7 	.word	0x080051e7
 800515c:	080051e7 	.word	0x080051e7
 8005160:	080051e7 	.word	0x080051e7
 8005164:	080051e7 	.word	0x080051e7
 8005168:	080051e7 	.word	0x080051e7
 800516c:	080051e7 	.word	0x080051e7
 8005170:	080051a3 	.word	0x080051a3
 8005174:	080051cd 	.word	0x080051cd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b03      	cmp	r3, #3
 8005182:	d107      	bne.n	8005194 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005184:	f107 030a 	add.w	r3, r7, #10
 8005188:	2202      	movs	r2, #2
 800518a:	4619      	mov	r1, r3
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f001 fd33 	bl	8006bf8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005192:	e032      	b.n	80051fa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005194:	6839      	ldr	r1, [r7, #0]
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f001 fcbd 	bl	8006b16 <USBD_CtlError>
            ret = USBD_FAIL;
 800519c:	2303      	movs	r3, #3
 800519e:	75fb      	strb	r3, [r7, #23]
          break;
 80051a0:	e02b      	b.n	80051fa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b03      	cmp	r3, #3
 80051ac:	d107      	bne.n	80051be <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80051ae:	f107 030d 	add.w	r3, r7, #13
 80051b2:	2201      	movs	r2, #1
 80051b4:	4619      	mov	r1, r3
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f001 fd1e 	bl	8006bf8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80051bc:	e01d      	b.n	80051fa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80051be:	6839      	ldr	r1, [r7, #0]
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f001 fca8 	bl	8006b16 <USBD_CtlError>
            ret = USBD_FAIL;
 80051c6:	2303      	movs	r3, #3
 80051c8:	75fb      	strb	r3, [r7, #23]
          break;
 80051ca:	e016      	b.n	80051fa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	2b03      	cmp	r3, #3
 80051d6:	d00f      	beq.n	80051f8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80051d8:	6839      	ldr	r1, [r7, #0]
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f001 fc9b 	bl	8006b16 <USBD_CtlError>
            ret = USBD_FAIL;
 80051e0:	2303      	movs	r3, #3
 80051e2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80051e4:	e008      	b.n	80051f8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80051e6:	6839      	ldr	r1, [r7, #0]
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f001 fc94 	bl	8006b16 <USBD_CtlError>
          ret = USBD_FAIL;
 80051ee:	2303      	movs	r3, #3
 80051f0:	75fb      	strb	r3, [r7, #23]
          break;
 80051f2:	e002      	b.n	80051fa <USBD_CDC_Setup+0x19e>
          break;
 80051f4:	bf00      	nop
 80051f6:	e008      	b.n	800520a <USBD_CDC_Setup+0x1ae>
          break;
 80051f8:	bf00      	nop
      }
      break;
 80051fa:	e006      	b.n	800520a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80051fc:	6839      	ldr	r1, [r7, #0]
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f001 fc89 	bl	8006b16 <USBD_CtlError>
      ret = USBD_FAIL;
 8005204:	2303      	movs	r3, #3
 8005206:	75fb      	strb	r3, [r7, #23]
      break;
 8005208:	bf00      	nop
  }

  return (uint8_t)ret;
 800520a:	7dfb      	ldrb	r3, [r7, #23]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3718      	adds	r7, #24
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	460b      	mov	r3, r1
 800521e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005226:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	32b0      	adds	r2, #176	; 0xb0
 8005232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800523a:	2303      	movs	r3, #3
 800523c:	e065      	b.n	800530a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	32b0      	adds	r2, #176	; 0xb0
 8005248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800524c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800524e:	78fb      	ldrb	r3, [r7, #3]
 8005250:	f003 020f 	and.w	r2, r3, #15
 8005254:	6879      	ldr	r1, [r7, #4]
 8005256:	4613      	mov	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4413      	add	r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	440b      	add	r3, r1
 8005260:	3318      	adds	r3, #24
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d02f      	beq.n	80052c8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005268:	78fb      	ldrb	r3, [r7, #3]
 800526a:	f003 020f 	and.w	r2, r3, #15
 800526e:	6879      	ldr	r1, [r7, #4]
 8005270:	4613      	mov	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	440b      	add	r3, r1
 800527a:	3318      	adds	r3, #24
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	78fb      	ldrb	r3, [r7, #3]
 8005280:	f003 010f 	and.w	r1, r3, #15
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	460b      	mov	r3, r1
 8005288:	00db      	lsls	r3, r3, #3
 800528a:	440b      	add	r3, r1
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4403      	add	r3, r0
 8005290:	3348      	adds	r3, #72	; 0x48
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	fbb2 f1f3 	udiv	r1, r2, r3
 8005298:	fb01 f303 	mul.w	r3, r1, r3
 800529c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d112      	bne.n	80052c8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80052a2:	78fb      	ldrb	r3, [r7, #3]
 80052a4:	f003 020f 	and.w	r2, r3, #15
 80052a8:	6879      	ldr	r1, [r7, #4]
 80052aa:	4613      	mov	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4413      	add	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	440b      	add	r3, r1
 80052b4:	3318      	adds	r3, #24
 80052b6:	2200      	movs	r2, #0
 80052b8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80052ba:	78f9      	ldrb	r1, [r7, #3]
 80052bc:	2300      	movs	r3, #0
 80052be:	2200      	movs	r2, #0
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f002 f99a 	bl	80075fa <USBD_LL_Transmit>
 80052c6:	e01f      	b.n	8005308 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	33b0      	adds	r3, #176	; 0xb0
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d010      	beq.n	8005308 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	33b0      	adds	r3, #176	; 0xb0
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005304:	78fa      	ldrb	r2, [r7, #3]
 8005306:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b084      	sub	sp, #16
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
 800531a:	460b      	mov	r3, r1
 800531c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	32b0      	adds	r2, #176	; 0xb0
 8005328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800532c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	32b0      	adds	r2, #176	; 0xb0
 8005338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005340:	2303      	movs	r3, #3
 8005342:	e01a      	b.n	800537a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005344:	78fb      	ldrb	r3, [r7, #3]
 8005346:	4619      	mov	r1, r3
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f002 f998 	bl	800767e <USBD_LL_GetRxDataSize>
 800534e:	4602      	mov	r2, r0
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	33b0      	adds	r3, #176	; 0xb0
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005374:	4611      	mov	r1, r2
 8005376:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b084      	sub	sp, #16
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	32b0      	adds	r2, #176	; 0xb0
 8005394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005398:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e025      	b.n	80053f0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	33b0      	adds	r3, #176	; 0xb0
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d01a      	beq.n	80053ee <USBD_CDC_EP0_RxReady+0x6c>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80053be:	2bff      	cmp	r3, #255	; 0xff
 80053c0:	d015      	beq.n	80053ee <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	33b0      	adds	r3, #176	; 0xb0
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4413      	add	r3, r2
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80053da:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80053e2:	b292      	uxth	r2, r2
 80053e4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	22ff      	movs	r2, #255	; 0xff
 80053ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005400:	2182      	movs	r1, #130	; 0x82
 8005402:	4818      	ldr	r0, [pc, #96]	; (8005464 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005404:	f000 fd4f 	bl	8005ea6 <USBD_GetEpDesc>
 8005408:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800540a:	2101      	movs	r1, #1
 800540c:	4815      	ldr	r0, [pc, #84]	; (8005464 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800540e:	f000 fd4a 	bl	8005ea6 <USBD_GetEpDesc>
 8005412:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005414:	2181      	movs	r1, #129	; 0x81
 8005416:	4813      	ldr	r0, [pc, #76]	; (8005464 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005418:	f000 fd45 	bl	8005ea6 <USBD_GetEpDesc>
 800541c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d002      	beq.n	800542a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	2210      	movs	r2, #16
 8005428:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d006      	beq.n	800543e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	2200      	movs	r2, #0
 8005434:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005438:	711a      	strb	r2, [r3, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d006      	beq.n	8005452 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800544c:	711a      	strb	r2, [r3, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2243      	movs	r2, #67	; 0x43
 8005456:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005458:	4b02      	ldr	r3, [pc, #8]	; (8005464 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800545a:	4618      	mov	r0, r3
 800545c:	3718      	adds	r7, #24
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	20000098 	.word	0x20000098

08005468 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005470:	2182      	movs	r1, #130	; 0x82
 8005472:	4818      	ldr	r0, [pc, #96]	; (80054d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005474:	f000 fd17 	bl	8005ea6 <USBD_GetEpDesc>
 8005478:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800547a:	2101      	movs	r1, #1
 800547c:	4815      	ldr	r0, [pc, #84]	; (80054d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800547e:	f000 fd12 	bl	8005ea6 <USBD_GetEpDesc>
 8005482:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005484:	2181      	movs	r1, #129	; 0x81
 8005486:	4813      	ldr	r0, [pc, #76]	; (80054d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005488:	f000 fd0d 	bl	8005ea6 <USBD_GetEpDesc>
 800548c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	2210      	movs	r2, #16
 8005498:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d006      	beq.n	80054ae <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	2200      	movs	r2, #0
 80054a4:	711a      	strb	r2, [r3, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f042 0202 	orr.w	r2, r2, #2
 80054ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d006      	beq.n	80054c2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	711a      	strb	r2, [r3, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f042 0202 	orr.w	r2, r2, #2
 80054c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2243      	movs	r2, #67	; 0x43
 80054c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80054c8:	4b02      	ldr	r3, [pc, #8]	; (80054d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	20000098 	.word	0x20000098

080054d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80054e0:	2182      	movs	r1, #130	; 0x82
 80054e2:	4818      	ldr	r0, [pc, #96]	; (8005544 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80054e4:	f000 fcdf 	bl	8005ea6 <USBD_GetEpDesc>
 80054e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80054ea:	2101      	movs	r1, #1
 80054ec:	4815      	ldr	r0, [pc, #84]	; (8005544 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80054ee:	f000 fcda 	bl	8005ea6 <USBD_GetEpDesc>
 80054f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80054f4:	2181      	movs	r1, #129	; 0x81
 80054f6:	4813      	ldr	r0, [pc, #76]	; (8005544 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80054f8:	f000 fcd5 	bl	8005ea6 <USBD_GetEpDesc>
 80054fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	2210      	movs	r2, #16
 8005508:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d006      	beq.n	800551e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	2200      	movs	r2, #0
 8005514:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005518:	711a      	strb	r2, [r3, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d006      	beq.n	8005532 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800552c:	711a      	strb	r2, [r3, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2243      	movs	r2, #67	; 0x43
 8005536:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005538:	4b02      	ldr	r3, [pc, #8]	; (8005544 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800553a:	4618      	mov	r0, r3
 800553c:	3718      	adds	r7, #24
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	20000098 	.word	0x20000098

08005548 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	220a      	movs	r2, #10
 8005554:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005556:	4b03      	ldr	r3, [pc, #12]	; (8005564 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005558:	4618      	mov	r0, r3
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr
 8005564:	20000054 	.word	0x20000054

08005568 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d101      	bne.n	800557c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005578:	2303      	movs	r3, #3
 800557a:	e009      	b.n	8005590 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	33b0      	adds	r3, #176	; 0xb0
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800559c:	b480      	push	{r7}
 800559e:	b087      	sub	sp, #28
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	32b0      	adds	r2, #176	; 0xb0
 80055b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055b6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80055be:	2303      	movs	r3, #3
 80055c0:	e008      	b.n	80055d4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	371c      	adds	r7, #28
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	32b0      	adds	r2, #176	; 0xb0
 80055f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005600:	2303      	movs	r3, #3
 8005602:	e004      	b.n	800560e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
	...

0800561c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	32b0      	adds	r2, #176	; 0xb0
 800562e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005632:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005634:	2301      	movs	r3, #1
 8005636:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	32b0      	adds	r2, #176	; 0xb0
 8005642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800564a:	2303      	movs	r3, #3
 800564c:	e025      	b.n	800569a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005654:	2b00      	cmp	r3, #0
 8005656:	d11f      	bne.n	8005698 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	2201      	movs	r2, #1
 800565c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005660:	4b10      	ldr	r3, [pc, #64]	; (80056a4 <USBD_CDC_TransmitPacket+0x88>)
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	f003 020f 	and.w	r2, r3, #15
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	4613      	mov	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4403      	add	r3, r0
 800567a:	3318      	adds	r3, #24
 800567c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800567e:	4b09      	ldr	r3, [pc, #36]	; (80056a4 <USBD_CDC_TransmitPacket+0x88>)
 8005680:	7819      	ldrb	r1, [r3, #0]
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f001 ffb3 	bl	80075fa <USBD_LL_Transmit>

    ret = USBD_OK;
 8005694:	2300      	movs	r3, #0
 8005696:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005698:	7bfb      	ldrb	r3, [r7, #15]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	200000db 	.word	0x200000db

080056a8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	32b0      	adds	r2, #176	; 0xb0
 80056ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056be:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	32b0      	adds	r2, #176	; 0xb0
 80056ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e018      	b.n	8005708 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	7c1b      	ldrb	r3, [r3, #16]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10a      	bne.n	80056f4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80056de:	4b0c      	ldr	r3, [pc, #48]	; (8005710 <USBD_CDC_ReceivePacket+0x68>)
 80056e0:	7819      	ldrb	r1, [r3, #0]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f001 ffa5 	bl	800763c <USBD_LL_PrepareReceive>
 80056f2:	e008      	b.n	8005706 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80056f4:	4b06      	ldr	r3, [pc, #24]	; (8005710 <USBD_CDC_ReceivePacket+0x68>)
 80056f6:	7819      	ldrb	r1, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056fe:	2340      	movs	r3, #64	; 0x40
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f001 ff9b 	bl	800763c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	200000dc 	.word	0x200000dc

08005714 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	4613      	mov	r3, r2
 8005720:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005728:	2303      	movs	r3, #3
 800572a:	e01f      	b.n	800576c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d003      	beq.n	8005752 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	79fa      	ldrb	r2, [r7, #7]
 800575e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f001 fe15 	bl	8007390 <USBD_LL_Init>
 8005766:	4603      	mov	r3, r0
 8005768:	75fb      	strb	r3, [r7, #23]

  return ret;
 800576a:	7dfb      	ldrb	r3, [r7, #23]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3718      	adds	r7, #24
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800577e:	2300      	movs	r3, #0
 8005780:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005788:	2303      	movs	r3, #3
 800578a:	e025      	b.n	80057d8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	32ae      	adds	r2, #174	; 0xae
 800579e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00f      	beq.n	80057c8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	32ae      	adds	r2, #174	; 0xae
 80057b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b8:	f107 020e 	add.w	r2, r7, #14
 80057bc:	4610      	mov	r0, r2
 80057be:	4798      	blx	r3
 80057c0:	4602      	mov	r2, r0
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80057ce:	1c5a      	adds	r2, r3, #1
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f001 fe1d 	bl	8007428 <USBD_LL_Start>
 80057ee:	4603      	mov	r3, r0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3708      	adds	r7, #8
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005800:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005802:	4618      	mov	r0, r3
 8005804:	370c      	adds	r7, #12
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr

0800580e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b084      	sub	sp, #16
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
 8005816:	460b      	mov	r3, r1
 8005818:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800581a:	2300      	movs	r3, #0
 800581c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005824:	2b00      	cmp	r3, #0
 8005826:	d009      	beq.n	800583c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	78fa      	ldrb	r2, [r7, #3]
 8005832:	4611      	mov	r1, r2
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	4798      	blx	r3
 8005838:	4603      	mov	r3, r0
 800583a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800583c:	7bfb      	ldrb	r3, [r7, #15]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b084      	sub	sp, #16
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
 800584e:	460b      	mov	r3, r1
 8005850:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005852:	2300      	movs	r3, #0
 8005854:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	78fa      	ldrb	r2, [r7, #3]
 8005860:	4611      	mov	r1, r2
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	4798      	blx	r3
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800586c:	2303      	movs	r3, #3
 800586e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005870:	7bfb      	ldrb	r3, [r7, #15]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b084      	sub	sp, #16
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800588a:	6839      	ldr	r1, [r7, #0]
 800588c:	4618      	mov	r0, r3
 800588e:	f001 f908 	bl	8006aa2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80058a0:	461a      	mov	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80058ae:	f003 031f 	and.w	r3, r3, #31
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d01a      	beq.n	80058ec <USBD_LL_SetupStage+0x72>
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d822      	bhi.n	8005900 <USBD_LL_SetupStage+0x86>
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <USBD_LL_SetupStage+0x4a>
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d00a      	beq.n	80058d8 <USBD_LL_SetupStage+0x5e>
 80058c2:	e01d      	b.n	8005900 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80058ca:	4619      	mov	r1, r3
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 fb5f 	bl	8005f90 <USBD_StdDevReq>
 80058d2:	4603      	mov	r3, r0
 80058d4:	73fb      	strb	r3, [r7, #15]
      break;
 80058d6:	e020      	b.n	800591a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80058de:	4619      	mov	r1, r3
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 fbc7 	bl	8006074 <USBD_StdItfReq>
 80058e6:	4603      	mov	r3, r0
 80058e8:	73fb      	strb	r3, [r7, #15]
      break;
 80058ea:	e016      	b.n	800591a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80058f2:	4619      	mov	r1, r3
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 fc29 	bl	800614c <USBD_StdEPReq>
 80058fa:	4603      	mov	r3, r0
 80058fc:	73fb      	strb	r3, [r7, #15]
      break;
 80058fe:	e00c      	b.n	800591a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005906:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800590a:	b2db      	uxtb	r3, r3
 800590c:	4619      	mov	r1, r3
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f001 fdea 	bl	80074e8 <USBD_LL_StallEP>
 8005914:	4603      	mov	r3, r0
 8005916:	73fb      	strb	r3, [r7, #15]
      break;
 8005918:	bf00      	nop
  }

  return ret;
 800591a:	7bfb      	ldrb	r3, [r7, #15]
}
 800591c:	4618      	mov	r0, r3
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	460b      	mov	r3, r1
 800592e:	607a      	str	r2, [r7, #4]
 8005930:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005932:	2300      	movs	r3, #0
 8005934:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005936:	7afb      	ldrb	r3, [r7, #11]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d16e      	bne.n	8005a1a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005942:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800594a:	2b03      	cmp	r3, #3
 800594c:	f040 8098 	bne.w	8005a80 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	429a      	cmp	r2, r3
 800595a:	d913      	bls.n	8005984 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	689a      	ldr	r2, [r3, #8]
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	1ad2      	subs	r2, r2, r3
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	68da      	ldr	r2, [r3, #12]
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	4293      	cmp	r3, r2
 8005974:	bf28      	it	cs
 8005976:	4613      	movcs	r3, r2
 8005978:	461a      	mov	r2, r3
 800597a:	6879      	ldr	r1, [r7, #4]
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f001 f984 	bl	8006c8a <USBD_CtlContinueRx>
 8005982:	e07d      	b.n	8005a80 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800598a:	f003 031f 	and.w	r3, r3, #31
 800598e:	2b02      	cmp	r3, #2
 8005990:	d014      	beq.n	80059bc <USBD_LL_DataOutStage+0x98>
 8005992:	2b02      	cmp	r3, #2
 8005994:	d81d      	bhi.n	80059d2 <USBD_LL_DataOutStage+0xae>
 8005996:	2b00      	cmp	r3, #0
 8005998:	d002      	beq.n	80059a0 <USBD_LL_DataOutStage+0x7c>
 800599a:	2b01      	cmp	r3, #1
 800599c:	d003      	beq.n	80059a6 <USBD_LL_DataOutStage+0x82>
 800599e:	e018      	b.n	80059d2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80059a0:	2300      	movs	r3, #0
 80059a2:	75bb      	strb	r3, [r7, #22]
            break;
 80059a4:	e018      	b.n	80059d8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	4619      	mov	r1, r3
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f000 fa5e 	bl	8005e72 <USBD_CoreFindIF>
 80059b6:	4603      	mov	r3, r0
 80059b8:	75bb      	strb	r3, [r7, #22]
            break;
 80059ba:	e00d      	b.n	80059d8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	4619      	mov	r1, r3
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 fa60 	bl	8005e8c <USBD_CoreFindEP>
 80059cc:	4603      	mov	r3, r0
 80059ce:	75bb      	strb	r3, [r7, #22]
            break;
 80059d0:	e002      	b.n	80059d8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80059d2:	2300      	movs	r3, #0
 80059d4:	75bb      	strb	r3, [r7, #22]
            break;
 80059d6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80059d8:	7dbb      	ldrb	r3, [r7, #22]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d119      	bne.n	8005a12 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b03      	cmp	r3, #3
 80059e8:	d113      	bne.n	8005a12 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80059ea:	7dba      	ldrb	r2, [r7, #22]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	32ae      	adds	r2, #174	; 0xae
 80059f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00b      	beq.n	8005a12 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80059fa:	7dba      	ldrb	r2, [r7, #22]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005a02:	7dba      	ldrb	r2, [r7, #22]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	32ae      	adds	r2, #174	; 0xae
 8005a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f001 f94a 	bl	8006cac <USBD_CtlSendStatus>
 8005a18:	e032      	b.n	8005a80 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005a1a:	7afb      	ldrb	r3, [r7, #11]
 8005a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	4619      	mov	r1, r3
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f000 fa31 	bl	8005e8c <USBD_CoreFindEP>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005a2e:	7dbb      	ldrb	r3, [r7, #22]
 8005a30:	2bff      	cmp	r3, #255	; 0xff
 8005a32:	d025      	beq.n	8005a80 <USBD_LL_DataOutStage+0x15c>
 8005a34:	7dbb      	ldrb	r3, [r7, #22]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d122      	bne.n	8005a80 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b03      	cmp	r3, #3
 8005a44:	d117      	bne.n	8005a76 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005a46:	7dba      	ldrb	r2, [r7, #22]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	32ae      	adds	r2, #174	; 0xae
 8005a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00f      	beq.n	8005a76 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005a56:	7dba      	ldrb	r2, [r7, #22]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005a5e:	7dba      	ldrb	r2, [r7, #22]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	32ae      	adds	r2, #174	; 0xae
 8005a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	7afa      	ldrb	r2, [r7, #11]
 8005a6c:	4611      	mov	r1, r2
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	4798      	blx	r3
 8005a72:	4603      	mov	r3, r0
 8005a74:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005a76:	7dfb      	ldrb	r3, [r7, #23]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d001      	beq.n	8005a80 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005a7c:	7dfb      	ldrb	r3, [r7, #23]
 8005a7e:	e000      	b.n	8005a82 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3718      	adds	r7, #24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b086      	sub	sp, #24
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	60f8      	str	r0, [r7, #12]
 8005a92:	460b      	mov	r3, r1
 8005a94:	607a      	str	r2, [r7, #4]
 8005a96:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005a98:	7afb      	ldrb	r3, [r7, #11]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d16f      	bne.n	8005b7e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	3314      	adds	r3, #20
 8005aa2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d15a      	bne.n	8005b64 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	689a      	ldr	r2, [r3, #8]
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d914      	bls.n	8005ae4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	689a      	ldr	r2, [r3, #8]
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	1ad2      	subs	r2, r2, r3
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	461a      	mov	r2, r3
 8005ace:	6879      	ldr	r1, [r7, #4]
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f001 f8ac 	bl	8006c2e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	2200      	movs	r2, #0
 8005ada:	2100      	movs	r1, #0
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f001 fdad 	bl	800763c <USBD_LL_PrepareReceive>
 8005ae2:	e03f      	b.n	8005b64 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	68da      	ldr	r2, [r3, #12]
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d11c      	bne.n	8005b2a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	685a      	ldr	r2, [r3, #4]
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d316      	bcc.n	8005b2a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d20f      	bcs.n	8005b2a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f001 f88d 	bl	8006c2e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	2200      	movs	r2, #0
 8005b20:	2100      	movs	r1, #0
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f001 fd8a 	bl	800763c <USBD_LL_PrepareReceive>
 8005b28:	e01c      	b.n	8005b64 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b03      	cmp	r3, #3
 8005b34:	d10f      	bne.n	8005b56 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d009      	beq.n	8005b56 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b56:	2180      	movs	r1, #128	; 0x80
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f001 fcc5 	bl	80074e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f001 f8b7 	bl	8006cd2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d03a      	beq.n	8005be4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f7ff fe42 	bl	80057f8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005b7c:	e032      	b.n	8005be4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005b7e:	7afb      	ldrb	r3, [r7, #11]
 8005b80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	4619      	mov	r1, r3
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f000 f97f 	bl	8005e8c <USBD_CoreFindEP>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b92:	7dfb      	ldrb	r3, [r7, #23]
 8005b94:	2bff      	cmp	r3, #255	; 0xff
 8005b96:	d025      	beq.n	8005be4 <USBD_LL_DataInStage+0x15a>
 8005b98:	7dfb      	ldrb	r3, [r7, #23]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d122      	bne.n	8005be4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b03      	cmp	r3, #3
 8005ba8:	d11c      	bne.n	8005be4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005baa:	7dfa      	ldrb	r2, [r7, #23]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	32ae      	adds	r2, #174	; 0xae
 8005bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d014      	beq.n	8005be4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005bba:	7dfa      	ldrb	r2, [r7, #23]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005bc2:	7dfa      	ldrb	r2, [r7, #23]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	32ae      	adds	r2, #174	; 0xae
 8005bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	7afa      	ldrb	r2, [r7, #11]
 8005bd0:	4611      	mov	r1, r2
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	4798      	blx	r3
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005bda:	7dbb      	ldrb	r3, [r7, #22]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005be0:	7dbb      	ldrb	r3, [r7, #22]
 8005be2:	e000      	b.n	8005be6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3718      	adds	r7, #24
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b084      	sub	sp, #16
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d014      	beq.n	8005c54 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00e      	beq.n	8005c54 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	6852      	ldr	r2, [r2, #4]
 8005c42:	b2d2      	uxtb	r2, r2
 8005c44:	4611      	mov	r1, r2
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	4798      	blx	r3
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d001      	beq.n	8005c54 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005c50:	2303      	movs	r3, #3
 8005c52:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c54:	2340      	movs	r3, #64	; 0x40
 8005c56:	2200      	movs	r2, #0
 8005c58:	2100      	movs	r1, #0
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f001 fbff 	bl	800745e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2240      	movs	r2, #64	; 0x40
 8005c6c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c70:	2340      	movs	r3, #64	; 0x40
 8005c72:	2200      	movs	r2, #0
 8005c74:	2180      	movs	r1, #128	; 0x80
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f001 fbf1 	bl	800745e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2240      	movs	r2, #64	; 0x40
 8005c86:	621a      	str	r2, [r3, #32]

  return ret;
 8005c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b083      	sub	sp, #12
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	78fa      	ldrb	r2, [r7, #3]
 8005ca2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b083      	sub	sp, #12
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cc0:	b2da      	uxtb	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2204      	movs	r2, #4
 8005ccc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b083      	sub	sp, #12
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	2b04      	cmp	r3, #4
 8005cf0:	d106      	bne.n	8005d00 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005cf8:	b2da      	uxtb	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr

08005d0e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b082      	sub	sp, #8
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b03      	cmp	r3, #3
 8005d20:	d110      	bne.n	8005d44 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00b      	beq.n	8005d44 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d32:	69db      	ldr	r3, [r3, #28]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d005      	beq.n	8005d44 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b082      	sub	sp, #8
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
 8005d56:	460b      	mov	r3, r1
 8005d58:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	32ae      	adds	r2, #174	; 0xae
 8005d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d101      	bne.n	8005d70 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e01c      	b.n	8005daa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b03      	cmp	r3, #3
 8005d7a:	d115      	bne.n	8005da8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	32ae      	adds	r2, #174	; 0xae
 8005d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00b      	beq.n	8005da8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	32ae      	adds	r2, #174	; 0xae
 8005d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	78fa      	ldrb	r2, [r7, #3]
 8005da2:	4611      	mov	r1, r2
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3708      	adds	r7, #8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b082      	sub	sp, #8
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
 8005dba:	460b      	mov	r3, r1
 8005dbc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	32ae      	adds	r2, #174	; 0xae
 8005dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d101      	bne.n	8005dd4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e01c      	b.n	8005e0e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b03      	cmp	r3, #3
 8005dde:	d115      	bne.n	8005e0c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	32ae      	adds	r2, #174	; 0xae
 8005dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00b      	beq.n	8005e0c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	32ae      	adds	r2, #174	; 0xae
 8005dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	78fa      	ldrb	r2, [r7, #3]
 8005e06:	4611      	mov	r1, r2
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3708      	adds	r7, #8
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b083      	sub	sp, #12
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005e34:	2300      	movs	r3, #0
 8005e36:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00e      	beq.n	8005e68 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	6852      	ldr	r2, [r2, #4]
 8005e56:	b2d2      	uxtb	r2, r2
 8005e58:	4611      	mov	r1, r2
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	4798      	blx	r3
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005e64:	2303      	movs	r3, #3
 8005e66:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b083      	sub	sp, #12
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005e7e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	460b      	mov	r3, r1
 8005e96:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005e98:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	370c      	adds	r7, #12
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr

08005ea6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b086      	sub	sp, #24
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
 8005eae:	460b      	mov	r3, r1
 8005eb0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	885b      	ldrh	r3, [r3, #2]
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d920      	bls.n	8005f10 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005ed6:	e013      	b.n	8005f00 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005ed8:	f107 030a 	add.w	r3, r7, #10
 8005edc:	4619      	mov	r1, r3
 8005ede:	6978      	ldr	r0, [r7, #20]
 8005ee0:	f000 f81b 	bl	8005f1a <USBD_GetNextDesc>
 8005ee4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	785b      	ldrb	r3, [r3, #1]
 8005eea:	2b05      	cmp	r3, #5
 8005eec:	d108      	bne.n	8005f00 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	789b      	ldrb	r3, [r3, #2]
 8005ef6:	78fa      	ldrb	r2, [r7, #3]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d008      	beq.n	8005f0e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005efc:	2300      	movs	r3, #0
 8005efe:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	885b      	ldrh	r3, [r3, #2]
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	897b      	ldrh	r3, [r7, #10]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d8e5      	bhi.n	8005ed8 <USBD_GetEpDesc+0x32>
 8005f0c:	e000      	b.n	8005f10 <USBD_GetEpDesc+0x6a>
          break;
 8005f0e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005f10:	693b      	ldr	r3, [r7, #16]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3718      	adds	r7, #24
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b085      	sub	sp, #20
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	881a      	ldrh	r2, [r3, #0]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	4413      	add	r3, r2
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4413      	add	r3, r2
 8005f44:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005f46:	68fb      	ldr	r3, [r7, #12]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005f72:	8a3b      	ldrh	r3, [r7, #16]
 8005f74:	021b      	lsls	r3, r3, #8
 8005f76:	b21a      	sxth	r2, r3
 8005f78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	b21b      	sxth	r3, r3
 8005f80:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005f82:	89fb      	ldrh	r3, [r7, #14]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	371c      	adds	r7, #28
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fa6:	2b40      	cmp	r3, #64	; 0x40
 8005fa8:	d005      	beq.n	8005fb6 <USBD_StdDevReq+0x26>
 8005faa:	2b40      	cmp	r3, #64	; 0x40
 8005fac:	d857      	bhi.n	800605e <USBD_StdDevReq+0xce>
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00f      	beq.n	8005fd2 <USBD_StdDevReq+0x42>
 8005fb2:	2b20      	cmp	r3, #32
 8005fb4:	d153      	bne.n	800605e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	32ae      	adds	r2, #174	; 0xae
 8005fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	6839      	ldr	r1, [r7, #0]
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	4798      	blx	r3
 8005fcc:	4603      	mov	r3, r0
 8005fce:	73fb      	strb	r3, [r7, #15]
      break;
 8005fd0:	e04a      	b.n	8006068 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	785b      	ldrb	r3, [r3, #1]
 8005fd6:	2b09      	cmp	r3, #9
 8005fd8:	d83b      	bhi.n	8006052 <USBD_StdDevReq+0xc2>
 8005fda:	a201      	add	r2, pc, #4	; (adr r2, 8005fe0 <USBD_StdDevReq+0x50>)
 8005fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe0:	08006035 	.word	0x08006035
 8005fe4:	08006049 	.word	0x08006049
 8005fe8:	08006053 	.word	0x08006053
 8005fec:	0800603f 	.word	0x0800603f
 8005ff0:	08006053 	.word	0x08006053
 8005ff4:	08006013 	.word	0x08006013
 8005ff8:	08006009 	.word	0x08006009
 8005ffc:	08006053 	.word	0x08006053
 8006000:	0800602b 	.word	0x0800602b
 8006004:	0800601d 	.word	0x0800601d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006008:	6839      	ldr	r1, [r7, #0]
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fa3c 	bl	8006488 <USBD_GetDescriptor>
          break;
 8006010:	e024      	b.n	800605c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006012:	6839      	ldr	r1, [r7, #0]
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 fba1 	bl	800675c <USBD_SetAddress>
          break;
 800601a:	e01f      	b.n	800605c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800601c:	6839      	ldr	r1, [r7, #0]
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 fbe0 	bl	80067e4 <USBD_SetConfig>
 8006024:	4603      	mov	r3, r0
 8006026:	73fb      	strb	r3, [r7, #15]
          break;
 8006028:	e018      	b.n	800605c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800602a:	6839      	ldr	r1, [r7, #0]
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 fc83 	bl	8006938 <USBD_GetConfig>
          break;
 8006032:	e013      	b.n	800605c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006034:	6839      	ldr	r1, [r7, #0]
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fcb4 	bl	80069a4 <USBD_GetStatus>
          break;
 800603c:	e00e      	b.n	800605c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800603e:	6839      	ldr	r1, [r7, #0]
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 fce3 	bl	8006a0c <USBD_SetFeature>
          break;
 8006046:	e009      	b.n	800605c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006048:	6839      	ldr	r1, [r7, #0]
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fd07 	bl	8006a5e <USBD_ClrFeature>
          break;
 8006050:	e004      	b.n	800605c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006052:	6839      	ldr	r1, [r7, #0]
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 fd5e 	bl	8006b16 <USBD_CtlError>
          break;
 800605a:	bf00      	nop
      }
      break;
 800605c:	e004      	b.n	8006068 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800605e:	6839      	ldr	r1, [r7, #0]
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 fd58 	bl	8006b16 <USBD_CtlError>
      break;
 8006066:	bf00      	nop
  }

  return ret;
 8006068:	7bfb      	ldrb	r3, [r7, #15]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop

08006074 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800607e:	2300      	movs	r3, #0
 8006080:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800608a:	2b40      	cmp	r3, #64	; 0x40
 800608c:	d005      	beq.n	800609a <USBD_StdItfReq+0x26>
 800608e:	2b40      	cmp	r3, #64	; 0x40
 8006090:	d852      	bhi.n	8006138 <USBD_StdItfReq+0xc4>
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <USBD_StdItfReq+0x26>
 8006096:	2b20      	cmp	r3, #32
 8006098:	d14e      	bne.n	8006138 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	3b01      	subs	r3, #1
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d840      	bhi.n	800612a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	889b      	ldrh	r3, [r3, #4]
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d836      	bhi.n	8006120 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	889b      	ldrh	r3, [r3, #4]
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	4619      	mov	r1, r3
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7ff fed9 	bl	8005e72 <USBD_CoreFindIF>
 80060c0:	4603      	mov	r3, r0
 80060c2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80060c4:	7bbb      	ldrb	r3, [r7, #14]
 80060c6:	2bff      	cmp	r3, #255	; 0xff
 80060c8:	d01d      	beq.n	8006106 <USBD_StdItfReq+0x92>
 80060ca:	7bbb      	ldrb	r3, [r7, #14]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d11a      	bne.n	8006106 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80060d0:	7bba      	ldrb	r2, [r7, #14]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	32ae      	adds	r2, #174	; 0xae
 80060d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00f      	beq.n	8006100 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80060e0:	7bba      	ldrb	r2, [r7, #14]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80060e8:	7bba      	ldrb	r2, [r7, #14]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	32ae      	adds	r2, #174	; 0xae
 80060ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	6839      	ldr	r1, [r7, #0]
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	4798      	blx	r3
 80060fa:	4603      	mov	r3, r0
 80060fc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80060fe:	e004      	b.n	800610a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006100:	2303      	movs	r3, #3
 8006102:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006104:	e001      	b.n	800610a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006106:	2303      	movs	r3, #3
 8006108:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	88db      	ldrh	r3, [r3, #6]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d110      	bne.n	8006134 <USBD_StdItfReq+0xc0>
 8006112:	7bfb      	ldrb	r3, [r7, #15]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10d      	bne.n	8006134 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 fdc7 	bl	8006cac <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800611e:	e009      	b.n	8006134 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006120:	6839      	ldr	r1, [r7, #0]
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fcf7 	bl	8006b16 <USBD_CtlError>
          break;
 8006128:	e004      	b.n	8006134 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800612a:	6839      	ldr	r1, [r7, #0]
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 fcf2 	bl	8006b16 <USBD_CtlError>
          break;
 8006132:	e000      	b.n	8006136 <USBD_StdItfReq+0xc2>
          break;
 8006134:	bf00      	nop
      }
      break;
 8006136:	e004      	b.n	8006142 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006138:	6839      	ldr	r1, [r7, #0]
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fceb 	bl	8006b16 <USBD_CtlError>
      break;
 8006140:	bf00      	nop
  }

  return ret;
 8006142:	7bfb      	ldrb	r3, [r7, #15]
}
 8006144:	4618      	mov	r0, r3
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	889b      	ldrh	r3, [r3, #4]
 800615e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006168:	2b40      	cmp	r3, #64	; 0x40
 800616a:	d007      	beq.n	800617c <USBD_StdEPReq+0x30>
 800616c:	2b40      	cmp	r3, #64	; 0x40
 800616e:	f200 817f 	bhi.w	8006470 <USBD_StdEPReq+0x324>
 8006172:	2b00      	cmp	r3, #0
 8006174:	d02a      	beq.n	80061cc <USBD_StdEPReq+0x80>
 8006176:	2b20      	cmp	r3, #32
 8006178:	f040 817a 	bne.w	8006470 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800617c:	7bbb      	ldrb	r3, [r7, #14]
 800617e:	4619      	mov	r1, r3
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f7ff fe83 	bl	8005e8c <USBD_CoreFindEP>
 8006186:	4603      	mov	r3, r0
 8006188:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800618a:	7b7b      	ldrb	r3, [r7, #13]
 800618c:	2bff      	cmp	r3, #255	; 0xff
 800618e:	f000 8174 	beq.w	800647a <USBD_StdEPReq+0x32e>
 8006192:	7b7b      	ldrb	r3, [r7, #13]
 8006194:	2b00      	cmp	r3, #0
 8006196:	f040 8170 	bne.w	800647a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800619a:	7b7a      	ldrb	r2, [r7, #13]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80061a2:	7b7a      	ldrb	r2, [r7, #13]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	32ae      	adds	r2, #174	; 0xae
 80061a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 8163 	beq.w	800647a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80061b4:	7b7a      	ldrb	r2, [r7, #13]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	32ae      	adds	r2, #174	; 0xae
 80061ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	6839      	ldr	r1, [r7, #0]
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	4798      	blx	r3
 80061c6:	4603      	mov	r3, r0
 80061c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80061ca:	e156      	b.n	800647a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	785b      	ldrb	r3, [r3, #1]
 80061d0:	2b03      	cmp	r3, #3
 80061d2:	d008      	beq.n	80061e6 <USBD_StdEPReq+0x9a>
 80061d4:	2b03      	cmp	r3, #3
 80061d6:	f300 8145 	bgt.w	8006464 <USBD_StdEPReq+0x318>
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 809b 	beq.w	8006316 <USBD_StdEPReq+0x1ca>
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d03c      	beq.n	800625e <USBD_StdEPReq+0x112>
 80061e4:	e13e      	b.n	8006464 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d002      	beq.n	80061f8 <USBD_StdEPReq+0xac>
 80061f2:	2b03      	cmp	r3, #3
 80061f4:	d016      	beq.n	8006224 <USBD_StdEPReq+0xd8>
 80061f6:	e02c      	b.n	8006252 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80061f8:	7bbb      	ldrb	r3, [r7, #14]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00d      	beq.n	800621a <USBD_StdEPReq+0xce>
 80061fe:	7bbb      	ldrb	r3, [r7, #14]
 8006200:	2b80      	cmp	r3, #128	; 0x80
 8006202:	d00a      	beq.n	800621a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006204:	7bbb      	ldrb	r3, [r7, #14]
 8006206:	4619      	mov	r1, r3
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f001 f96d 	bl	80074e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800620e:	2180      	movs	r1, #128	; 0x80
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f001 f969 	bl	80074e8 <USBD_LL_StallEP>
 8006216:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006218:	e020      	b.n	800625c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800621a:	6839      	ldr	r1, [r7, #0]
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 fc7a 	bl	8006b16 <USBD_CtlError>
              break;
 8006222:	e01b      	b.n	800625c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	885b      	ldrh	r3, [r3, #2]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10e      	bne.n	800624a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800622c:	7bbb      	ldrb	r3, [r7, #14]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00b      	beq.n	800624a <USBD_StdEPReq+0xfe>
 8006232:	7bbb      	ldrb	r3, [r7, #14]
 8006234:	2b80      	cmp	r3, #128	; 0x80
 8006236:	d008      	beq.n	800624a <USBD_StdEPReq+0xfe>
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	88db      	ldrh	r3, [r3, #6]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d104      	bne.n	800624a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006240:	7bbb      	ldrb	r3, [r7, #14]
 8006242:	4619      	mov	r1, r3
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f001 f94f 	bl	80074e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 fd2e 	bl	8006cac <USBD_CtlSendStatus>

              break;
 8006250:	e004      	b.n	800625c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006252:	6839      	ldr	r1, [r7, #0]
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 fc5e 	bl	8006b16 <USBD_CtlError>
              break;
 800625a:	bf00      	nop
          }
          break;
 800625c:	e107      	b.n	800646e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b02      	cmp	r3, #2
 8006268:	d002      	beq.n	8006270 <USBD_StdEPReq+0x124>
 800626a:	2b03      	cmp	r3, #3
 800626c:	d016      	beq.n	800629c <USBD_StdEPReq+0x150>
 800626e:	e04b      	b.n	8006308 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006270:	7bbb      	ldrb	r3, [r7, #14]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00d      	beq.n	8006292 <USBD_StdEPReq+0x146>
 8006276:	7bbb      	ldrb	r3, [r7, #14]
 8006278:	2b80      	cmp	r3, #128	; 0x80
 800627a:	d00a      	beq.n	8006292 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800627c:	7bbb      	ldrb	r3, [r7, #14]
 800627e:	4619      	mov	r1, r3
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f001 f931 	bl	80074e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006286:	2180      	movs	r1, #128	; 0x80
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f001 f92d 	bl	80074e8 <USBD_LL_StallEP>
 800628e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006290:	e040      	b.n	8006314 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006292:	6839      	ldr	r1, [r7, #0]
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 fc3e 	bl	8006b16 <USBD_CtlError>
              break;
 800629a:	e03b      	b.n	8006314 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	885b      	ldrh	r3, [r3, #2]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d136      	bne.n	8006312 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80062a4:	7bbb      	ldrb	r3, [r7, #14]
 80062a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d004      	beq.n	80062b8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80062ae:	7bbb      	ldrb	r3, [r7, #14]
 80062b0:	4619      	mov	r1, r3
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f001 f937 	bl	8007526 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fcf7 	bl	8006cac <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80062be:	7bbb      	ldrb	r3, [r7, #14]
 80062c0:	4619      	mov	r1, r3
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7ff fde2 	bl	8005e8c <USBD_CoreFindEP>
 80062c8:	4603      	mov	r3, r0
 80062ca:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062cc:	7b7b      	ldrb	r3, [r7, #13]
 80062ce:	2bff      	cmp	r3, #255	; 0xff
 80062d0:	d01f      	beq.n	8006312 <USBD_StdEPReq+0x1c6>
 80062d2:	7b7b      	ldrb	r3, [r7, #13]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d11c      	bne.n	8006312 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80062d8:	7b7a      	ldrb	r2, [r7, #13]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80062e0:	7b7a      	ldrb	r2, [r7, #13]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	32ae      	adds	r2, #174	; 0xae
 80062e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d010      	beq.n	8006312 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80062f0:	7b7a      	ldrb	r2, [r7, #13]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	32ae      	adds	r2, #174	; 0xae
 80062f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	6839      	ldr	r1, [r7, #0]
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	4798      	blx	r3
 8006302:	4603      	mov	r3, r0
 8006304:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006306:	e004      	b.n	8006312 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006308:	6839      	ldr	r1, [r7, #0]
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 fc03 	bl	8006b16 <USBD_CtlError>
              break;
 8006310:	e000      	b.n	8006314 <USBD_StdEPReq+0x1c8>
              break;
 8006312:	bf00      	nop
          }
          break;
 8006314:	e0ab      	b.n	800646e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b02      	cmp	r3, #2
 8006320:	d002      	beq.n	8006328 <USBD_StdEPReq+0x1dc>
 8006322:	2b03      	cmp	r3, #3
 8006324:	d032      	beq.n	800638c <USBD_StdEPReq+0x240>
 8006326:	e097      	b.n	8006458 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006328:	7bbb      	ldrb	r3, [r7, #14]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d007      	beq.n	800633e <USBD_StdEPReq+0x1f2>
 800632e:	7bbb      	ldrb	r3, [r7, #14]
 8006330:	2b80      	cmp	r3, #128	; 0x80
 8006332:	d004      	beq.n	800633e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006334:	6839      	ldr	r1, [r7, #0]
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fbed 	bl	8006b16 <USBD_CtlError>
                break;
 800633c:	e091      	b.n	8006462 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800633e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006342:	2b00      	cmp	r3, #0
 8006344:	da0b      	bge.n	800635e <USBD_StdEPReq+0x212>
 8006346:	7bbb      	ldrb	r3, [r7, #14]
 8006348:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800634c:	4613      	mov	r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	4413      	add	r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	3310      	adds	r3, #16
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	4413      	add	r3, r2
 800635a:	3304      	adds	r3, #4
 800635c:	e00b      	b.n	8006376 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800635e:	7bbb      	ldrb	r3, [r7, #14]
 8006360:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006364:	4613      	mov	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4413      	add	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	4413      	add	r3, r2
 8006374:	3304      	adds	r3, #4
 8006376:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	2200      	movs	r2, #0
 800637c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	2202      	movs	r2, #2
 8006382:	4619      	mov	r1, r3
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 fc37 	bl	8006bf8 <USBD_CtlSendData>
              break;
 800638a:	e06a      	b.n	8006462 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800638c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006390:	2b00      	cmp	r3, #0
 8006392:	da11      	bge.n	80063b8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006394:	7bbb      	ldrb	r3, [r7, #14]
 8006396:	f003 020f 	and.w	r2, r3, #15
 800639a:	6879      	ldr	r1, [r7, #4]
 800639c:	4613      	mov	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	440b      	add	r3, r1
 80063a6:	3324      	adds	r3, #36	; 0x24
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d117      	bne.n	80063de <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80063ae:	6839      	ldr	r1, [r7, #0]
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 fbb0 	bl	8006b16 <USBD_CtlError>
                  break;
 80063b6:	e054      	b.n	8006462 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80063b8:	7bbb      	ldrb	r3, [r7, #14]
 80063ba:	f003 020f 	and.w	r2, r3, #15
 80063be:	6879      	ldr	r1, [r7, #4]
 80063c0:	4613      	mov	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	440b      	add	r3, r1
 80063ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80063ce:	881b      	ldrh	r3, [r3, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d104      	bne.n	80063de <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80063d4:	6839      	ldr	r1, [r7, #0]
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 fb9d 	bl	8006b16 <USBD_CtlError>
                  break;
 80063dc:	e041      	b.n	8006462 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	da0b      	bge.n	80063fe <USBD_StdEPReq+0x2b2>
 80063e6:	7bbb      	ldrb	r3, [r7, #14]
 80063e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063ec:	4613      	mov	r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	4413      	add	r3, r2
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	3310      	adds	r3, #16
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	4413      	add	r3, r2
 80063fa:	3304      	adds	r3, #4
 80063fc:	e00b      	b.n	8006416 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80063fe:	7bbb      	ldrb	r3, [r7, #14]
 8006400:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006404:	4613      	mov	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4413      	add	r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	4413      	add	r3, r2
 8006414:	3304      	adds	r3, #4
 8006416:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006418:	7bbb      	ldrb	r3, [r7, #14]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d002      	beq.n	8006424 <USBD_StdEPReq+0x2d8>
 800641e:	7bbb      	ldrb	r3, [r7, #14]
 8006420:	2b80      	cmp	r3, #128	; 0x80
 8006422:	d103      	bne.n	800642c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	2200      	movs	r2, #0
 8006428:	601a      	str	r2, [r3, #0]
 800642a:	e00e      	b.n	800644a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800642c:	7bbb      	ldrb	r3, [r7, #14]
 800642e:	4619      	mov	r1, r3
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f001 f897 	bl	8007564 <USBD_LL_IsStallEP>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d003      	beq.n	8006444 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	2201      	movs	r2, #1
 8006440:	601a      	str	r2, [r3, #0]
 8006442:	e002      	b.n	800644a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	2200      	movs	r2, #0
 8006448:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	2202      	movs	r2, #2
 800644e:	4619      	mov	r1, r3
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 fbd1 	bl	8006bf8 <USBD_CtlSendData>
              break;
 8006456:	e004      	b.n	8006462 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006458:	6839      	ldr	r1, [r7, #0]
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fb5b 	bl	8006b16 <USBD_CtlError>
              break;
 8006460:	bf00      	nop
          }
          break;
 8006462:	e004      	b.n	800646e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006464:	6839      	ldr	r1, [r7, #0]
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fb55 	bl	8006b16 <USBD_CtlError>
          break;
 800646c:	bf00      	nop
      }
      break;
 800646e:	e005      	b.n	800647c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006470:	6839      	ldr	r1, [r7, #0]
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fb4f 	bl	8006b16 <USBD_CtlError>
      break;
 8006478:	e000      	b.n	800647c <USBD_StdEPReq+0x330>
      break;
 800647a:	bf00      	nop
  }

  return ret;
 800647c:	7bfb      	ldrb	r3, [r7, #15]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
	...

08006488 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006496:	2300      	movs	r3, #0
 8006498:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800649a:	2300      	movs	r3, #0
 800649c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	885b      	ldrh	r3, [r3, #2]
 80064a2:	0a1b      	lsrs	r3, r3, #8
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	3b01      	subs	r3, #1
 80064a8:	2b06      	cmp	r3, #6
 80064aa:	f200 8128 	bhi.w	80066fe <USBD_GetDescriptor+0x276>
 80064ae:	a201      	add	r2, pc, #4	; (adr r2, 80064b4 <USBD_GetDescriptor+0x2c>)
 80064b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b4:	080064d1 	.word	0x080064d1
 80064b8:	080064e9 	.word	0x080064e9
 80064bc:	08006529 	.word	0x08006529
 80064c0:	080066ff 	.word	0x080066ff
 80064c4:	080066ff 	.word	0x080066ff
 80064c8:	0800669f 	.word	0x0800669f
 80064cc:	080066cb 	.word	0x080066cb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	7c12      	ldrb	r2, [r2, #16]
 80064dc:	f107 0108 	add.w	r1, r7, #8
 80064e0:	4610      	mov	r0, r2
 80064e2:	4798      	blx	r3
 80064e4:	60f8      	str	r0, [r7, #12]
      break;
 80064e6:	e112      	b.n	800670e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	7c1b      	ldrb	r3, [r3, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10d      	bne.n	800650c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f8:	f107 0208 	add.w	r2, r7, #8
 80064fc:	4610      	mov	r0, r2
 80064fe:	4798      	blx	r3
 8006500:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	3301      	adds	r3, #1
 8006506:	2202      	movs	r2, #2
 8006508:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800650a:	e100      	b.n	800670e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006514:	f107 0208 	add.w	r2, r7, #8
 8006518:	4610      	mov	r0, r2
 800651a:	4798      	blx	r3
 800651c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	3301      	adds	r3, #1
 8006522:	2202      	movs	r2, #2
 8006524:	701a      	strb	r2, [r3, #0]
      break;
 8006526:	e0f2      	b.n	800670e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	885b      	ldrh	r3, [r3, #2]
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b05      	cmp	r3, #5
 8006530:	f200 80ac 	bhi.w	800668c <USBD_GetDescriptor+0x204>
 8006534:	a201      	add	r2, pc, #4	; (adr r2, 800653c <USBD_GetDescriptor+0xb4>)
 8006536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653a:	bf00      	nop
 800653c:	08006555 	.word	0x08006555
 8006540:	08006589 	.word	0x08006589
 8006544:	080065bd 	.word	0x080065bd
 8006548:	080065f1 	.word	0x080065f1
 800654c:	08006625 	.word	0x08006625
 8006550:	08006659 	.word	0x08006659
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00b      	beq.n	8006578 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	7c12      	ldrb	r2, [r2, #16]
 800656c:	f107 0108 	add.w	r1, r7, #8
 8006570:	4610      	mov	r0, r2
 8006572:	4798      	blx	r3
 8006574:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006576:	e091      	b.n	800669c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006578:	6839      	ldr	r1, [r7, #0]
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 facb 	bl	8006b16 <USBD_CtlError>
            err++;
 8006580:	7afb      	ldrb	r3, [r7, #11]
 8006582:	3301      	adds	r3, #1
 8006584:	72fb      	strb	r3, [r7, #11]
          break;
 8006586:	e089      	b.n	800669c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00b      	beq.n	80065ac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	7c12      	ldrb	r2, [r2, #16]
 80065a0:	f107 0108 	add.w	r1, r7, #8
 80065a4:	4610      	mov	r0, r2
 80065a6:	4798      	blx	r3
 80065a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065aa:	e077      	b.n	800669c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065ac:	6839      	ldr	r1, [r7, #0]
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 fab1 	bl	8006b16 <USBD_CtlError>
            err++;
 80065b4:	7afb      	ldrb	r3, [r7, #11]
 80065b6:	3301      	adds	r3, #1
 80065b8:	72fb      	strb	r3, [r7, #11]
          break;
 80065ba:	e06f      	b.n	800669c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00b      	beq.n	80065e0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	7c12      	ldrb	r2, [r2, #16]
 80065d4:	f107 0108 	add.w	r1, r7, #8
 80065d8:	4610      	mov	r0, r2
 80065da:	4798      	blx	r3
 80065dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065de:	e05d      	b.n	800669c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065e0:	6839      	ldr	r1, [r7, #0]
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 fa97 	bl	8006b16 <USBD_CtlError>
            err++;
 80065e8:	7afb      	ldrb	r3, [r7, #11]
 80065ea:	3301      	adds	r3, #1
 80065ec:	72fb      	strb	r3, [r7, #11]
          break;
 80065ee:	e055      	b.n	800669c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00b      	beq.n	8006614 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	7c12      	ldrb	r2, [r2, #16]
 8006608:	f107 0108 	add.w	r1, r7, #8
 800660c:	4610      	mov	r0, r2
 800660e:	4798      	blx	r3
 8006610:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006612:	e043      	b.n	800669c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006614:	6839      	ldr	r1, [r7, #0]
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fa7d 	bl	8006b16 <USBD_CtlError>
            err++;
 800661c:	7afb      	ldrb	r3, [r7, #11]
 800661e:	3301      	adds	r3, #1
 8006620:	72fb      	strb	r3, [r7, #11]
          break;
 8006622:	e03b      	b.n	800669c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00b      	beq.n	8006648 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	7c12      	ldrb	r2, [r2, #16]
 800663c:	f107 0108 	add.w	r1, r7, #8
 8006640:	4610      	mov	r0, r2
 8006642:	4798      	blx	r3
 8006644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006646:	e029      	b.n	800669c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006648:	6839      	ldr	r1, [r7, #0]
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 fa63 	bl	8006b16 <USBD_CtlError>
            err++;
 8006650:	7afb      	ldrb	r3, [r7, #11]
 8006652:	3301      	adds	r3, #1
 8006654:	72fb      	strb	r3, [r7, #11]
          break;
 8006656:	e021      	b.n	800669c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00b      	beq.n	800667c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	7c12      	ldrb	r2, [r2, #16]
 8006670:	f107 0108 	add.w	r1, r7, #8
 8006674:	4610      	mov	r0, r2
 8006676:	4798      	blx	r3
 8006678:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800667a:	e00f      	b.n	800669c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800667c:	6839      	ldr	r1, [r7, #0]
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fa49 	bl	8006b16 <USBD_CtlError>
            err++;
 8006684:	7afb      	ldrb	r3, [r7, #11]
 8006686:	3301      	adds	r3, #1
 8006688:	72fb      	strb	r3, [r7, #11]
          break;
 800668a:	e007      	b.n	800669c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800668c:	6839      	ldr	r1, [r7, #0]
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 fa41 	bl	8006b16 <USBD_CtlError>
          err++;
 8006694:	7afb      	ldrb	r3, [r7, #11]
 8006696:	3301      	adds	r3, #1
 8006698:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800669a:	bf00      	nop
      }
      break;
 800669c:	e037      	b.n	800670e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	7c1b      	ldrb	r3, [r3, #16]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d109      	bne.n	80066ba <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ae:	f107 0208 	add.w	r2, r7, #8
 80066b2:	4610      	mov	r0, r2
 80066b4:	4798      	blx	r3
 80066b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80066b8:	e029      	b.n	800670e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80066ba:	6839      	ldr	r1, [r7, #0]
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fa2a 	bl	8006b16 <USBD_CtlError>
        err++;
 80066c2:	7afb      	ldrb	r3, [r7, #11]
 80066c4:	3301      	adds	r3, #1
 80066c6:	72fb      	strb	r3, [r7, #11]
      break;
 80066c8:	e021      	b.n	800670e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	7c1b      	ldrb	r3, [r3, #16]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10d      	bne.n	80066ee <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066da:	f107 0208 	add.w	r2, r7, #8
 80066de:	4610      	mov	r0, r2
 80066e0:	4798      	blx	r3
 80066e2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	3301      	adds	r3, #1
 80066e8:	2207      	movs	r2, #7
 80066ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80066ec:	e00f      	b.n	800670e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80066ee:	6839      	ldr	r1, [r7, #0]
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 fa10 	bl	8006b16 <USBD_CtlError>
        err++;
 80066f6:	7afb      	ldrb	r3, [r7, #11]
 80066f8:	3301      	adds	r3, #1
 80066fa:	72fb      	strb	r3, [r7, #11]
      break;
 80066fc:	e007      	b.n	800670e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80066fe:	6839      	ldr	r1, [r7, #0]
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 fa08 	bl	8006b16 <USBD_CtlError>
      err++;
 8006706:	7afb      	ldrb	r3, [r7, #11]
 8006708:	3301      	adds	r3, #1
 800670a:	72fb      	strb	r3, [r7, #11]
      break;
 800670c:	bf00      	nop
  }

  if (err != 0U)
 800670e:	7afb      	ldrb	r3, [r7, #11]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d11e      	bne.n	8006752 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	88db      	ldrh	r3, [r3, #6]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d016      	beq.n	800674a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800671c:	893b      	ldrh	r3, [r7, #8]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00e      	beq.n	8006740 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	88da      	ldrh	r2, [r3, #6]
 8006726:	893b      	ldrh	r3, [r7, #8]
 8006728:	4293      	cmp	r3, r2
 800672a:	bf28      	it	cs
 800672c:	4613      	movcs	r3, r2
 800672e:	b29b      	uxth	r3, r3
 8006730:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006732:	893b      	ldrh	r3, [r7, #8]
 8006734:	461a      	mov	r2, r3
 8006736:	68f9      	ldr	r1, [r7, #12]
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 fa5d 	bl	8006bf8 <USBD_CtlSendData>
 800673e:	e009      	b.n	8006754 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006740:	6839      	ldr	r1, [r7, #0]
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 f9e7 	bl	8006b16 <USBD_CtlError>
 8006748:	e004      	b.n	8006754 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 faae 	bl	8006cac <USBD_CtlSendStatus>
 8006750:	e000      	b.n	8006754 <USBD_GetDescriptor+0x2cc>
    return;
 8006752:	bf00      	nop
  }
}
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop

0800675c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	889b      	ldrh	r3, [r3, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d131      	bne.n	80067d2 <USBD_SetAddress+0x76>
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	88db      	ldrh	r3, [r3, #6]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d12d      	bne.n	80067d2 <USBD_SetAddress+0x76>
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	885b      	ldrh	r3, [r3, #2]
 800677a:	2b7f      	cmp	r3, #127	; 0x7f
 800677c:	d829      	bhi.n	80067d2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	885b      	ldrh	r3, [r3, #2]
 8006782:	b2db      	uxtb	r3, r3
 8006784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006788:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b03      	cmp	r3, #3
 8006794:	d104      	bne.n	80067a0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006796:	6839      	ldr	r1, [r7, #0]
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f9bc 	bl	8006b16 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800679e:	e01d      	b.n	80067dc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	7bfa      	ldrb	r2, [r7, #15]
 80067a4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
 80067aa:	4619      	mov	r1, r3
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 ff05 	bl	80075bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 fa7a 	bl	8006cac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80067b8:	7bfb      	ldrb	r3, [r7, #15]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d004      	beq.n	80067c8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2202      	movs	r2, #2
 80067c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067c6:	e009      	b.n	80067dc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067d0:	e004      	b.n	80067dc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80067d2:	6839      	ldr	r1, [r7, #0]
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 f99e 	bl	8006b16 <USBD_CtlError>
  }
}
 80067da:	bf00      	nop
 80067dc:	bf00      	nop
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	885b      	ldrh	r3, [r3, #2]
 80067f6:	b2da      	uxtb	r2, r3
 80067f8:	4b4e      	ldr	r3, [pc, #312]	; (8006934 <USBD_SetConfig+0x150>)
 80067fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80067fc:	4b4d      	ldr	r3, [pc, #308]	; (8006934 <USBD_SetConfig+0x150>)
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d905      	bls.n	8006810 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006804:	6839      	ldr	r1, [r7, #0]
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f985 	bl	8006b16 <USBD_CtlError>
    return USBD_FAIL;
 800680c:	2303      	movs	r3, #3
 800680e:	e08c      	b.n	800692a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006816:	b2db      	uxtb	r3, r3
 8006818:	2b02      	cmp	r3, #2
 800681a:	d002      	beq.n	8006822 <USBD_SetConfig+0x3e>
 800681c:	2b03      	cmp	r3, #3
 800681e:	d029      	beq.n	8006874 <USBD_SetConfig+0x90>
 8006820:	e075      	b.n	800690e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006822:	4b44      	ldr	r3, [pc, #272]	; (8006934 <USBD_SetConfig+0x150>)
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d020      	beq.n	800686c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800682a:	4b42      	ldr	r3, [pc, #264]	; (8006934 <USBD_SetConfig+0x150>)
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	461a      	mov	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006834:	4b3f      	ldr	r3, [pc, #252]	; (8006934 <USBD_SetConfig+0x150>)
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	4619      	mov	r1, r3
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7fe ffe7 	bl	800580e <USBD_SetClassConfig>
 8006840:	4603      	mov	r3, r0
 8006842:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006844:	7bfb      	ldrb	r3, [r7, #15]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d008      	beq.n	800685c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800684a:	6839      	ldr	r1, [r7, #0]
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 f962 	bl	8006b16 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2202      	movs	r2, #2
 8006856:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800685a:	e065      	b.n	8006928 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 fa25 	bl	8006cac <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2203      	movs	r2, #3
 8006866:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800686a:	e05d      	b.n	8006928 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fa1d 	bl	8006cac <USBD_CtlSendStatus>
      break;
 8006872:	e059      	b.n	8006928 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006874:	4b2f      	ldr	r3, [pc, #188]	; (8006934 <USBD_SetConfig+0x150>)
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d112      	bne.n	80068a2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2202      	movs	r2, #2
 8006880:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006884:	4b2b      	ldr	r3, [pc, #172]	; (8006934 <USBD_SetConfig+0x150>)
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	461a      	mov	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800688e:	4b29      	ldr	r3, [pc, #164]	; (8006934 <USBD_SetConfig+0x150>)
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	4619      	mov	r1, r3
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f7fe ffd6 	bl	8005846 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fa06 	bl	8006cac <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80068a0:	e042      	b.n	8006928 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80068a2:	4b24      	ldr	r3, [pc, #144]	; (8006934 <USBD_SetConfig+0x150>)
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	461a      	mov	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d02a      	beq.n	8006906 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	4619      	mov	r1, r3
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f7fe ffc4 	bl	8005846 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80068be:	4b1d      	ldr	r3, [pc, #116]	; (8006934 <USBD_SetConfig+0x150>)
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	461a      	mov	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80068c8:	4b1a      	ldr	r3, [pc, #104]	; (8006934 <USBD_SetConfig+0x150>)
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	4619      	mov	r1, r3
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f7fe ff9d 	bl	800580e <USBD_SetClassConfig>
 80068d4:	4603      	mov	r3, r0
 80068d6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80068d8:	7bfb      	ldrb	r3, [r7, #15]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00f      	beq.n	80068fe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80068de:	6839      	ldr	r1, [r7, #0]
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 f918 	bl	8006b16 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	4619      	mov	r1, r3
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f7fe ffa9 	bl	8005846 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2202      	movs	r2, #2
 80068f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80068fc:	e014      	b.n	8006928 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f9d4 	bl	8006cac <USBD_CtlSendStatus>
      break;
 8006904:	e010      	b.n	8006928 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f9d0 	bl	8006cac <USBD_CtlSendStatus>
      break;
 800690c:	e00c      	b.n	8006928 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800690e:	6839      	ldr	r1, [r7, #0]
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f900 	bl	8006b16 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006916:	4b07      	ldr	r3, [pc, #28]	; (8006934 <USBD_SetConfig+0x150>)
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	4619      	mov	r1, r3
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f7fe ff92 	bl	8005846 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006922:	2303      	movs	r3, #3
 8006924:	73fb      	strb	r3, [r7, #15]
      break;
 8006926:	bf00      	nop
  }

  return ret;
 8006928:	7bfb      	ldrb	r3, [r7, #15]
}
 800692a:	4618      	mov	r0, r3
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	200001b4 	.word	0x200001b4

08006938 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	88db      	ldrh	r3, [r3, #6]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d004      	beq.n	8006954 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800694a:	6839      	ldr	r1, [r7, #0]
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 f8e2 	bl	8006b16 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006952:	e023      	b.n	800699c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800695a:	b2db      	uxtb	r3, r3
 800695c:	2b02      	cmp	r3, #2
 800695e:	dc02      	bgt.n	8006966 <USBD_GetConfig+0x2e>
 8006960:	2b00      	cmp	r3, #0
 8006962:	dc03      	bgt.n	800696c <USBD_GetConfig+0x34>
 8006964:	e015      	b.n	8006992 <USBD_GetConfig+0x5a>
 8006966:	2b03      	cmp	r3, #3
 8006968:	d00b      	beq.n	8006982 <USBD_GetConfig+0x4a>
 800696a:	e012      	b.n	8006992 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	3308      	adds	r3, #8
 8006976:	2201      	movs	r2, #1
 8006978:	4619      	mov	r1, r3
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f93c 	bl	8006bf8 <USBD_CtlSendData>
        break;
 8006980:	e00c      	b.n	800699c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	3304      	adds	r3, #4
 8006986:	2201      	movs	r2, #1
 8006988:	4619      	mov	r1, r3
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f934 	bl	8006bf8 <USBD_CtlSendData>
        break;
 8006990:	e004      	b.n	800699c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006992:	6839      	ldr	r1, [r7, #0]
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 f8be 	bl	8006b16 <USBD_CtlError>
        break;
 800699a:	bf00      	nop
}
 800699c:	bf00      	nop
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	3b01      	subs	r3, #1
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d81e      	bhi.n	80069fa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	88db      	ldrh	r3, [r3, #6]
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d004      	beq.n	80069ce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80069c4:	6839      	ldr	r1, [r7, #0]
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f8a5 	bl	8006b16 <USBD_CtlError>
        break;
 80069cc:	e01a      	b.n	8006a04 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2201      	movs	r2, #1
 80069d2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d005      	beq.n	80069ea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	f043 0202 	orr.w	r2, r3, #2
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	330c      	adds	r3, #12
 80069ee:	2202      	movs	r2, #2
 80069f0:	4619      	mov	r1, r3
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f900 	bl	8006bf8 <USBD_CtlSendData>
      break;
 80069f8:	e004      	b.n	8006a04 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80069fa:	6839      	ldr	r1, [r7, #0]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 f88a 	bl	8006b16 <USBD_CtlError>
      break;
 8006a02:	bf00      	nop
  }
}
 8006a04:	bf00      	nop
 8006a06:	3708      	adds	r7, #8
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	885b      	ldrh	r3, [r3, #2]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d107      	bne.n	8006a2e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f940 	bl	8006cac <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006a2c:	e013      	b.n	8006a56 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	885b      	ldrh	r3, [r3, #2]
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d10b      	bne.n	8006a4e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	889b      	ldrh	r3, [r3, #4]
 8006a3a:	0a1b      	lsrs	r3, r3, #8
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	b2da      	uxtb	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f930 	bl	8006cac <USBD_CtlSendStatus>
}
 8006a4c:	e003      	b.n	8006a56 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006a4e:	6839      	ldr	r1, [r7, #0]
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 f860 	bl	8006b16 <USBD_CtlError>
}
 8006a56:	bf00      	nop
 8006a58:	3708      	adds	r7, #8
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b082      	sub	sp, #8
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
 8006a66:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	3b01      	subs	r3, #1
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d80b      	bhi.n	8006a8e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	885b      	ldrh	r3, [r3, #2]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d10c      	bne.n	8006a98 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f910 	bl	8006cac <USBD_CtlSendStatus>
      }
      break;
 8006a8c:	e004      	b.n	8006a98 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006a8e:	6839      	ldr	r1, [r7, #0]
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f840 	bl	8006b16 <USBD_CtlError>
      break;
 8006a96:	e000      	b.n	8006a9a <USBD_ClrFeature+0x3c>
      break;
 8006a98:	bf00      	nop
  }
}
 8006a9a:	bf00      	nop
 8006a9c:	3708      	adds	r7, #8
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b084      	sub	sp, #16
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
 8006aaa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	781a      	ldrb	r2, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	3301      	adds	r3, #1
 8006abc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	781a      	ldrb	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f7ff fa41 	bl	8005f54 <SWAPBYTE>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	3301      	adds	r3, #1
 8006ade:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f7ff fa34 	bl	8005f54 <SWAPBYTE>
 8006aec:	4603      	mov	r3, r0
 8006aee:	461a      	mov	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	3301      	adds	r3, #1
 8006af8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	3301      	adds	r3, #1
 8006afe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f7ff fa27 	bl	8005f54 <SWAPBYTE>
 8006b06:	4603      	mov	r3, r0
 8006b08:	461a      	mov	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	80da      	strh	r2, [r3, #6]
}
 8006b0e:	bf00      	nop
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b082      	sub	sp, #8
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
 8006b1e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b20:	2180      	movs	r1, #128	; 0x80
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fce0 	bl	80074e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006b28:	2100      	movs	r1, #0
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fcdc 	bl	80074e8 <USBD_LL_StallEP>
}
 8006b30:	bf00      	nop
 8006b32:	3708      	adds	r7, #8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006b44:	2300      	movs	r3, #0
 8006b46:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d036      	beq.n	8006bbc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006b52:	6938      	ldr	r0, [r7, #16]
 8006b54:	f000 f836 	bl	8006bc4 <USBD_GetLen>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	005b      	lsls	r3, r3, #1
 8006b60:	b29a      	uxth	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006b66:	7dfb      	ldrb	r3, [r7, #23]
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	7812      	ldrb	r2, [r2, #0]
 8006b70:	701a      	strb	r2, [r3, #0]
  idx++;
 8006b72:	7dfb      	ldrb	r3, [r7, #23]
 8006b74:	3301      	adds	r3, #1
 8006b76:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006b78:	7dfb      	ldrb	r3, [r7, #23]
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	2203      	movs	r2, #3
 8006b80:	701a      	strb	r2, [r3, #0]
  idx++;
 8006b82:	7dfb      	ldrb	r3, [r7, #23]
 8006b84:	3301      	adds	r3, #1
 8006b86:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006b88:	e013      	b.n	8006bb2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006b8a:	7dfb      	ldrb	r3, [r7, #23]
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	4413      	add	r3, r2
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	7812      	ldrb	r2, [r2, #0]
 8006b94:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	613b      	str	r3, [r7, #16]
    idx++;
 8006b9c:	7dfb      	ldrb	r3, [r7, #23]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006ba2:	7dfb      	ldrb	r3, [r7, #23]
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	2200      	movs	r2, #0
 8006baa:	701a      	strb	r2, [r3, #0]
    idx++;
 8006bac:	7dfb      	ldrb	r3, [r7, #23]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1e7      	bne.n	8006b8a <USBD_GetString+0x52>
 8006bba:	e000      	b.n	8006bbe <USBD_GetString+0x86>
    return;
 8006bbc:	bf00      	nop
  }
}
 8006bbe:	3718      	adds	r7, #24
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006bd4:	e005      	b.n	8006be2 <USBD_GetLen+0x1e>
  {
    len++;
 8006bd6:	7bfb      	ldrb	r3, [r7, #15]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	3301      	adds	r3, #1
 8006be0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1f5      	bne.n	8006bd6 <USBD_GetLen+0x12>
  }

  return len;
 8006bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3714      	adds	r7, #20
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2202      	movs	r2, #2
 8006c08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68ba      	ldr	r2, [r7, #8]
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f000 fceb 	bl	80075fa <USBD_LL_Transmit>

  return USBD_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b084      	sub	sp, #16
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	60f8      	str	r0, [r7, #12]
 8006c36:	60b9      	str	r1, [r7, #8]
 8006c38:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	2100      	movs	r1, #0
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 fcda 	bl	80075fa <USBD_LL_Transmit>

  return USBD_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2203      	movs	r2, #3
 8006c60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	2100      	movs	r1, #0
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f000 fcde 	bl	800763c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b084      	sub	sp, #16
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	60f8      	str	r0, [r7, #12]
 8006c92:	60b9      	str	r1, [r7, #8]
 8006c94:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f000 fccd 	bl	800763c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2204      	movs	r2, #4
 8006cb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fc99 	bl	80075fa <USBD_LL_Transmit>

  return USBD_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b082      	sub	sp, #8
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2205      	movs	r2, #5
 8006cde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fca7 	bl	800763c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	4912      	ldr	r1, [pc, #72]	; (8006d48 <MX_USB_DEVICE_Init+0x50>)
 8006d00:	4812      	ldr	r0, [pc, #72]	; (8006d4c <MX_USB_DEVICE_Init+0x54>)
 8006d02:	f7fe fd07 	bl	8005714 <USBD_Init>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d001      	beq.n	8006d10 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006d0c:	f7f9 fdca 	bl	80008a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006d10:	490f      	ldr	r1, [pc, #60]	; (8006d50 <MX_USB_DEVICE_Init+0x58>)
 8006d12:	480e      	ldr	r0, [pc, #56]	; (8006d4c <MX_USB_DEVICE_Init+0x54>)
 8006d14:	f7fe fd2e 	bl	8005774 <USBD_RegisterClass>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d001      	beq.n	8006d22 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006d1e:	f7f9 fdc1 	bl	80008a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006d22:	490c      	ldr	r1, [pc, #48]	; (8006d54 <MX_USB_DEVICE_Init+0x5c>)
 8006d24:	4809      	ldr	r0, [pc, #36]	; (8006d4c <MX_USB_DEVICE_Init+0x54>)
 8006d26:	f7fe fc1f 	bl	8005568 <USBD_CDC_RegisterInterface>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d001      	beq.n	8006d34 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006d30:	f7f9 fdb8 	bl	80008a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006d34:	4805      	ldr	r0, [pc, #20]	; (8006d4c <MX_USB_DEVICE_Init+0x54>)
 8006d36:	f7fe fd53 	bl	80057e0 <USBD_Start>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d001      	beq.n	8006d44 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006d40:	f7f9 fdb0 	bl	80008a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006d44:	bf00      	nop
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	200000f4 	.word	0x200000f4
 8006d4c:	200001b8 	.word	0x200001b8
 8006d50:	20000060 	.word	0x20000060
 8006d54:	200000e0 	.word	0x200000e0

08006d58 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	4905      	ldr	r1, [pc, #20]	; (8006d74 <CDC_Init_FS+0x1c>)
 8006d60:	4805      	ldr	r0, [pc, #20]	; (8006d78 <CDC_Init_FS+0x20>)
 8006d62:	f7fe fc1b 	bl	800559c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006d66:	4905      	ldr	r1, [pc, #20]	; (8006d7c <CDC_Init_FS+0x24>)
 8006d68:	4803      	ldr	r0, [pc, #12]	; (8006d78 <CDC_Init_FS+0x20>)
 8006d6a:	f7fe fc39 	bl	80055e0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006d6e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	20000c94 	.word	0x20000c94
 8006d78:	200001b8 	.word	0x200001b8
 8006d7c:	20000494 	.word	0x20000494

08006d80 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006d80:	b480      	push	{r7}
 8006d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006d84:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	4603      	mov	r3, r0
 8006d98:	6039      	str	r1, [r7, #0]
 8006d9a:	71fb      	strb	r3, [r7, #7]
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006da0:	79fb      	ldrb	r3, [r7, #7]
 8006da2:	2b23      	cmp	r3, #35	; 0x23
 8006da4:	d84a      	bhi.n	8006e3c <CDC_Control_FS+0xac>
 8006da6:	a201      	add	r2, pc, #4	; (adr r2, 8006dac <CDC_Control_FS+0x1c>)
 8006da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dac:	08006e3d 	.word	0x08006e3d
 8006db0:	08006e3d 	.word	0x08006e3d
 8006db4:	08006e3d 	.word	0x08006e3d
 8006db8:	08006e3d 	.word	0x08006e3d
 8006dbc:	08006e3d 	.word	0x08006e3d
 8006dc0:	08006e3d 	.word	0x08006e3d
 8006dc4:	08006e3d 	.word	0x08006e3d
 8006dc8:	08006e3d 	.word	0x08006e3d
 8006dcc:	08006e3d 	.word	0x08006e3d
 8006dd0:	08006e3d 	.word	0x08006e3d
 8006dd4:	08006e3d 	.word	0x08006e3d
 8006dd8:	08006e3d 	.word	0x08006e3d
 8006ddc:	08006e3d 	.word	0x08006e3d
 8006de0:	08006e3d 	.word	0x08006e3d
 8006de4:	08006e3d 	.word	0x08006e3d
 8006de8:	08006e3d 	.word	0x08006e3d
 8006dec:	08006e3d 	.word	0x08006e3d
 8006df0:	08006e3d 	.word	0x08006e3d
 8006df4:	08006e3d 	.word	0x08006e3d
 8006df8:	08006e3d 	.word	0x08006e3d
 8006dfc:	08006e3d 	.word	0x08006e3d
 8006e00:	08006e3d 	.word	0x08006e3d
 8006e04:	08006e3d 	.word	0x08006e3d
 8006e08:	08006e3d 	.word	0x08006e3d
 8006e0c:	08006e3d 	.word	0x08006e3d
 8006e10:	08006e3d 	.word	0x08006e3d
 8006e14:	08006e3d 	.word	0x08006e3d
 8006e18:	08006e3d 	.word	0x08006e3d
 8006e1c:	08006e3d 	.word	0x08006e3d
 8006e20:	08006e3d 	.word	0x08006e3d
 8006e24:	08006e3d 	.word	0x08006e3d
 8006e28:	08006e3d 	.word	0x08006e3d
 8006e2c:	08006e3d 	.word	0x08006e3d
 8006e30:	08006e3d 	.word	0x08006e3d
 8006e34:	08006e3d 	.word	0x08006e3d
 8006e38:	08006e3d 	.word	0x08006e3d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006e3c:	bf00      	nop
  }

  return (USBD_OK);
 8006e3e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006e56:	6879      	ldr	r1, [r7, #4]
 8006e58:	4805      	ldr	r0, [pc, #20]	; (8006e70 <CDC_Receive_FS+0x24>)
 8006e5a:	f7fe fbc1 	bl	80055e0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006e5e:	4804      	ldr	r0, [pc, #16]	; (8006e70 <CDC_Receive_FS+0x24>)
 8006e60:	f7fe fc22 	bl	80056a8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006e64:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	200001b8 	.word	0x200001b8

08006e74 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006e80:	2300      	movs	r3, #0
 8006e82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006e84:	4b0d      	ldr	r3, [pc, #52]	; (8006ebc <CDC_Transmit_FS+0x48>)
 8006e86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e8a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d001      	beq.n	8006e9a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e00b      	b.n	8006eb2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006e9a:	887b      	ldrh	r3, [r7, #2]
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	6879      	ldr	r1, [r7, #4]
 8006ea0:	4806      	ldr	r0, [pc, #24]	; (8006ebc <CDC_Transmit_FS+0x48>)
 8006ea2:	f7fe fb7b 	bl	800559c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006ea6:	4805      	ldr	r0, [pc, #20]	; (8006ebc <CDC_Transmit_FS+0x48>)
 8006ea8:	f7fe fbb8 	bl	800561c <USBD_CDC_TransmitPacket>
 8006eac:	4603      	mov	r3, r0
 8006eae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	200001b8 	.word	0x200001b8

08006ec0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b087      	sub	sp, #28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006ed2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	371c      	adds	r7, #28
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
	...

08006ee4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	4603      	mov	r3, r0
 8006eec:	6039      	str	r1, [r7, #0]
 8006eee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	2212      	movs	r2, #18
 8006ef4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006ef6:	4b03      	ldr	r3, [pc, #12]	; (8006f04 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr
 8006f04:	20000110 	.word	0x20000110

08006f08 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	4603      	mov	r3, r0
 8006f10:	6039      	str	r1, [r7, #0]
 8006f12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	2204      	movs	r2, #4
 8006f18:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006f1a:	4b03      	ldr	r3, [pc, #12]	; (8006f28 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr
 8006f28:	20000124 	.word	0x20000124

08006f2c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	4603      	mov	r3, r0
 8006f34:	6039      	str	r1, [r7, #0]
 8006f36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f38:	79fb      	ldrb	r3, [r7, #7]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d105      	bne.n	8006f4a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f3e:	683a      	ldr	r2, [r7, #0]
 8006f40:	4907      	ldr	r1, [pc, #28]	; (8006f60 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f42:	4808      	ldr	r0, [pc, #32]	; (8006f64 <USBD_FS_ProductStrDescriptor+0x38>)
 8006f44:	f7ff fdf8 	bl	8006b38 <USBD_GetString>
 8006f48:	e004      	b.n	8006f54 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f4a:	683a      	ldr	r2, [r7, #0]
 8006f4c:	4904      	ldr	r1, [pc, #16]	; (8006f60 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f4e:	4805      	ldr	r0, [pc, #20]	; (8006f64 <USBD_FS_ProductStrDescriptor+0x38>)
 8006f50:	f7ff fdf2 	bl	8006b38 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f54:	4b02      	ldr	r3, [pc, #8]	; (8006f60 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3708      	adds	r7, #8
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	20001494 	.word	0x20001494
 8006f64:	080077ec 	.word	0x080077ec

08006f68 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	4603      	mov	r3, r0
 8006f70:	6039      	str	r1, [r7, #0]
 8006f72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006f74:	683a      	ldr	r2, [r7, #0]
 8006f76:	4904      	ldr	r1, [pc, #16]	; (8006f88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006f78:	4804      	ldr	r0, [pc, #16]	; (8006f8c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006f7a:	f7ff fddd 	bl	8006b38 <USBD_GetString>
  return USBD_StrDesc;
 8006f7e:	4b02      	ldr	r3, [pc, #8]	; (8006f88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	20001494 	.word	0x20001494
 8006f8c:	08007804 	.word	0x08007804

08006f90 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	4603      	mov	r3, r0
 8006f98:	6039      	str	r1, [r7, #0]
 8006f9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	221a      	movs	r2, #26
 8006fa0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006fa2:	f000 f843 	bl	800702c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006fa6:	4b02      	ldr	r3, [pc, #8]	; (8006fb0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3708      	adds	r7, #8
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	20000128 	.word	0x20000128

08006fb4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	4603      	mov	r3, r0
 8006fbc:	6039      	str	r1, [r7, #0]
 8006fbe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006fc0:	79fb      	ldrb	r3, [r7, #7]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d105      	bne.n	8006fd2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	4907      	ldr	r1, [pc, #28]	; (8006fe8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006fca:	4808      	ldr	r0, [pc, #32]	; (8006fec <USBD_FS_ConfigStrDescriptor+0x38>)
 8006fcc:	f7ff fdb4 	bl	8006b38 <USBD_GetString>
 8006fd0:	e004      	b.n	8006fdc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	4904      	ldr	r1, [pc, #16]	; (8006fe8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006fd6:	4805      	ldr	r0, [pc, #20]	; (8006fec <USBD_FS_ConfigStrDescriptor+0x38>)
 8006fd8:	f7ff fdae 	bl	8006b38 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006fdc:	4b02      	ldr	r3, [pc, #8]	; (8006fe8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3708      	adds	r7, #8
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	20001494 	.word	0x20001494
 8006fec:	08007818 	.word	0x08007818

08006ff0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	6039      	str	r1, [r7, #0]
 8006ffa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ffc:	79fb      	ldrb	r3, [r7, #7]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d105      	bne.n	800700e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007002:	683a      	ldr	r2, [r7, #0]
 8007004:	4907      	ldr	r1, [pc, #28]	; (8007024 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007006:	4808      	ldr	r0, [pc, #32]	; (8007028 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007008:	f7ff fd96 	bl	8006b38 <USBD_GetString>
 800700c:	e004      	b.n	8007018 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	4904      	ldr	r1, [pc, #16]	; (8007024 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007012:	4805      	ldr	r0, [pc, #20]	; (8007028 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007014:	f7ff fd90 	bl	8006b38 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007018:	4b02      	ldr	r3, [pc, #8]	; (8007024 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800701a:	4618      	mov	r0, r3
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	20001494 	.word	0x20001494
 8007028:	08007824 	.word	0x08007824

0800702c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007032:	4b0f      	ldr	r3, [pc, #60]	; (8007070 <Get_SerialNum+0x44>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007038:	4b0e      	ldr	r3, [pc, #56]	; (8007074 <Get_SerialNum+0x48>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800703e:	4b0e      	ldr	r3, [pc, #56]	; (8007078 <Get_SerialNum+0x4c>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4413      	add	r3, r2
 800704a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d009      	beq.n	8007066 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007052:	2208      	movs	r2, #8
 8007054:	4909      	ldr	r1, [pc, #36]	; (800707c <Get_SerialNum+0x50>)
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f000 f814 	bl	8007084 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800705c:	2204      	movs	r2, #4
 800705e:	4908      	ldr	r1, [pc, #32]	; (8007080 <Get_SerialNum+0x54>)
 8007060:	68b8      	ldr	r0, [r7, #8]
 8007062:	f000 f80f 	bl	8007084 <IntToUnicode>
  }
}
 8007066:	bf00      	nop
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	1fff7a10 	.word	0x1fff7a10
 8007074:	1fff7a14 	.word	0x1fff7a14
 8007078:	1fff7a18 	.word	0x1fff7a18
 800707c:	2000012a 	.word	0x2000012a
 8007080:	2000013a 	.word	0x2000013a

08007084 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007084:	b480      	push	{r7}
 8007086:	b087      	sub	sp, #28
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	4613      	mov	r3, r2
 8007090:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007092:	2300      	movs	r3, #0
 8007094:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007096:	2300      	movs	r3, #0
 8007098:	75fb      	strb	r3, [r7, #23]
 800709a:	e027      	b.n	80070ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	0f1b      	lsrs	r3, r3, #28
 80070a0:	2b09      	cmp	r3, #9
 80070a2:	d80b      	bhi.n	80070bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	0f1b      	lsrs	r3, r3, #28
 80070a8:	b2da      	uxtb	r2, r3
 80070aa:	7dfb      	ldrb	r3, [r7, #23]
 80070ac:	005b      	lsls	r3, r3, #1
 80070ae:	4619      	mov	r1, r3
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	440b      	add	r3, r1
 80070b4:	3230      	adds	r2, #48	; 0x30
 80070b6:	b2d2      	uxtb	r2, r2
 80070b8:	701a      	strb	r2, [r3, #0]
 80070ba:	e00a      	b.n	80070d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	0f1b      	lsrs	r3, r3, #28
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	7dfb      	ldrb	r3, [r7, #23]
 80070c4:	005b      	lsls	r3, r3, #1
 80070c6:	4619      	mov	r1, r3
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	440b      	add	r3, r1
 80070cc:	3237      	adds	r2, #55	; 0x37
 80070ce:	b2d2      	uxtb	r2, r2
 80070d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	011b      	lsls	r3, r3, #4
 80070d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80070d8:	7dfb      	ldrb	r3, [r7, #23]
 80070da:	005b      	lsls	r3, r3, #1
 80070dc:	3301      	adds	r3, #1
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	4413      	add	r3, r2
 80070e2:	2200      	movs	r2, #0
 80070e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80070e6:	7dfb      	ldrb	r3, [r7, #23]
 80070e8:	3301      	adds	r3, #1
 80070ea:	75fb      	strb	r3, [r7, #23]
 80070ec:	7dfa      	ldrb	r2, [r7, #23]
 80070ee:	79fb      	ldrb	r3, [r7, #7]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d3d3      	bcc.n	800709c <IntToUnicode+0x18>
  }
}
 80070f4:	bf00      	nop
 80070f6:	bf00      	nop
 80070f8:	371c      	adds	r7, #28
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
	...

08007104 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b08a      	sub	sp, #40	; 0x28
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800710c:	f107 0314 	add.w	r3, r7, #20
 8007110:	2200      	movs	r2, #0
 8007112:	601a      	str	r2, [r3, #0]
 8007114:	605a      	str	r2, [r3, #4]
 8007116:	609a      	str	r2, [r3, #8]
 8007118:	60da      	str	r2, [r3, #12]
 800711a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007124:	d13a      	bne.n	800719c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007126:	2300      	movs	r3, #0
 8007128:	613b      	str	r3, [r7, #16]
 800712a:	4b1e      	ldr	r3, [pc, #120]	; (80071a4 <HAL_PCD_MspInit+0xa0>)
 800712c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712e:	4a1d      	ldr	r2, [pc, #116]	; (80071a4 <HAL_PCD_MspInit+0xa0>)
 8007130:	f043 0301 	orr.w	r3, r3, #1
 8007134:	6313      	str	r3, [r2, #48]	; 0x30
 8007136:	4b1b      	ldr	r3, [pc, #108]	; (80071a4 <HAL_PCD_MspInit+0xa0>)
 8007138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800713a:	f003 0301 	and.w	r3, r3, #1
 800713e:	613b      	str	r3, [r7, #16]
 8007140:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007142:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007148:	2302      	movs	r3, #2
 800714a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800714c:	2300      	movs	r3, #0
 800714e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007150:	2303      	movs	r3, #3
 8007152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007154:	230a      	movs	r3, #10
 8007156:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007158:	f107 0314 	add.w	r3, r7, #20
 800715c:	4619      	mov	r1, r3
 800715e:	4812      	ldr	r0, [pc, #72]	; (80071a8 <HAL_PCD_MspInit+0xa4>)
 8007160:	f7f9 fe26 	bl	8000db0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007164:	4b0f      	ldr	r3, [pc, #60]	; (80071a4 <HAL_PCD_MspInit+0xa0>)
 8007166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007168:	4a0e      	ldr	r2, [pc, #56]	; (80071a4 <HAL_PCD_MspInit+0xa0>)
 800716a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800716e:	6353      	str	r3, [r2, #52]	; 0x34
 8007170:	2300      	movs	r3, #0
 8007172:	60fb      	str	r3, [r7, #12]
 8007174:	4b0b      	ldr	r3, [pc, #44]	; (80071a4 <HAL_PCD_MspInit+0xa0>)
 8007176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007178:	4a0a      	ldr	r2, [pc, #40]	; (80071a4 <HAL_PCD_MspInit+0xa0>)
 800717a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800717e:	6453      	str	r3, [r2, #68]	; 0x44
 8007180:	4b08      	ldr	r3, [pc, #32]	; (80071a4 <HAL_PCD_MspInit+0xa0>)
 8007182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007184:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007188:	60fb      	str	r3, [r7, #12]
 800718a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800718c:	2200      	movs	r2, #0
 800718e:	2100      	movs	r1, #0
 8007190:	2043      	movs	r0, #67	; 0x43
 8007192:	f7f9 fdd6 	bl	8000d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007196:	2043      	movs	r0, #67	; 0x43
 8007198:	f7f9 fdef 	bl	8000d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800719c:	bf00      	nop
 800719e:	3728      	adds	r7, #40	; 0x28
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	40023800 	.word	0x40023800
 80071a8:	40020000 	.word	0x40020000

080071ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80071c0:	4619      	mov	r1, r3
 80071c2:	4610      	mov	r0, r2
 80071c4:	f7fe fb59 	bl	800587a <USBD_LL_SetupStage>
}
 80071c8:	bf00      	nop
 80071ca:	3708      	adds	r7, #8
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	460b      	mov	r3, r1
 80071da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80071e2:	78fa      	ldrb	r2, [r7, #3]
 80071e4:	6879      	ldr	r1, [r7, #4]
 80071e6:	4613      	mov	r3, r2
 80071e8:	00db      	lsls	r3, r3, #3
 80071ea:	4413      	add	r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	440b      	add	r3, r1
 80071f0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	78fb      	ldrb	r3, [r7, #3]
 80071f8:	4619      	mov	r1, r3
 80071fa:	f7fe fb93 	bl	8005924 <USBD_LL_DataOutStage>
}
 80071fe:	bf00      	nop
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b082      	sub	sp, #8
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
 800720e:	460b      	mov	r3, r1
 8007210:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007218:	78fa      	ldrb	r2, [r7, #3]
 800721a:	6879      	ldr	r1, [r7, #4]
 800721c:	4613      	mov	r3, r2
 800721e:	00db      	lsls	r3, r3, #3
 8007220:	4413      	add	r3, r2
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	440b      	add	r3, r1
 8007226:	334c      	adds	r3, #76	; 0x4c
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	78fb      	ldrb	r3, [r7, #3]
 800722c:	4619      	mov	r1, r3
 800722e:	f7fe fc2c 	bl	8005a8a <USBD_LL_DataInStage>
}
 8007232:	bf00      	nop
 8007234:	3708      	adds	r7, #8
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b082      	sub	sp, #8
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007248:	4618      	mov	r0, r3
 800724a:	f7fe fd60 	bl	8005d0e <USBD_LL_SOF>
}
 800724e:	bf00      	nop
 8007250:	3708      	adds	r7, #8
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b084      	sub	sp, #16
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800725e:	2301      	movs	r3, #1
 8007260:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d102      	bne.n	8007270 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800726a:	2300      	movs	r3, #0
 800726c:	73fb      	strb	r3, [r7, #15]
 800726e:	e008      	b.n	8007282 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	2b02      	cmp	r3, #2
 8007276:	d102      	bne.n	800727e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007278:	2301      	movs	r3, #1
 800727a:	73fb      	strb	r3, [r7, #15]
 800727c:	e001      	b.n	8007282 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800727e:	f7f9 fb11 	bl	80008a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007288:	7bfa      	ldrb	r2, [r7, #15]
 800728a:	4611      	mov	r1, r2
 800728c:	4618      	mov	r0, r3
 800728e:	f7fe fd00 	bl	8005c92 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007298:	4618      	mov	r0, r3
 800729a:	f7fe fca8 	bl	8005bee <USBD_LL_Reset>
}
 800729e:	bf00      	nop
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
	...

080072a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7fe fcfb 	bl	8005cb2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	6812      	ldr	r2, [r2, #0]
 80072ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80072ce:	f043 0301 	orr.w	r3, r3, #1
 80072d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a1b      	ldr	r3, [r3, #32]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d005      	beq.n	80072e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80072dc:	4b04      	ldr	r3, [pc, #16]	; (80072f0 <HAL_PCD_SuspendCallback+0x48>)
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	4a03      	ldr	r2, [pc, #12]	; (80072f0 <HAL_PCD_SuspendCallback+0x48>)
 80072e2:	f043 0306 	orr.w	r3, r3, #6
 80072e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80072e8:	bf00      	nop
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	e000ed00 	.word	0xe000ed00

080072f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007302:	4618      	mov	r0, r3
 8007304:	f7fe fceb 	bl	8005cde <USBD_LL_Resume>
}
 8007308:	bf00      	nop
 800730a:	3708      	adds	r7, #8
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	460b      	mov	r3, r1
 800731a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007322:	78fa      	ldrb	r2, [r7, #3]
 8007324:	4611      	mov	r1, r2
 8007326:	4618      	mov	r0, r3
 8007328:	f7fe fd43 	bl	8005db2 <USBD_LL_IsoOUTIncomplete>
}
 800732c:	bf00      	nop
 800732e:	3708      	adds	r7, #8
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	460b      	mov	r3, r1
 800733e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007346:	78fa      	ldrb	r2, [r7, #3]
 8007348:	4611      	mov	r1, r2
 800734a:	4618      	mov	r0, r3
 800734c:	f7fe fcff 	bl	8005d4e <USBD_LL_IsoINIncomplete>
}
 8007350:	bf00      	nop
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007366:	4618      	mov	r0, r3
 8007368:	f7fe fd55 	bl	8005e16 <USBD_LL_DevConnected>
}
 800736c:	bf00      	nop
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007382:	4618      	mov	r0, r3
 8007384:	f7fe fd52 	bl	8005e2c <USBD_LL_DevDisconnected>
}
 8007388:	bf00      	nop
 800738a:	3708      	adds	r7, #8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d13c      	bne.n	800741a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80073a0:	4a20      	ldr	r2, [pc, #128]	; (8007424 <USBD_LL_Init+0x94>)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a1e      	ldr	r2, [pc, #120]	; (8007424 <USBD_LL_Init+0x94>)
 80073ac:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80073b0:	4b1c      	ldr	r3, [pc, #112]	; (8007424 <USBD_LL_Init+0x94>)
 80073b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80073b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80073b8:	4b1a      	ldr	r3, [pc, #104]	; (8007424 <USBD_LL_Init+0x94>)
 80073ba:	2204      	movs	r2, #4
 80073bc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80073be:	4b19      	ldr	r3, [pc, #100]	; (8007424 <USBD_LL_Init+0x94>)
 80073c0:	2202      	movs	r2, #2
 80073c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80073c4:	4b17      	ldr	r3, [pc, #92]	; (8007424 <USBD_LL_Init+0x94>)
 80073c6:	2200      	movs	r2, #0
 80073c8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80073ca:	4b16      	ldr	r3, [pc, #88]	; (8007424 <USBD_LL_Init+0x94>)
 80073cc:	2202      	movs	r2, #2
 80073ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80073d0:	4b14      	ldr	r3, [pc, #80]	; (8007424 <USBD_LL_Init+0x94>)
 80073d2:	2200      	movs	r2, #0
 80073d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80073d6:	4b13      	ldr	r3, [pc, #76]	; (8007424 <USBD_LL_Init+0x94>)
 80073d8:	2200      	movs	r2, #0
 80073da:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80073dc:	4b11      	ldr	r3, [pc, #68]	; (8007424 <USBD_LL_Init+0x94>)
 80073de:	2200      	movs	r2, #0
 80073e0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80073e2:	4b10      	ldr	r3, [pc, #64]	; (8007424 <USBD_LL_Init+0x94>)
 80073e4:	2200      	movs	r2, #0
 80073e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80073e8:	4b0e      	ldr	r3, [pc, #56]	; (8007424 <USBD_LL_Init+0x94>)
 80073ea:	2200      	movs	r2, #0
 80073ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80073ee:	480d      	ldr	r0, [pc, #52]	; (8007424 <USBD_LL_Init+0x94>)
 80073f0:	f7f9 fec4 	bl	800117c <HAL_PCD_Init>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d001      	beq.n	80073fe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80073fa:	f7f9 fa53 	bl	80008a4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80073fe:	2180      	movs	r1, #128	; 0x80
 8007400:	4808      	ldr	r0, [pc, #32]	; (8007424 <USBD_LL_Init+0x94>)
 8007402:	f7fb f91c 	bl	800263e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007406:	2240      	movs	r2, #64	; 0x40
 8007408:	2100      	movs	r1, #0
 800740a:	4806      	ldr	r0, [pc, #24]	; (8007424 <USBD_LL_Init+0x94>)
 800740c:	f7fb f8d0 	bl	80025b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007410:	2280      	movs	r2, #128	; 0x80
 8007412:	2101      	movs	r1, #1
 8007414:	4803      	ldr	r0, [pc, #12]	; (8007424 <USBD_LL_Init+0x94>)
 8007416:	f7fb f8cb 	bl	80025b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3708      	adds	r7, #8
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	20001694 	.word	0x20001694

08007428 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007430:	2300      	movs	r3, #0
 8007432:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007434:	2300      	movs	r3, #0
 8007436:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800743e:	4618      	mov	r0, r3
 8007440:	f7f9 ffb9 	bl	80013b6 <HAL_PCD_Start>
 8007444:	4603      	mov	r3, r0
 8007446:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007448:	7bfb      	ldrb	r3, [r7, #15]
 800744a:	4618      	mov	r0, r3
 800744c:	f000 f942 	bl	80076d4 <USBD_Get_USB_Status>
 8007450:	4603      	mov	r3, r0
 8007452:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007454:	7bbb      	ldrb	r3, [r7, #14]
}
 8007456:	4618      	mov	r0, r3
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b084      	sub	sp, #16
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
 8007466:	4608      	mov	r0, r1
 8007468:	4611      	mov	r1, r2
 800746a:	461a      	mov	r2, r3
 800746c:	4603      	mov	r3, r0
 800746e:	70fb      	strb	r3, [r7, #3]
 8007470:	460b      	mov	r3, r1
 8007472:	70bb      	strb	r3, [r7, #2]
 8007474:	4613      	mov	r3, r2
 8007476:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007478:	2300      	movs	r3, #0
 800747a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800747c:	2300      	movs	r3, #0
 800747e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007486:	78bb      	ldrb	r3, [r7, #2]
 8007488:	883a      	ldrh	r2, [r7, #0]
 800748a:	78f9      	ldrb	r1, [r7, #3]
 800748c:	f7fa fc8a 	bl	8001da4 <HAL_PCD_EP_Open>
 8007490:	4603      	mov	r3, r0
 8007492:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007494:	7bfb      	ldrb	r3, [r7, #15]
 8007496:	4618      	mov	r0, r3
 8007498:	f000 f91c 	bl	80076d4 <USBD_Get_USB_Status>
 800749c:	4603      	mov	r3, r0
 800749e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b084      	sub	sp, #16
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
 80074b2:	460b      	mov	r3, r1
 80074b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074b6:	2300      	movs	r3, #0
 80074b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074ba:	2300      	movs	r3, #0
 80074bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80074c4:	78fa      	ldrb	r2, [r7, #3]
 80074c6:	4611      	mov	r1, r2
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7fa fcd3 	bl	8001e74 <HAL_PCD_EP_Close>
 80074ce:	4603      	mov	r3, r0
 80074d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074d2:	7bfb      	ldrb	r3, [r7, #15]
 80074d4:	4618      	mov	r0, r3
 80074d6:	f000 f8fd 	bl	80076d4 <USBD_Get_USB_Status>
 80074da:	4603      	mov	r3, r0
 80074dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074de:	7bbb      	ldrb	r3, [r7, #14]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	460b      	mov	r3, r1
 80074f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074f4:	2300      	movs	r3, #0
 80074f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074f8:	2300      	movs	r3, #0
 80074fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007502:	78fa      	ldrb	r2, [r7, #3]
 8007504:	4611      	mov	r1, r2
 8007506:	4618      	mov	r0, r3
 8007508:	f7fa fdab 	bl	8002062 <HAL_PCD_EP_SetStall>
 800750c:	4603      	mov	r3, r0
 800750e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007510:	7bfb      	ldrb	r3, [r7, #15]
 8007512:	4618      	mov	r0, r3
 8007514:	f000 f8de 	bl	80076d4 <USBD_Get_USB_Status>
 8007518:	4603      	mov	r3, r0
 800751a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800751c:	7bbb      	ldrb	r3, [r7, #14]
}
 800751e:	4618      	mov	r0, r3
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b084      	sub	sp, #16
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
 800752e:	460b      	mov	r3, r1
 8007530:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007532:	2300      	movs	r3, #0
 8007534:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007536:	2300      	movs	r3, #0
 8007538:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007540:	78fa      	ldrb	r2, [r7, #3]
 8007542:	4611      	mov	r1, r2
 8007544:	4618      	mov	r0, r3
 8007546:	f7fa fdf0 	bl	800212a <HAL_PCD_EP_ClrStall>
 800754a:	4603      	mov	r3, r0
 800754c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800754e:	7bfb      	ldrb	r3, [r7, #15]
 8007550:	4618      	mov	r0, r3
 8007552:	f000 f8bf 	bl	80076d4 <USBD_Get_USB_Status>
 8007556:	4603      	mov	r3, r0
 8007558:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800755a:	7bbb      	ldrb	r3, [r7, #14]
}
 800755c:	4618      	mov	r0, r3
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	460b      	mov	r3, r1
 800756e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007576:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007578:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800757c:	2b00      	cmp	r3, #0
 800757e:	da0b      	bge.n	8007598 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007580:	78fb      	ldrb	r3, [r7, #3]
 8007582:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007586:	68f9      	ldr	r1, [r7, #12]
 8007588:	4613      	mov	r3, r2
 800758a:	00db      	lsls	r3, r3, #3
 800758c:	4413      	add	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	440b      	add	r3, r1
 8007592:	333e      	adds	r3, #62	; 0x3e
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	e00b      	b.n	80075b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007598:	78fb      	ldrb	r3, [r7, #3]
 800759a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800759e:	68f9      	ldr	r1, [r7, #12]
 80075a0:	4613      	mov	r3, r2
 80075a2:	00db      	lsls	r3, r3, #3
 80075a4:	4413      	add	r3, r2
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	440b      	add	r3, r1
 80075aa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80075ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3714      	adds	r7, #20
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	460b      	mov	r3, r1
 80075c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075c8:	2300      	movs	r3, #0
 80075ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075cc:	2300      	movs	r3, #0
 80075ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80075d6:	78fa      	ldrb	r2, [r7, #3]
 80075d8:	4611      	mov	r1, r2
 80075da:	4618      	mov	r0, r3
 80075dc:	f7fa fbbd 	bl	8001d5a <HAL_PCD_SetAddress>
 80075e0:	4603      	mov	r3, r0
 80075e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075e4:	7bfb      	ldrb	r3, [r7, #15]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f000 f874 	bl	80076d4 <USBD_Get_USB_Status>
 80075ec:	4603      	mov	r3, r0
 80075ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b086      	sub	sp, #24
 80075fe:	af00      	add	r7, sp, #0
 8007600:	60f8      	str	r0, [r7, #12]
 8007602:	607a      	str	r2, [r7, #4]
 8007604:	603b      	str	r3, [r7, #0]
 8007606:	460b      	mov	r3, r1
 8007608:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800760a:	2300      	movs	r3, #0
 800760c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800760e:	2300      	movs	r3, #0
 8007610:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007618:	7af9      	ldrb	r1, [r7, #11]
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	f7fa fcd6 	bl	8001fce <HAL_PCD_EP_Transmit>
 8007622:	4603      	mov	r3, r0
 8007624:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007626:	7dfb      	ldrb	r3, [r7, #23]
 8007628:	4618      	mov	r0, r3
 800762a:	f000 f853 	bl	80076d4 <USBD_Get_USB_Status>
 800762e:	4603      	mov	r3, r0
 8007630:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007632:	7dbb      	ldrb	r3, [r7, #22]
}
 8007634:	4618      	mov	r0, r3
 8007636:	3718      	adds	r7, #24
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b086      	sub	sp, #24
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	607a      	str	r2, [r7, #4]
 8007646:	603b      	str	r3, [r7, #0]
 8007648:	460b      	mov	r3, r1
 800764a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800764c:	2300      	movs	r3, #0
 800764e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007650:	2300      	movs	r3, #0
 8007652:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800765a:	7af9      	ldrb	r1, [r7, #11]
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	f7fa fc52 	bl	8001f08 <HAL_PCD_EP_Receive>
 8007664:	4603      	mov	r3, r0
 8007666:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007668:	7dfb      	ldrb	r3, [r7, #23]
 800766a:	4618      	mov	r0, r3
 800766c:	f000 f832 	bl	80076d4 <USBD_Get_USB_Status>
 8007670:	4603      	mov	r3, r0
 8007672:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007674:	7dbb      	ldrb	r3, [r7, #22]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3718      	adds	r7, #24
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b082      	sub	sp, #8
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
 8007686:	460b      	mov	r3, r1
 8007688:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007690:	78fa      	ldrb	r2, [r7, #3]
 8007692:	4611      	mov	r1, r2
 8007694:	4618      	mov	r0, r3
 8007696:	f7fa fc82 	bl	8001f9e <HAL_PCD_EP_GetRxCount>
 800769a:	4603      	mov	r3, r0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3708      	adds	r7, #8
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80076ac:	4b03      	ldr	r3, [pc, #12]	; (80076bc <USBD_static_malloc+0x18>)
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	370c      	adds	r7, #12
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	20001ba0 	.word	0x20001ba0

080076c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]

}
 80076c8:	bf00      	nop
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	4603      	mov	r3, r0
 80076dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076de:	2300      	movs	r3, #0
 80076e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80076e2:	79fb      	ldrb	r3, [r7, #7]
 80076e4:	2b03      	cmp	r3, #3
 80076e6:	d817      	bhi.n	8007718 <USBD_Get_USB_Status+0x44>
 80076e8:	a201      	add	r2, pc, #4	; (adr r2, 80076f0 <USBD_Get_USB_Status+0x1c>)
 80076ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ee:	bf00      	nop
 80076f0:	08007701 	.word	0x08007701
 80076f4:	08007707 	.word	0x08007707
 80076f8:	0800770d 	.word	0x0800770d
 80076fc:	08007713 	.word	0x08007713
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007700:	2300      	movs	r3, #0
 8007702:	73fb      	strb	r3, [r7, #15]
    break;
 8007704:	e00b      	b.n	800771e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007706:	2303      	movs	r3, #3
 8007708:	73fb      	strb	r3, [r7, #15]
    break;
 800770a:	e008      	b.n	800771e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800770c:	2301      	movs	r3, #1
 800770e:	73fb      	strb	r3, [r7, #15]
    break;
 8007710:	e005      	b.n	800771e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007712:	2303      	movs	r3, #3
 8007714:	73fb      	strb	r3, [r7, #15]
    break;
 8007716:	e002      	b.n	800771e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007718:	2303      	movs	r3, #3
 800771a:	73fb      	strb	r3, [r7, #15]
    break;
 800771c:	bf00      	nop
  }
  return usb_status;
 800771e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007720:	4618      	mov	r0, r3
 8007722:	3714      	adds	r7, #20
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <__libc_init_array>:
 800772c:	b570      	push	{r4, r5, r6, lr}
 800772e:	4d0d      	ldr	r5, [pc, #52]	; (8007764 <__libc_init_array+0x38>)
 8007730:	4c0d      	ldr	r4, [pc, #52]	; (8007768 <__libc_init_array+0x3c>)
 8007732:	1b64      	subs	r4, r4, r5
 8007734:	10a4      	asrs	r4, r4, #2
 8007736:	2600      	movs	r6, #0
 8007738:	42a6      	cmp	r6, r4
 800773a:	d109      	bne.n	8007750 <__libc_init_array+0x24>
 800773c:	4d0b      	ldr	r5, [pc, #44]	; (800776c <__libc_init_array+0x40>)
 800773e:	4c0c      	ldr	r4, [pc, #48]	; (8007770 <__libc_init_array+0x44>)
 8007740:	f000 f820 	bl	8007784 <_init>
 8007744:	1b64      	subs	r4, r4, r5
 8007746:	10a4      	asrs	r4, r4, #2
 8007748:	2600      	movs	r6, #0
 800774a:	42a6      	cmp	r6, r4
 800774c:	d105      	bne.n	800775a <__libc_init_array+0x2e>
 800774e:	bd70      	pop	{r4, r5, r6, pc}
 8007750:	f855 3b04 	ldr.w	r3, [r5], #4
 8007754:	4798      	blx	r3
 8007756:	3601      	adds	r6, #1
 8007758:	e7ee      	b.n	8007738 <__libc_init_array+0xc>
 800775a:	f855 3b04 	ldr.w	r3, [r5], #4
 800775e:	4798      	blx	r3
 8007760:	3601      	adds	r6, #1
 8007762:	e7f2      	b.n	800774a <__libc_init_array+0x1e>
 8007764:	0800784c 	.word	0x0800784c
 8007768:	0800784c 	.word	0x0800784c
 800776c:	0800784c 	.word	0x0800784c
 8007770:	08007850 	.word	0x08007850

08007774 <memset>:
 8007774:	4402      	add	r2, r0
 8007776:	4603      	mov	r3, r0
 8007778:	4293      	cmp	r3, r2
 800777a:	d100      	bne.n	800777e <memset+0xa>
 800777c:	4770      	bx	lr
 800777e:	f803 1b01 	strb.w	r1, [r3], #1
 8007782:	e7f9      	b.n	8007778 <memset+0x4>

08007784 <_init>:
 8007784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007786:	bf00      	nop
 8007788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800778a:	bc08      	pop	{r3}
 800778c:	469e      	mov	lr, r3
 800778e:	4770      	bx	lr

08007790 <_fini>:
 8007790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007792:	bf00      	nop
 8007794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007796:	bc08      	pop	{r3}
 8007798:	469e      	mov	lr, r3
 800779a:	4770      	bx	lr
